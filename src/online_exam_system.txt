-e [1;34m===== ./utils/protectRoute.js =====[0m
//src/utils/protectRoute.js
import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import { account } from "./appwrite";

const protectRoute = (WrappedComponent) => {
  return (props) => {
    const router = useRouter();
    const [isAuthenticated, setIsAuthenticated] = useState(null);

    useEffect(() => {
      const checkAuth = async () => {
        try {
          let user = null;

          if (router.pathname.startsWith("/admin")) {
            // ‚úÖ Admin Authentication (via Appwrite Auth)
            user = await account.get();
          } else {
            // ‚úÖ Student Authentication (via localStorage)
            const studentSession = localStorage.getItem("studentSession");
            if (studentSession) {
              console.log("‚úÖ Student session found in protectRoute:", studentSession);
              user = JSON.parse(studentSession);
            }
          }

          if (user) {
            setIsAuthenticated(true);
          } else {
            throw new Error("Not authenticated");
          }
        } catch (error) {
          setIsAuthenticated(false);
          router.replace("/login"); // ‚ùå Redirect if not authenticated
        }
      };

      checkAuth();
    }, []);

    if (isAuthenticated === null) {
      return <p>Loading...</p>; // ‚úÖ Prevents flashing protected page
    }

    return <WrappedComponent {...props} />;
  };
};

export default protectRoute;
-e [1;34m===== ./utils/auth.js =====[0m
import { account, databases, ID, Query } from "./appwrite";

const DATABASE_ID = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;
const STUDENTS_COLLECTION_ID = process.env.NEXT_PUBLIC_APPWRITE_STUDENTS_COLLECTION_ID;
const SESSIONS_COLLECTION_ID = process.env.NEXT_PUBLIC_APPWRITE_STUDENT_SESSIONS_COLLECTION_ID;

export const loginAdmin = async (email, password) => {
  try {
    const session = await account.createEmailPasswordSession(email, password);
    return session;
  } catch (error) {
    throw new Error(error.message);
  }
};

export const loginStudent = async (email, password) => {
  try {
    // First find the student in your database
    const response = await databases.listDocuments(
      DATABASE_ID,
      STUDENTS_COLLECTION_ID,
      [Query.equal("email", [email])]
    );

    if (response.documents.length === 0) {
      throw new Error("Student not found.");
    }

    const student = response.documents[0];

    // Verify password
    if (student.password !== password) {
      throw new Error("Invalid credentials. Please check your email and password.");
    }

    // Check for existing active sessions for this student
    const activeSessions = await databases.listDocuments(
        DATABASE_ID,
        SESSIONS_COLLECTION_ID,
        [
            Query.equal('students_id', [student.$id]),
            Query.equal('is_active', true)
        ]
    );

    if (activeSessions.documents.length > 0) {
        throw new Error("This account is already logged in on another device.");
    }

    // Create a new session document in the database
    const sessionDoc = await databases.createDocument(
        DATABASE_ID,
        SESSIONS_COLLECTION_ID,
        ID.unique(),
        {
            students_id: student.$id,
            login_at: new Date().toISOString(),
            is_active: true,
            ip_address: '127.0.0.1', // Placeholder, as client-side IP is not reliable
            user_agent: navigator.userAgent, // Store the browser's user agent
        }
    );

    // Return the student session data including the studentId and the new database session ID
    return {
      studentId: student.$id,
      email: student.email,
      name: student.name,
      sessionId: sessionDoc.$id, // Store the session document ID
    };
  } catch (error) {
    throw new Error(error.message);
  }
};

export const getCurrentStudentSession = () => {
  if (typeof window !== 'undefined') {
    // Use sessionStorage which clears automatically when the browser tab is closed
    const session = sessionStorage.getItem('studentSession');
    return session ? JSON.parse(session) : null;
  }
  return null;
};

export const logoutStudent = async () => {
  if (typeof window !== 'undefined') {
    const session = getCurrentStudentSession();
    if (session && session.sessionId) {
        try {
            // Mark the session as inactive in the database upon logout
            await databases.updateDocument(
                DATABASE_ID,
                SESSIONS_COLLECTION_ID,
                session.sessionId,
                {
                    is_active: false,
                    logout_at: new Date().toISOString()
                }
            );
        } catch (error) {
            console.error("Failed to update session on logout:", error);
            // We still want to log the user out on the client-side even if the DB update fails
        }
    }
    // Remove the session from sessionStorage
    sessionStorage.removeItem('studentSession');
  }
};
-e [1;34m===== ./utils/date.js =====[0m
// src/utils/date.js

/**
 * Format a date/time string as 'YYYY-MM-DD HH:mm' in UTC
 */
export function formatDateTimeUTC(dateString) {
  if (!dateString) return "N/A";
  const d = new Date(dateString);
  if (isNaN(d)) return "Invalid Date";
  // Format as 'YYYY-MM-DD HH:mm' in UTC
  const year = d.getUTCFullYear();
  const month = String(d.getUTCMonth() + 1).padStart(2, '0');
  const day = String(d.getUTCDate()).padStart(2, '0');
  const hour = String(d.getUTCHours()).padStart(2, '0');
  const minute = String(d.getUTCMinutes()).padStart(2, '0');
  return `${year}-${month}-${day} ${hour}:${minute}`;
}

/**
 * Format a date string as 'YYYY-MM-DD' in UTC
 */
export function formatDateUTC(dateString) {
  if (!dateString) return "N/A";
  const d = new Date(dateString);
  if (isNaN(d)) return "Invalid Date";
  const year = d.getUTCFullYear();
  const month = String(d.getUTCMonth() + 1).padStart(2, '0');
  const day = String(d.getUTCDate()).padStart(2, '0');
  return `${year}-${month}-${day}`;
}

/**
 * Format a time string as 'HH:mm' in UTC
 */
export function formatTimeUTC(dateString) {
  if (!dateString) return "N/A";
  const d = new Date(dateString);
  if (isNaN(d)) return "Invalid Date";
  const hour = String(d.getUTCHours()).padStart(2, '0');
  const minute = String(d.getUTCMinutes()).padStart(2, '0');
  return `${hour}:${minute}`;
} -e [1;34m===== ./utils/appwrite.js =====[0m
import { Client, Account, Databases, Storage, ID, Query, Permission, Role } from "appwrite";

const client = new Client();
client
  .setEndpoint(process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT)
  .setProject(process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID);

const account = new Account(client);
const databases = new Databases(client);
const storage = new Storage(client);

// Export all the initialized instances and classes
export { 
  client,
  account, 
  databases, 
  storage, 
  ID, 
  Query, 
  Permission, 
  Role 
};-e [1;34m===== ./utils/performance.js =====[0m
// Performance monitoring utility
class PerformanceMonitor {
  constructor() {
    this.metrics = new Map();
    this.startTimes = new Map();
  }

  // Start timing an operation
  startTimer(operation) {
    this.startTimes.set(operation, performance.now());
  }

  // End timing and record metric
  endTimer(operation) {
    const startTime = this.startTimes.get(operation);
    if (startTime) {
      const duration = performance.now() - startTime;
      this.recordMetric(operation, duration);
      this.startTimes.delete(operation);
      return duration;
    }
    return 0;
  }

  // Record a metric
  recordMetric(operation, value) {
    if (!this.metrics.has(operation)) {
      this.metrics.set(operation, []);
    }
    this.metrics.get(operation).push({
      value,
      timestamp: Date.now()
    });

    // Keep only last 100 measurements
    const measurements = this.metrics.get(operation);
    if (measurements.length > 100) {
      measurements.shift();
    }
  }

  // Get average time for an operation
  getAverageTime(operation) {
    const measurements = this.metrics.get(operation);
    if (!measurements || measurements.length === 0) return 0;
    
    const sum = measurements.reduce((acc, m) => acc + m.value, 0);
    return sum / measurements.length;
  }

  // Get latest measurement
  getLatestMeasurement(operation) {
    const measurements = this.metrics.get(operation);
    if (!measurements || measurements.length === 0) return null;
    return measurements[measurements.length - 1];
  }

  // Get performance summary
  getSummary() {
    const summary = {};
    for (const [operation, measurements] of this.metrics) {
      if (measurements.length > 0) {
        const values = measurements.map(m => m.value);
        summary[operation] = {
          average: values.reduce((a, b) => a + b, 0) / values.length,
          min: Math.min(...values),
          max: Math.max(...values),
          count: values.length,
          latest: values[values.length - 1]
        };
      }
    }
    return summary;
  }

  // Clear metrics
  clear() {
    this.metrics.clear();
    this.startTimes.clear();
  }

  // Log performance data to console (development only)
  logPerformance() {
    if (process.env.NODE_ENV === 'development') {
      console.group('üöÄ Performance Metrics');
      const summary = this.getSummary();
      for (const [operation, metrics] of Object.entries(summary)) {
        console.log(`${operation}:`, {
          avg: `${metrics.average.toFixed(2)}ms`,
          min: `${metrics.min.toFixed(2)}ms`,
          max: `${metrics.max.toFixed(2)}ms`,
          latest: `${metrics.latest.toFixed(2)}ms`,
          count: metrics.count
        });
      }
      console.groupEnd();
    }
  }
}

// Create singleton instance
const performanceMonitor = new PerformanceMonitor();

// Performance operation constants
export const PERFORMANCE_OPS = {
  DASHBOARD_LOAD: 'dashboard_load',
  DATA_FETCH: 'data_fetch',
  CACHE_READ: 'cache_read',
  CACHE_WRITE: 'cache_write',
  COMPONENT_RENDER: 'component_render'
};

export default performanceMonitor; -e [1;34m===== ./utils/cache.js =====[0m
// Simple in-memory cache for dashboard data
class DashboardCache {
  constructor() {
    this.cache = new Map();
    this.timeouts = new Map();
  }

  // Set cache with expiration time (default: 5 minutes)
  set(key, data, ttl = 5 * 60 * 1000) {
    this.cache.set(key, {
      data,
      timestamp: Date.now(),
      ttl
    });

    // Clear existing timeout
    if (this.timeouts.has(key)) {
      clearTimeout(this.timeouts.get(key));
    }

    // Set new timeout
    const timeout = setTimeout(() => {
      this.delete(key);
    }, ttl);

    this.timeouts.set(key, timeout);
  }

  // Get cached data
  get(key) {
    const item = this.cache.get(key);
    if (!item) return null;

    // Check if expired
    if (Date.now() - item.timestamp > item.ttl) {
      this.delete(key);
      return null;
    }

    return item.data;
  }

  // Delete cache entry
  delete(key) {
    this.cache.delete(key);
    if (this.timeouts.has(key)) {
      clearTimeout(this.timeouts.get(key));
      this.timeouts.delete(key);
    }
  }

  // Clear all cache
  clear() {
    this.cache.clear();
    this.timeouts.forEach(timeout => clearTimeout(timeout));
    this.timeouts.clear();
  }

  // Get cache size
  size() {
    return this.cache.size;
  }

  // Check if key exists and is valid
  has(key) {
    return this.get(key) !== null;
  }
}

// Create singleton instance
const dashboardCache = new DashboardCache();

// Cache keys
export const CACHE_KEYS = {
  DASHBOARD_STATS: 'dashboard_stats',
  UPCOMING_EXAMS: 'upcoming_exams',
  RECENT_ACTIVITY: 'recent_activity',
  STUDENTS_COUNT: 'students_count',
  EXAMS_COUNT: 'exams_count',
  QUESTIONS_COUNT: 'questions_count',
  COURSES_COUNT: 'courses_count'
};

export default dashboardCache; -e [1;34m===== ./pages/admin/controller.jsx =====[0m
import React, { useState, useEffect, useCallback } from 'react';
import { databases, ID, Query, account } from '../../utils/appwrite';
import { Plus, Edit, Trash2 } from 'lucide-react';
import { lazy, Suspense } from 'react';

const Modal = lazy(() => import("../../components/Modal"));

const DATABASE_ID = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;
const CONTROLLERS_COLLECTION_ID = 'controllers';

const ManageControllersPage = () => {
    const [controllers, setControllers] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [editingController, setEditingController] = useState(null);
    const [currentUser, setCurrentUser] = useState(null);
    const [userNames, setUserNames] = useState({});

    const initialFormData = {
        Name: '',
        email: '',
        designation: '',
    };
    const [formData, setFormData] = useState(initialFormData);

    // Get current user on component mount
    useEffect(() => {
        const fetchCurrentUser = async () => {
            try {
                const user = await account.get();
                setCurrentUser(user);
            } catch (err) {
                console.error("Failed to fetch current user:", err);
            }
        };
        fetchCurrentUser();
    }, []);

    // Fetch user names for created_by fields
    const fetchUserNames = useCallback(async (userIds) => {
        try {
            const uniqueIds = [...new Set(userIds.filter(id => id))];
            const names = {};
            
            for (const userId of uniqueIds) {
                try {
                    const user = await account.get(userId);
                    names[userId] = user.name || user.email;
                } catch (err) {
                    console.error(`Failed to fetch user ${userId}:`, err);
                    names[userId] = 'Unknown User';
                }
            }
            
            setUserNames(names);
        } catch (err) {
            console.error("Error fetching user names:", err);
        }
    }, []);

    const fetchControllers = useCallback(async () => {
        setIsLoading(true);
        setError(null);
        try {
            const response = await databases.listDocuments(
                DATABASE_ID, 
                CONTROLLERS_COLLECTION_ID, 
                [Query.orderDesc("$createdAt")]
            );
            setControllers(response.documents);
            
            // Extract all unique created_by user IDs
            const userIds = response.documents.map(c => c.created_by).filter(Boolean);
            if (userIds.length > 0) {
                await fetchUserNames(userIds);
            }
        } catch (err) {
            setError("Failed to fetch controllers. Please try again.");
            console.error(err);
        } finally {
            setIsLoading(false);
        }
    }, [fetchUserNames]);

    useEffect(() => {
        fetchControllers();
    }, [fetchControllers]);

    const handleOpenModal = (controller = null) => {
        if (controller) {
            setEditingController(controller);
            setFormData({
                Name: controller.Name || '',
                email: controller.email,
                designation: controller.designation || '',
            });
        } else {
            setEditingController(null);
            setFormData(initialFormData);
        }
        setIsModalOpen(true);
    };

    const handleCloseModal = () => {
        setIsModalOpen(false);
        setEditingController(null);
        setFormData(initialFormData);
        setError(null);
    };

    const handleSave = async (data) => {
        if (!data.Name || !data.email) {
            setError("Name and email are required fields.");
            return;
        }
        
        setIsLoading(true);
        setError(null);

        try {
            if (editingController) {
                // Update existing controller
                await databases.updateDocument(
                    DATABASE_ID, 
                    CONTROLLERS_COLLECTION_ID, 
                    editingController.$id, 
                    {
                        Name: data.Name,
                        email: data.email,
                        designation: data.designation,
                    }
                );
            } else {
                // Create new controller
                await databases.createDocument(
                    DATABASE_ID, 
                    CONTROLLERS_COLLECTION_ID, 
                    ID.unique(), 
                    {
                        Name: data.Name,
                        email: data.email,
                        designation: data.designation,
                        created_by: currentUser?.$id // Automatically set current user as creator
                    }
                );
            }
            await fetchControllers();
            handleCloseModal();
        } catch (err) {
            setError(`Operation failed: ${err.message}`);
            console.error(err);
        } finally {
            setIsLoading(false);
        }
    };

    const handleDelete = async (controllerId) => {
        if (window.confirm("Are you sure you want to delete this controller?")) {
            setIsLoading(true);
            try {
                await databases.deleteDocument(
                    DATABASE_ID, 
                    CONTROLLERS_COLLECTION_ID, 
                    controllerId
                );
                await fetchControllers();
            } catch (err) {
                setError(`Failed to delete: ${err.message}`);
            } finally {
                setIsLoading(false);
            }
        }
    };

    const formatDate = (dateString) => {
        const options = { 
            year: 'numeric', 
            month: 'short', 
            day: 'numeric',
            hour: '2-digit', 
            minute: '2-digit' 
        };
        return new Date(dateString).toLocaleString(undefined, options);
    };

    return (
        <div className="w-full p-4">
            <div className="bg-white rounded-lg shadow-md p-6">
                <div className="flex justify-between items-center mb-6">
                    <h2 className="text-2xl font-bold text-gray-800">Controllers Management</h2>
                    <button 
                        onClick={() => handleOpenModal()} 
                        className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md flex items-center gap-2 transition-colors"
                    >
                        <Plus size={18} /> Add Controller
                    </button>
                </div>

                {error && (
                    <div className="mb-4 p-3 bg-red-100 text-red-700 rounded-lg">
                        {error}
                    </div>
                )}

                <div className="overflow-x-auto rounded-lg border border-gray-200">
                    <table className="min-w-full divide-y divide-gray-200">
                        <thead className="bg-gray-50">
                            <tr>
                                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Designation</th>
                                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Created By</th>
                                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Created</th>
                                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                            </tr>
                        </thead>
                        <tbody className="bg-white divide-y divide-gray-200">
                            {isLoading && controllers.length === 0 ? (
                                <tr>
                                    <td colSpan="6" className="px-4 py-4 text-center text-gray-500">
                                        Loading controllers...
                                    </td>
                                </tr>
                            ) : controllers.length === 0 ? (
                                <tr>
                                    <td colSpan="6" className="px-4 py-4 text-center text-gray-500">
                                        No controllers found
                                    </td>
                                </tr>
                            ) : (
                                controllers.map(controller => (
                                    <tr key={controller.$id} className="hover:bg-gray-50">
                                        <td className="px-4 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                            {controller.Name}
                                        </td>
                                        <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-500">
                                            {controller.email}
                                        </td>
                                        <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-500">
                                            {controller.designation || '-'}
                                        </td>
                                        <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-500">
                                            {controller.created_by ? (userNames[controller.created_by] || 'Loading...') : '-'}
                                        </td>
                                        <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-500">
                                            {formatDate(controller.$createdAt)}
                                        </td>
                                        <td className="px-4 py-4 whitespace-nowrap text-sm font-medium flex space-x-2">
                                            <button
                                                onClick={() => handleOpenModal(controller)}
                                                className="text-blue-600 hover:text-blue-900 p-1 rounded hover:bg-blue-50"
                                                title="Edit"
                                            >
                                                <Edit size={16} />
                                            </button>
                                            <button
                                                onClick={() => handleDelete(controller.$id)}
                                                className="text-red-600 hover:text-red-900 p-1 rounded hover:bg-red-50"
                                                title="Delete"
                                            >
                                                <Trash2 size={16} />
                                            </button>
                                        </td>
                                    </tr>
                                ))
                            )}
                        </tbody>
                    </table>
                </div>

                {isModalOpen && (
                    <Suspense fallback={<div className="p-4">Loading form...</div>}>
                        <Modal
                            title={editingController ? "Edit Controller" : "Create New Controller"}
                            onClose={handleCloseModal}
                            onSave={() => handleSave(formData)}
                            initialData={formData}
                            fields={[
                                { name: "Name", label: "Name", type: "text", required: true },
                                { name: "email", label: "Email", type: "email", required: true },
                                { name: "designation", label: "Designation", type: "text" },
                            ]}
                            onChange={(e) => setFormData(prev => ({ ...prev, [e.target.name]: e.target.value }))}
                            isLoading={isLoading}
                            error={error}
                        />
                    </Suspense>
                )}
            </div>
        </div>
    );
};

export default ManageControllersPage;-e [1;34m===== ./pages/admin/publish-results.jsx =====[0m
import React, { useState, useEffect, Suspense } from 'react';
import { databases, Query } from '../../utils/appwrite';
import { CheckCircle, AlertCircle, ArrowLeft, Send, ListChecks } from 'lucide-react';
import Link from 'next/link';

// Custom Message Dialog Component (for alerts/confirmations)
const MessageDialog = ({ isOpen, title, message, onConfirm, onCancel, confirmText = "Confirm", cancelText = "Cancel", isConfirmation = false }) => {
    if (!isOpen) return null;
    return (
        <div className="fixed inset-0 bg-black bg-opacity-60 flex justify-center items-center z-50 p-4">
            <div className="bg-white rounded-xl shadow-2xl p-6 w-full max-w-md transform transition-all duration-300 scale-100 opacity-100">
                <div className="flex items-center mb-4">
                    {title.toLowerCase().includes("error") ? 
                        <AlertCircle className="text-red-500 mr-3" size={24} /> :
                     title.toLowerCase().includes("success") ?
                        <CheckCircle className="text-green-500 mr-3" size={24} /> :
                        <AlertCircle className="text-yellow-500 mr-3" size={24} />
                    }
                    <h3 className="text-xl font-bold text-gray-800">{title}</h3>
                </div>
                <p className="text-gray-700 mb-6">{message}</p>
                <div className="flex justify-end gap-3">
                    {isConfirmation && (
                         <button
                            onClick={onCancel}
                            className="bg-gray-200 text-gray-700 px-5 py-2 rounded-lg hover:bg-gray-300 transition-colors duration-200 shadow-sm"
                         >
                            {cancelText}
                        </button>
                    )}
                    <button
                        onClick={onConfirm}
                        className={`${
                            isConfirmation ? 'bg-blue-600 hover:bg-blue-700' : 
                            title.toLowerCase().includes("error") ? 'bg-red-600 hover:bg-red-700' :
                            'bg-green-600 hover:bg-green-700'
                        } text-white px-5 py-2 rounded-lg transition-colors duration-200 shadow-md`}
                    >
                        {isConfirmation ? confirmText : "OK"}
                    </button>
                </div>
            </div>
        </div>
    );
};

const PublishResultsPage = () => {
  const [exams, setExams] = useState([]);
  const [students, setStudents] = useState([]);
  const [selectedExamId, setSelectedExamId] = useState('');
  const [selectedExamName, setSelectedExamName] = useState('');
  const [loading, setLoading] = useState(false);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [dialogContent, setDialogContent] = useState({ title: "", message: "", onConfirm: () => {}, onCancel: () => {}, isConfirmation: false });
  const [publishedResultsList, setPublishedResultsList] = useState([]);

  const databaseId = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;
  const examsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_EXAMS_COLLECTION_ID;
  const resultsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_RESULTS_COLLECTION_ID;
  const studentsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_STUDENTS_COLLECTION_ID;

  const resolveRelationshipId = (field) => {
    if (!field) return null;
    if (typeof field === 'object' && field.$id) return field.$id;
    if (Array.isArray(field) && field.length > 0) return field[0]?.$id || field[0];
    if (typeof field === 'string') return field;
    return null;
  };

  useEffect(() => {
    const fetchInitialData = async () => {
      setLoading(true);
      try {
        const [examsResponse, studentsResponse] = await Promise.all([
          databases.listDocuments(databaseId, examsCollectionId, [Query.limit(100)]),
          databases.listDocuments(databaseId, studentsCollectionId, [Query.limit(500)])
        ]);
        setExams(examsResponse.documents);
        setStudents(studentsResponse.documents);
      } catch (error) {
        setDialogContent({
            title: "Error",
            message: `Error fetching initial data: ${error.message}`,
            onConfirm: () => setIsDialogOpen(false),
            isConfirmation: false
        });
        setIsDialogOpen(true);
      } finally {
        setLoading(false);
      }
    };
    fetchInitialData();
  }, [databaseId, examsCollectionId, studentsCollectionId]);

  const handleExamSelectionChange = (e) => {
    const examId = e.target.value;
    setSelectedExamId(examId);
    setPublishedResultsList([]);
    const selectedExam = exams.find(exam => exam.$id === examId);
    setSelectedExamName(selectedExam ? selectedExam.name : '');
  };

  const handlePublishResults = async () => {
    if (!selectedExamId) {
       setDialogContent({
            title: "Validation Error",
            message: "Please select an exam to publish results.",
            onConfirm: () => setIsDialogOpen(false),
            isConfirmation: false
        });
        setIsDialogOpen(true);
        return;
    }
    setPublishedResultsList([]);

    setDialogContent({
        title: "Confirm Publish",
        message: `Are you sure you want to publish results for "${selectedExamName || 'the selected exam'}"?`,
        onConfirm: async () => {
            setIsDialogOpen(false);
            setLoading(true);
            try {
              let allResultsForExam = [];
              let offset = 0;
              const limit = 100; 
              let response;
        
              do {
                response = await databases.listDocuments(
                  databaseId,
                  resultsCollectionId,
                  [
                    Query.equal('exam_id', [selectedExamId]), // Querying relationships requires an array
                    Query.equal('publish', false),
                    Query.limit(limit),
                    Query.offset(offset)
                  ]
                );
                allResultsForExam = allResultsForExam.concat(response.documents);
                offset += limit;
              } while (response.documents.length === limit);

              if (allResultsForExam.length === 0) {
                setDialogContent({
                    title: "No Results to Publish",
                    message: "No unpublished results found for the selected exam.",
                    onConfirm: () => setIsDialogOpen(false),
                    isConfirmation: false
                });
                setIsDialogOpen(true);
                setLoading(false);
                return;
              }
        
              const updatePromises = allResultsForExam.map(result =>
                databases.updateDocument(databaseId, resultsCollectionId, result.$id, { publish: true })
              );
              await Promise.all(updatePromises);
              
              const studentMap = new Map(students.map(s => [s.$id, s.name]));
              const updatedResultsWithStudentNames = allResultsForExam.map(res => ({
                  ...res,
                  studentName: studentMap.get(resolveRelationshipId(res.student_id)) || 'Unknown Student',
                  publish: true
              }));
              setPublishedResultsList(updatedResultsWithStudentNames);
        
              setDialogContent({
                  title: "Success",
                  message: `Successfully published ${allResultsForExam.length} results for "${selectedExamName}".`,
                  onConfirm: () => setIsDialogOpen(false),
                  isConfirmation: false
              });
              setIsDialogOpen(true);
            } catch (error) {
              setDialogContent({
                  title: "Error",
                  message: `Failed to publish results: ${error.message}`,
                  onConfirm: () => setIsDialogOpen(false),
                  isConfirmation: false
              });
              setIsDialogOpen(true);
            } finally {
              setLoading(false);
            }
        },
        onCancel: () => setIsDialogOpen(false),
        isConfirmation: true
    });
    setIsDialogOpen(true);
  };

  return (
    <div className="w-full">
      <div className="bg-white rounded-lg shadow-md p-4 sm:p-6">
        <div className="flex items-center mb-6">
          <Link href="/admin/results" legacyBehavior>
            <a className="text-blue-600 hover:text-blue-800 flex items-center mr-4">
              <ArrowLeft size={20} className="mr-1" />
              Back to Results
            </a>
          </Link>
          <h2 className="text-2xl sm:text-3xl font-extrabold text-gray-800">Publish Exam Results</h2>
        </div>

        {isDialogOpen && (
            <MessageDialog
                isOpen={isDialogOpen}
                title={dialogContent.title}
                message={dialogContent.message}
                onConfirm={dialogContent.onConfirm}
                onCancel={dialogContent.onCancel}
                isConfirmation={dialogContent.isConfirmation}
                confirmText={dialogContent.confirmText}
                cancelText={dialogContent.cancelText}
            />
        )}

        <div className="mb-6 p-6 bg-gray-50 rounded-lg border border-gray-200">
          <label htmlFor="examSelect" className="block text-sm font-semibold text-gray-700 mb-2">
            Select Exam to Publish Results:
          </label>
          <select
            id="examSelect"
            value={selectedExamId}
            onChange={handleExamSelectionChange}
            className="mt-1 block w-full px-4 py-2.5 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-gray-800 bg-white text-base"
            disabled={loading}
          >
            <option value="">-- Select an Exam --</option>
            {exams.map(exam => (
              <option key={exam.$id} value={exam.$id}>
                {exam.name}
              </option>
            ))}
          </select>
        </div>

        <div className="flex justify-end mb-8">
          <button
            onClick={handlePublishResults}
            disabled={loading || !selectedExamId}
            className="bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-md transition-colors duration-200 flex items-center gap-2 text-base font-semibold shadow-md disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {loading ? (
              <>
                <div className="animate-spin rounded-full h-5 w-5 border-t-2 border-b-2 border-white"></div>
                Publishing...
              </>
            ) : (
              <>
                <Send size={18} /> Publish Results
              </>
            )}
          </button>
        </div>

        {publishedResultsList.length > 0 && (
          <div className="mt-8">
            <h3 className="text-xl sm:text-2xl font-bold text-gray-800 mb-4 flex items-center">
              <ListChecks size={24} className="mr-2 text-green-600" />
              Results Published for "{selectedExamName}"
            </h3>
            <div className="overflow-x-auto rounded-lg shadow-sm border border-gray-200">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Student Name</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Score</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Percentage</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Result Status</th>
                     <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Publish Status</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {publishedResultsList.map((result) => (
                    <tr key={result.$id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{result.studentName || 'Loading...'}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{result.score}/{result.total_marks}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{result.percentage?.toFixed(1)}%</td>
                      <td className="px-6 py-4 text-sm text-gray-500">
                        <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${ result.status === 'passed' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800' }`}>
                          {result.status?.toUpperCase()}
                        </span>
                      </td>
                      <td className="px-6 py-4 text-sm text-gray-500">
                         {result.publish ? (
                            <span className="px-2 inline-flex items-center text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                                <CheckCircle size={14} className="mr-1" /> Published
                            </span>
                            ) : (
                            <span className="px-2 inline-flex items-center text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800">
                                <AlertCircle size={14} className="mr-1" /> Not Published
                            </span>
                         )}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default PublishResultsPage;-e [1;34m===== ./pages/admin/results.jsx =====[0m
import React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';
import { databases, storage, Query } from '../../utils/appwrite';
import { Eye, Search, Download, RefreshCw, X, Send } from 'lucide-react';
import { formatDateTimeUTC } from "../../utils/date";

const BUCKET_ID = 'questions';

const ResultsAnalysisPage = () => {
  const [results, setResults] = useState([]);
  const [students, setStudents] = useState([]);
  const [exams, setExams] = useState([]);
  const [responses, setResponses] = useState([]);
  const [questions, setQuestions] = useState([]);
  const [examQuestions, setExamQuestions] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('All');
  const [examFilter, setExamFilter] = useState('All');
  const [viewModalOpen, setViewModalOpen] = useState(false);
  const [viewingResult, setViewingResult] = useState(null);
  const [isExportMenuOpen, setIsExportMenuOpen] = useState(false);
  const exportButtonRef = useRef(null);

  const databaseId = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;
  const studentsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_STUDENTS_COLLECTION_ID;
  const examsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_EXAMS_COLLECTION_ID;
  const examQuestionsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_EXAM_QUESTIONS_COLLECTION_ID;
  const questionsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_QUESTIONS_COLLECTION_ID;
  const responsesCollectionId = process.env.NEXT_PUBLIC_APPWRITE_RESPONSES_COLLECTION_ID;
  const resultsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_RESULTS_COLLECTION_ID;

  const resolveRelationshipId = (field) => {
    if (!field) return null;
    if (typeof field === 'object' && field?.$id) return field.$id;
    if (Array.isArray(field) && field.length > 0) return field[0]?.$id || field[0];
    if (typeof field === 'string') return field;
    return null;
  };
  
  const getQuestionMarks = (questionId) => {
    const mapping = examQuestions.find(eq => resolveRelationshipId(eq.question_id) === questionId);
    return mapping?.marks || 0;
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    try {
        return formatDateTimeUTC(new Date(dateString));
    } catch (err) {
      return 'Invalid Date';
    }
  };

  const formatDuration = (minutes) => {
    if (minutes === null || minutes === undefined) return 'N/A';
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    return hours > 0 ? `${hours}h ${mins}m` : `${mins}m`;
  };

  const fetchAllData = useCallback(async () => {
    setLoading(true);
    setError(null);
    try {
      const [resultsResponse, studentsResponse, examsResponse] = await Promise.all([
        databases.listDocuments(databaseId, resultsCollectionId, [Query.orderDesc("$createdAt")]),
        databases.listDocuments(databaseId, studentsCollectionId),
        databases.listDocuments(databaseId, examsCollectionId)
      ]);

      const studentMap = new Map(studentsResponse.documents.map(s => [s.$id, s]));
      const examMap = new Map(examsResponse.documents.map(e => [e.$id, e]));

      const normalizedResults = resultsResponse.documents.map(result => {
        const studentId = resolveRelationshipId(result.student_id);
        const examId = resolveRelationshipId(result.exam_id);
        const student = studentMap.get(studentId);
        const exam = examMap.get(examId);

        return {
          ...result,
          studentName: student ? student.name : 'Unknown Student',
          studentEmail: student ? student.email : 'N/A',
          studentId: studentId,
          examName: exam ? exam.name : 'Unknown Exam',
          examId: examId,
          percentage: result.total_marks > 0 ? (result.score / result.total_marks * 100) : 0,
          status: (result.score / result.total_marks * 100) >= 30 ? 'passed' : 'failed',
          createdDate: result.$createdAt ? formatDateTimeUTC(result.$createdAt) : 'N/A'
        };
      });

      setResults(normalizedResults);
      setStudents(studentsResponse.documents);
      setExams(examsResponse.documents);
    } catch (err) {
      setError(err.message || 'Failed to fetch data.');
    } finally {
      setLoading(false);
    }
  }, [databaseId, resultsCollectionId, studentsCollectionId, examsCollectionId]);

  const fetchResponseData = useCallback(async (result) => {
    setLoading(true);
    setError(null);
    try {
      // FIX: Fetch all documents and filter client-side due to virtual relationship query limitation
      const allExamQuestionsResponse = await databases.listDocuments(
        databaseId,
        examQuestionsCollectionId,
        [Query.limit(5000), Query.orderAsc('order')]
      );
      const filteredExamQuestions = allExamQuestionsResponse.documents.filter(doc =>
        resolveRelationshipId(doc.exam_id) === result.examId
      );
      setExamQuestions(filteredExamQuestions);
      
      const allResponsesResponse = await databases.listDocuments(
        databaseId,
        responsesCollectionId,
        [Query.limit(5000)]
      );
      const filteredResponses = allResponsesResponse.documents.filter(res =>
        resolveRelationshipId(res.student_id) === result.studentId &&
        resolveRelationshipId(res.exam_id) === result.examId
      );
      setResponses(filteredResponses);

      const questionIds = filteredExamQuestions.map(eq => resolveRelationshipId(eq.question_id)).filter(Boolean);
      
      if (questionIds.length > 0) {
        const questionsResponse = await databases.listDocuments(
          databaseId,
          questionsCollectionId,
          [Query.equal('$id', questionIds), Query.limit(100)]
        );
        setQuestions(questionsResponse.documents);
      } else {
        setQuestions([]);
      }
    } catch (err) {
      setError(err.message || 'Failed to load response details.');
    } finally {
      setLoading(false);
    }
  }, [databaseId, examQuestionsCollectionId, responsesCollectionId, questionsCollectionId]);


  const handleExport = async (format) => { /* ... No changes needed here ... */ };

  const handleView = (result) => {
    setViewingResult(result);
    setViewModalOpen(true);
    fetchResponseData(result);
  };

  const closeViewModal = () => {
    setViewModalOpen(false);
    setViewingResult(null);
    setResponses([]);
    setQuestions([]);
    setExamQuestions([]);
  };

  const filteredResults = useMemo(() => {
    return (results || []).filter(result => {
        const matchesSearch =
            (result.studentName || '').toLowerCase().includes(searchTerm.toLowerCase()) ||
            (result.examName || '').toLowerCase().includes(searchTerm.toLowerCase());
        const matchesStatus =
            statusFilter === 'All' ||
            (statusFilter === 'Pass' && result.status === 'passed') ||
            (statusFilter === 'Fail' && result.status === 'failed');
        const matchesExam =
            examFilter === 'All' ||
            result.examId === examFilter;
        return matchesSearch && matchesStatus && matchesExam;
    });
  }, [results, searchTerm, statusFilter, examFilter]);

  useEffect(() => {
    fetchAllData();
  }, [fetchAllData]);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (exportButtonRef.current && !exportButtonRef.current.contains(event.target)) {
        setIsExportMenuOpen(false);
      }
    };
    if (isExportMenuOpen) {
      document.addEventListener("mousedown", handleClickOutside);
    }
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [isExportMenuOpen]);

  const ActionButtons = ({ result }) => (
    <div className="flex items-center gap-1 sm:gap-2">
      <button
        className="bg-gray-500 text-white p-1 rounded-md hover:bg-gray-600 transition-colors duration-200"
        onClick={() => handleView(result)}
        title="View"
        aria-label="View result"
      >
        <Eye size={16} className="w-4 h-4" />
      </button>
    </div>
  );

  return (
    <div className="w-full">
      <div className="bg-white rounded-lg shadow-md p-4 sm:p-6">
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-3">
          <h2 className="text-2xl sm:text-3xl font-extrabold text-gray-800">Exam Results</h2>
          <div className="flex flex-wrap gap-2">
            <button onClick={fetchAllData} className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition-colors duration-200 flex items-center gap-2 text-base font-semibold shadow-sm" disabled={loading}>
              <RefreshCw size={18} /> Refresh
            </button>
            <button onClick={() => window.location.href = '/admin/publish-results'} className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md transition-colors duration-200 flex items-center gap-2 text-base font-semibold shadow-sm">
              <Send size={18} /> Publish Results
            </button>
            <div className="relative" ref={exportButtonRef}>
              <button onClick={() => setIsExportMenuOpen(!isExportMenuOpen)} className="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-md transition-colors duration-200 flex items-center gap-2 text-base font-semibold shadow-sm">
                <Download size={18} />
                <span>Export</span>
              </button>
              {isExportMenuOpen && (
                <div className="absolute right-0 mt-2 w-32 bg-white rounded-md shadow-lg z-50 border border-gray-200">
                  <button onClick={() => handleExport("csv")} className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Export to CSV</button>
                  <button onClick={() => handleExport("xls")} className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Export to XLS</button>
                </div>
              )}
            </div>
          </div>
        </div>

        {error && !viewModalOpen && ( <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-6" role="alert"><strong className="font-bold">Error:</strong><span className="block sm:inline ml-2">{error}</span></div> )}

        <div className="mb-4 flex flex-col sm:flex-row items-start sm:items-center gap-3">
          <div className="relative flex-grow sm:ml-0 w-full sm:w-auto">
            <label htmlFor="main_search" className="sr-only">Search Results</label>
            <input type="text" id="main_search" placeholder="Search by student or exam..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-gray-800 bg-gray-50 pl-10" />
            <Search size={20} className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 mt-0.5" />
          </div>
          <label htmlFor="exam_filter" className="text-sm font-semibold text-gray-700 whitespace-nowrap">Filter by Exam:</label>
          <select id="exam_filter" value={examFilter} onChange={(e) => setExamFilter(e.target.value)} className="mt-1 block w-full sm:w-auto px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-gray-800 bg-gray-50">
            <option value="All">All Exams</option>
            {exams.map(exam => (<option key={exam.$id} value={exam.$id}>{exam.name}</option>))}
          </select>
          {examFilter !== 'All' && (<button onClick={() => setExamFilter('All')} className="bg-gray-200 text-gray-700 px-3 py-1.5 rounded-md hover:bg-gray-300 transition-colors duration-200 flex items-center gap-1 text-sm shadow-sm"><X size={16} />Clear Exam</button>)}
          <label htmlFor="status_filter" className="text-sm font-semibold text-gray-700 whitespace-nowrap">Filter by Status:</label>
          <select id="status_filter" value={statusFilter} onChange={(e) => setStatusFilter(e.target.value)} className="mt-1 block w-full sm:w-auto px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-gray-800 bg-gray-50">
            <option value="All">All Statuses</option>
            <option value="Pass">Passed</option>
            <option value="Fail">Failed</option>
          </select>
          {statusFilter !== 'All' && (<button onClick={() => setStatusFilter('All')} className="bg-gray-200 text-gray-700 px-3 py-1.5 rounded-md hover:bg-gray-300 transition-colors duration-200 flex items-center gap-1 text-sm shadow-sm"><X size={16} />Clear Status</button>)}
        </div>

        {loading && !viewModalOpen ? (
          <div className="flex justify-center items-center h-64"><p className="text-xl text-gray-600">Loading...</p></div>
        ) : filteredResults.length === 0 ? (
          <div className="text-center py-10"><p className="text-gray-500 text-lg">No results found.</p></div>
        ) : (
          <div className="overflow-x-auto rounded-lg shadow-sm border border-gray-200">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Student</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider hidden sm:table-cell">Exam</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Score</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider hidden sm:table-cell">Status</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider hidden md:table-cell">Date</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider hidden md:table-cell">Published</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredResults.map((result) => (
                  <tr key={result.$id} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{result.studentName}<div className="text-sm text-gray-500 sm:hidden">{result.examName}</div></td>
                    <td className="px-6 py-4 text-sm text-gray-500 hidden sm:table-cell">{result.examName}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{result.score}/{result.total_marks} ({result.percentage?.toFixed(1)}%)</td>
                    <td className="px-6 py-4 text-sm text-gray-500 hidden sm:table-cell"><span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${ result.status === 'passed' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800' }`}>{result.status.toUpperCase()}</span></td>
                    <td className="px-6 py-4 text-sm text-gray-500 hidden md:table-cell whitespace-nowrap">{result.createdDate}</td>
                    <td className="px-6 py-4 text-sm text-gray-500 hidden md:table-cell whitespace-nowrap"><span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${ result.publish ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800' }`}>{result.publish ? 'Published' : 'Not Published'}</span></td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500"><ActionButtons result={result} /></td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}

        {viewModalOpen && viewingResult && (
          <div className="fixed inset-0 flex justify-center items-start z-50 bg-black bg-opacity-50 overflow-y-auto p-4">
            <div className="bg-white rounded-lg shadow-xl p-6 max-w-4xl w-full my-8">
                <div className="flex justify-between items-center mb-4 border-b pb-3">
                    <h3 className="text-xl font-bold">Result Details: {viewingResult.examName}</h3>
                    <button onClick={closeViewModal} className="text-gray-500 hover:text-gray-700"><X size={24} /></button>
                </div>
                
                <div className="bg-gray-50 p-4 rounded-lg mb-6">
                    <h4 className="text-lg font-semibold mb-2">Result Summary</h4>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
                        <div className="p-2 bg-blue-100 rounded-lg"><p className="text-sm text-blue-800">Student</p><p className="font-semibold">{viewingResult.studentName}</p></div>
                        <div className="p-2 bg-blue-100 rounded-lg"><p className="text-sm text-blue-800">Score</p><p className="font-semibold">{viewingResult.score}/{viewingResult.total_marks}</p></div>
                        <div className="p-2 bg-blue-100 rounded-lg"><p className="text-sm text-blue-800">Percentage</p><p className="font-semibold">{viewingResult.percentage.toFixed(1)}%</p></div>
                        <div className={`p-2 rounded-lg ${viewingResult.status === 'passed' ? 'bg-green-100' : 'bg-red-100'}`}><p className={`text-sm ${viewingResult.status === 'passed' ? 'text-green-800' : 'text-red-800'}`}>Status</p><p className="font-semibold capitalize">{viewingResult.status}</p></div>
                    </div>
                </div>

                <div>
                    <h4 className="text-lg font-semibold mb-2">Student Responses</h4>
                    {loading ? ( <p>Loading responses...</p> ) : error ? (<p className='text-red-500'>{error}</p>) : (
                    <div className="space-y-4 max-h-[50vh] overflow-y-auto pr-2">
                        {examQuestions.length > 0 ? examQuestions.map((examQuestion, index) => {
                            const questionId = resolveRelationshipId(examQuestion.question_id);
                            const question = questions.find(q => q.$id === questionId);
                            const response = responses.find(r => resolveRelationshipId(r.question_id) === questionId);
                            
                            if (!question) return <div key={index} className="p-4 border rounded-lg">Loading question data...</div>;

                            const selectedOption = response ? response.selected_option : null;
                            const correctOption = question.correct_answer;

                            return (
                                <div key={question.$id} className="border p-4 rounded-lg bg-white">
                                <p className="font-bold">{index + 1}. {question.text}</p>
                                <div className="mt-2 space-y-2">
                                    {question.options_text?.map((optionText, optIndex) => {
                                        const isSelected = selectedOption === optIndex;
                                        const isCorrect = correctOption === optIndex;
                                        let optionClasses = "p-2 border rounded-md text-sm";
                                        if (isCorrect) {
                                            optionClasses += " bg-green-100 border-green-300 font-semibold";
                                        } else if (isSelected && !isCorrect) {
                                            optionClasses += " bg-red-100 border-red-300";
                                        } else {
                                            optionClasses += " bg-gray-50 border-gray-200";
                                        }
                                        return (
                                            <div key={optIndex} className={optionClasses}>
                                            {optionText}
                                            {isSelected && <span className="text-xs font-bold ml-2"> (Your Answer)</span>}
                                            {isCorrect && !isSelected && <span className="text-xs font-bold text-green-700 ml-2"> (Correct Answer)</span>}
                                            </div>
                                        );
                                    })}
                                </div>
                                {selectedOption === null && <p className="text-sm text-gray-500 mt-2">Not Answered</p>}
                                </div>
                            );
                        }) : <p className="text-center text-gray-500 py-4">No questions were found for this exam.</p>}
                    </div>
                    )}
                </div>
                <div className="mt-6 flex justify-end">
                    <button onClick={closeViewModal} className="bg-gray-200 text-gray-800 px-4 py-2 rounded-md hover:bg-gray-300">Close</button>
                </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ResultsAnalysisPage;-e [1;34m===== ./pages/admin/manage-notifications.jsx =====[0m
"use client";

import { useState } from "react";
import { Bell, Info, AlertCircle, CheckCircle, XCircle, Plus, Edit } from "lucide-react";
import { motion } from "framer-motion";
import { useRouter } from "next/router"; // Import useRouter from next/router

const initialNotifications = [
  { id: 1, type: "info", title: "New Exam Schedule", message: "Mathematics final exam has been scheduled for next week.", time: "2 hours ago" },
  { id: 2, type: "warning", title: "System Maintenance", message: "The system will be under maintenance on Sunday, 2 AM - 4 AM.", time: "1 day ago" },
  { id: 3, type: "success", title: "Results Published", message: "Physics mid-term exam results have been published.", time: "2 days ago" },
  { id: 4, type: "error", title: "Payment Failed", message: "Your exam registration payment was unsuccessful.", time: "3 days ago" },
];

const ManageNotifications = () => {
  const [notifications, setNotifications] = useState(initialNotifications);
  const [isEditing, setIsEditing] = useState(false);
  const [currentNotification, setCurrentNotification] = useState(null);

  const router = useRouter(); // Initialize router

  const icons = {
    info: <Info className="text-blue-500" size={20} />,
    warning: <AlertCircle className="text-amber-500" size={20} />,
    success: <CheckCircle className="text-emerald-500" size={20} />,
    error: <XCircle className="text-red-500" size={20} />,
  };

  const badgeColors = {
    info: "bg-blue-100 text-blue-600",
    warning: "bg-amber-100 text-amber-600",
    success: "bg-emerald-100 text-emerald-600",
    error: "bg-red-100 text-red-600",
  };

  const markAllAsRead = () => setNotifications([]);

  const removeNotification = (id) => setNotifications((prev) => prev.filter((n) => n.id !== id));

  const addNotification = () => {
    setIsEditing(true);
    setCurrentNotification({ id: notifications.length + 1, type: "info", title: "", message: "", time: "Just now" });
  };

  const editNotification = (notification) => {
    setIsEditing(true);
    setCurrentNotification(notification);
  };

  const saveNotification = () => {
    setNotifications((prev) =>
      currentNotification.id > prev.length
        ? [currentNotification, ...prev]
        : prev.map((n) => (n.id === currentNotification.id ? currentNotification : n))
    );
    setIsEditing(false);
    setCurrentNotification(null);
  };

  return (
    <div className="p-6">
      <motion.div
        className="flex justify-between items-center mb-6"
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.3 }}
      >
        <h1 className="text-2xl font-bold text-gray-800">Manage Notifications</h1>
        <div className="flex gap-4">
          <motion.button
            className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center gap-2"
            onClick={addNotification}
            whileHover={{ scale: 1.05 }}
          >
            <Plus size={20} />
            Add Notification
          </motion.button>
          <motion.button
            className="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 flex items-center gap-2"
            onClick={markAllAsRead}
            whileHover={{ scale: 1.05 }}
          >
            <Bell size={20} />
            Mark All as Read
          </motion.button>
        </div>
      </motion.div>

      {/* Notification List */}
      <div className="space-y-4">
        {notifications.map((notification) => (
          <motion.div
            key={notification.id}
            className="p-4 bg-white rounded-lg shadow-sm flex items-start gap-4"
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3 }}
          >
            <div className={`p-2 rounded-full ${badgeColors[notification.type]}`}>
              {icons[notification.type]}
            </div>
            <div className="flex-1">
              <h3 className="font-semibold text-gray-800">{notification.title}</h3>
              <p className="text-sm text-gray-600">{notification.message}</p>
              <p className="text-xs text-gray-400 mt-1">{notification.time}</p>
            </div>
            <button
              className="text-gray-500 hover:text-gray-700"
              onClick={() => editNotification(notification)}
            >
              <Edit size={16} />
            </button>
            <button
              className="text-gray-500 hover:text-red-500"
              onClick={() => removeNotification(notification.id)}
            >
              <XCircle size={16} />
            </button>
          </motion.div>
        ))}
      </div>

      {/* Edit Modal */}
      {isEditing && (
        <motion.div className="fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center p-4">
          <motion.div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-lg">
            <h2 className="text-xl font-bold mb-4">Edit Notification</h2>
            <div className="space-y-4">
              <input
                type="text"
                name="title"
                placeholder="Title"
                className="w-full p-2 border border-gray-300 rounded-md"
                value={currentNotification?.title}
                onChange={(e) => setCurrentNotification({ ...currentNotification, title: e.target.value })}
              />
              <textarea
                name="message"
                placeholder="Message"
                className="w-full p-2 border border-gray-300 rounded-md"
                value={currentNotification?.message}
                onChange={(e) => setCurrentNotification({ ...currentNotification, message: e.target.value })}
              />
              {/* Dropdown for notification type */}
              <div>
                <label className="block text-sm font-medium text-gray-700">Notification Type</label>
                <select
                  className="w-full p-2 border border-gray-300 rounded-md"
                  value={currentNotification?.type}
                  onChange={(e) => setCurrentNotification({ ...currentNotification, type: e.target.value })}
                >
                  <option value="info">Info</option>
                  <option value="warning">Warning</option>
                  <option value="success">Success</option>
                  <option value="error">Error</option>
                </select>
              </div>
              <div className="flex justify-end gap-3">
                <button
                  onClick={() => setIsEditing(false)}
                  className="bg-gray-500 text-white px-4 py-2 rounded-md"
                >
                  Cancel
                </button>
                <button
                  onClick={saveNotification}
                  className="bg-blue-600 text-white px-4 py-2 rounded-md"
                >
                  Save
                </button>
              </div>
            </div>
          </motion.div>
        </motion.div>
      )}
    </div>
  );
};

export default ManageNotifications;
-e [1;34m===== ./pages/admin/monitoring.jsx =====[0m
import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { databases, Query } from '../../utils/appwrite';
import { Client } from 'appwrite'; // FIX: Import Client directly from the appwrite package
import { formatDateTimeUTC } from '../../utils/date';
import { Wifi, WifiOff, PlayCircle, LogOut, UserCheck, RefreshCw } from 'lucide-react';

const DATABASE_ID = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID || '67a5a946002e8a51f8fe';
const STUDENTS_COLLECTION_ID = process.env.NEXT_PUBLIC_APPWRITE_STUDENTS_COLLECTION_ID || 'students';
const SESSIONS_COLLECTION_ID = process.env.NEXT_PUBLIC_APPWRITE_STUDENT_SESSIONS_COLLECTION_ID || 'student_sessions';
const ATTEMPTS_COLLECTION_ID = process.env.NEXT_PUBLIC_APPWRITE_EXAM_ATTEMPTS_COLLECTION_ID || 'exam_attempts';
const EXAMS_COLLECTION_ID = process.env.NEXT_PUBLIC_APPWRITE_EXAMS_COLLECTION_ID || 'exams';

// New function to format dates in the user's local timezone.
const formatDateTimeLocal = (dateString) => {
    if (!dateString) return "N/A";
    try {
        const date = new Date(dateString);
        // toLocaleString() automatically uses the user's browser timezone.
        return date.toLocaleString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });
    } catch (err) {
        console.error("Error formatting local date:", err);
        return "Invalid Date";
    }
};


const RealtimeMonitoringPage = () => {
    const [students, setStudents] = useState([]);
    const [sessions, setSessions] = useState(new Map());
    const [attempts, setAttempts] = useState(new Map());
    const [exams, setExams] = useState(new Map());
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    const resolveRelationshipId = (field) => {
        if (!field) return null;
        if (Array.isArray(field) && field.length > 0) return field[0]?.$id || field[0];
        if (typeof field === 'object' && field.$id) return field.$id;
        return field;
    };

    const fetchData = useCallback(async () => {
        setError(null);
        try {
            const [studentsRes, sessionsRes, attemptsRes, examsRes] = await Promise.all([
                databases.listDocuments(DATABASE_ID, STUDENTS_COLLECTION_ID, [Query.limit(5000)]),
                databases.listDocuments(DATABASE_ID, SESSIONS_COLLECTION_ID, [Query.limit(5000)]),
                databases.listDocuments(DATABASE_ID, ATTEMPTS_COLLECTION_ID, [Query.limit(5000)]),
                databases.listDocuments(DATABASE_ID, EXAMS_COLLECTION_ID, [Query.limit(5000)])
            ]);
            
            setStudents(studentsRes.documents);
            setExams(new Map(examsRes.documents.map(e => [e.$id, e])));
            
            const sessionsMap = new Map();
            sessionsRes.documents.forEach(s => {
                if(s.is_active) {
                    const studentId = resolveRelationshipId(s.students_id);
                    if(studentId) sessionsMap.set(studentId, s);
                }
            });
            setSessions(sessionsMap);

            const attemptsMap = new Map();
            attemptsRes.documents.forEach(a => {
                if(a.status === 'started' || a.status === 'in_progress') {
                    const studentId = resolveRelationshipId(a.students_id);
                    if(studentId) attemptsMap.set(studentId, a);
                }
            });
            setAttempts(attemptsMap);

        } catch (err) {
            console.error("Failed to fetch initial data:", err);
            setError("Could not load monitoring data. Please check collection permissions and environment variables.");
        } finally {
            setLoading(false);
        }
    }, []);

    useEffect(() => {
        fetchData();

        const client = new Client()
            .setEndpoint(process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT)
            .setProject(process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID);

        const subscriptions = [];
        
        const collectionsToSubscribe = [
            SESSIONS_COLLECTION_ID,
            ATTEMPTS_COLLECTION_ID,
        ];

        collectionsToSubscribe.forEach(collectionId => {
            if (collectionId) { // Ensure collectionId is defined before subscribing
                const unsubscribe = client.subscribe(`databases.${DATABASE_ID}.collections.${collectionId}.documents`, response => {
                    fetchData();
                });
                subscriptions.push(unsubscribe);
            }
        });

        return () => {
            subscriptions.forEach(unsubscribe => unsubscribe());
        };
    }, [fetchData]);

    const memoizedStudents = useMemo(() => {
        return students.map(student => {
            const session = sessions.get(student.$id);
            const attempt = attempts.get(student.$id);
            const exam = attempt ? exams.get(resolveRelationshipId(attempt.exams_id)) : null;
            return {
                ...student,
                session,
                attempt,
                exam,
            };
        }).sort((a, b) => {
            const aOnline = !!a.session;
            const bOnline = !!b.session;
            if (aOnline !== bOnline) return aOnline ? -1 : 1;
            return a.name.localeCompare(b.name);
        });
    }, [students, sessions, attempts, exams]);


    return (
        <div className="w-full">
            <div className="bg-white rounded-lg shadow-md p-6">
                <div className="flex justify-between items-center mb-6">
                    <h2 className="text-3xl font-extrabold text-gray-800">Real-time Student Monitoring</h2>
                    <button onClick={() => { setLoading(true); fetchData(); }} disabled={loading} className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors flex items-center gap-2 disabled:bg-gray-400">
                        <RefreshCw size={18} className={loading ? 'animate-spin' : ''} />
                        Refresh
                    </button>
                </div>

                {error && <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6" role="alert"><p>{error}</p></div>}

                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
                    <div className="bg-blue-50 p-5 rounded-xl border border-blue-200"><div className="flex items-center gap-4"><div className="p-3 bg-blue-200 rounded-full"><UserCheck className="w-6 h-6 text-blue-700" /></div><div><p className="text-3xl font-bold text-blue-800">{students.length}</p><p className="text-sm font-medium text-blue-600">Total Students</p></div></div></div>
                    <div className="bg-green-50 p-5 rounded-xl border border-green-200"><div className="flex items-center gap-4"><div className="p-3 bg-green-200 rounded-full"><Wifi className="w-6 h-6 text-green-700" /></div><div><p className="text-3xl font-bold text-green-800">{sessions.size}</p><p className="text-sm font-medium text-green-600">Students Online</p></div></div></div>
                    <div className="bg-orange-50 p-5 rounded-xl border border-orange-200"><div className="flex items-center gap-4"><div className="p-3 bg-orange-200 rounded-full"><PlayCircle className="w-6 h-6 text-orange-700" /></div><div><p className="text-3xl font-bold text-orange-800">{attempts.size}</p><p className="text-sm font-medium text-orange-600">Students In Exam</p></div></div></div>
                </div>

                <h3 className="text-xl font-bold text-gray-700 mb-4">Live Activity</h3>
                <div className="overflow-x-auto rounded-lg border">
                    <table className="min-w-full divide-y divide-gray-200">
                        <thead className="bg-gray-50">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Student</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Login Status</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Exam Status</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Login Time</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">IP Address</th>
                            </tr>
                        </thead>
                        <tbody className="bg-white divide-y divide-gray-200">
                            {loading && memoizedStudents.length === 0 ? (
                                <tr><td colSpan="5" className="text-center py-10 text-gray-500">Loading student data...</td></tr>
                            ) : memoizedStudents.map(student => (
                                <tr key={student.$id} className={student.session ? 'bg-green-50' : 'bg-white'}>
                                    <td className="px-6 py-4 whitespace-nowrap">
                                        <div className="font-medium text-gray-900">{student.name}</div>
                                        <div className="text-sm text-gray-500">{student.email}</div>
                                    </td>
                                    <td className="px-6 py-4 whitespace-nowrap">
                                        {student.session ? (
                                            <span className="inline-flex items-center gap-2 px-3 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800"><Wifi size={14} /> Online</span>
                                        ) : (
                                            <span className="inline-flex items-center gap-2 px-3 py-1 text-xs font-semibold rounded-full bg-gray-100 text-gray-700"><WifiOff size={14} /> Offline</span>
                                        )}
                                    </td>
                                    <td className="px-6 py-4 whitespace-nowrap">
                                        {student.attempt && student.exam ? (
                                            <span className="inline-flex items-center gap-2 px-3 py-1 text-xs font-semibold rounded-full bg-orange-100 text-orange-800"><PlayCircle size={14} /> In Exam: {student.exam.name}</span>
                                        ) : student.session ? (
                                            <span className="inline-flex items-center gap-2 px-3 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-800"><UserCheck size={14} /> Idle</span>
                                        ) : (
                                            <span className="inline-flex items-center gap-2 px-3 py-1 text-xs font-semibold rounded-full bg-gray-100 text-gray-700"><LogOut size={14} /> Not Logged In</span>
                                        )}
                                    </td>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600">
                                        {student.session ? formatDateTimeLocal(student.session.login_at) : 'N/A'}
                                    </td>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600">
                                        {student.session ? student.session.ip_address : 'N/A'}
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    );
};

export default RealtimeMonitoringPage;
-e [1;34m===== ./pages/admin/settings.jsx =====[0m
import React, { useState, useEffect, useCallback } from "react";
import { account } from "../../utils/appwrite";
import { User, Lock } from "lucide-react";

const SettingsPage = () => {
  const [admin, setAdmin] = useState({ name: "", email: "" });
  const [password, setPassword] = useState({ oldPassword: "", newPassword: "", confirmPassword: "" });
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);

  useEffect(() => {
    fetchAdminDetails();
  }, []);

  useEffect(() => {
    if (error || success) {
      const timer = setTimeout(() => {
        setError(null);
        setSuccess(null);
      }, 5000);
      return () => clearTimeout(timer);
    }
  }, [error, success]);

  const fetchAdminDetails = async () => {
    try {
      const user = await account.get();
      setAdmin({ name: user.name, email: user.email });
    } catch (error) {
      setError("Failed to fetch admin details: " + error.message);
      console.error("Error fetching admin details:", error.message);
    }
  };

  const handleProfileUpdate = async () => {
    setError(null);
    setSuccess(null);
    if (!admin.name.trim()) {
      setError("Name cannot be empty.");
      return;
    }
    try {
      await account.updateName(admin.name.trim());
      setSuccess("Profile updated successfully!");
    } catch (error) {
      setError("Failed to update profile: " + error.message);
      console.error("Error updating profile:", error.message);
    }
  };

  const handlePasswordUpdate = async () => {
    setError(null);
    setSuccess(null);
    if (!password.oldPassword || !password.newPassword || !password.confirmPassword) {
      setError("All password fields are required.");
      return;
    }
    if (password.newPassword !== password.confirmPassword) {
      setError("New password and confirmation do not match.");
      return;
    }
    try {
      await account.updatePassword(password.newPassword, password.oldPassword);
      setSuccess("Password updated successfully!");
      setPassword({ oldPassword: "", newPassword: "", confirmPassword: "" });
    } catch (error) {
      setError("Failed to update password: " + error.message);
      console.error("Error updating password:", error.message);
    }
  };

  return (
    <div className="w-full">
      <div className="max-w-2xl">
        <h2 className="text-2xl sm:text-3xl font-extrabold text-gray-800 mb-6">Settings</h2>

        {/* Error/Success Alerts */}
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-md mb-6" role="alert">
            <strong className="font-bold">Error:</strong>
            <span className="block sm:inline ml-2">{error}</span>
          </div>
        )}
        {success && (
          <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded-md mb-6" role="alert">
            <strong className="font-bold">Success:</strong>
            <span className="block sm:inline ml-2">{success}</span>
          </div>
        )}

        {/* Profile Settings */}
        <div className="bg-white shadow-md rounded-lg p-6 mb-6 border border-gray-200">
          <div className="flex items-center gap-2 mb-4">
            <User size={20} className="text-gray-600" />
            <h3 className="text-lg font-semibold text-gray-800">Profile Settings</h3>
          </div>
          <div className="space-y-4">
            <div>
              <label htmlFor="name" className="block text-sm font-semibold text-gray-700 mb-1">
                Name
              </label>
              <input
                type="text"
                id="name"
                value={admin.name}
                onChange={(e) => setAdmin({ ...admin, name: e.target.value })}
                placeholder="Enter your name"
                className="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-gray-50 text-gray-800"
              />
            </div>
            <div>
              <label htmlFor="email" className="block text-sm font-semibold text-gray-700 mb-1">
                Email
              </label>
              <input
                type="email"
                id="email"
                value={admin.email}
                disabled
                className="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm bg-gray-100 text-gray-500 cursor-not-allowed"
              />
            </div>
            <button
              onClick={handleProfileUpdate}
              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition-colors duration-200 text-base font-semibold shadow-sm"
            >
              Save Profile
            </button>
          </div>
        </div>

        {/* Change Password */}
        <div className="bg-white shadow-md rounded-lg p-6 border border-gray-200">
          <div className="flex items-center gap-2 mb-4">
            <Lock size={20} className="text-gray-600" />
            <h3 className="text-lg font-semibold text-gray-800">Change Password</h3>
          </div>
          <div className="space-y-4">
            <div>
              <label htmlFor="oldPassword" className="block text-sm font-semibold text-gray-700 mb-1">
                Old Password
              </label>
              <input
                type="password"
                id="oldPassword"
                placeholder="Enter old password"
                value={password.oldPassword}
                onChange={(e) => setPassword({ ...password, oldPassword: e.target.value })}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-gray-50 text-gray-800"
              />
            </div>
            <div>
              <label htmlFor="newPassword" className="block text-sm font-semibold text-gray-700 mb-1">
                New Password
              </label>
              <input
                type="password"
                id="newPassword"
                placeholder="Enter new password"
                value={password.newPassword}
                onChange={(e) => setPassword({ ...password, newPassword: e.target.value })}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-gray-50 text-gray-800"
              />
            </div>
            <div>
              <label htmlFor="confirmPassword" className="block text-sm font-semibold text-gray-700 mb-1">
                Confirm New Password
              </label>
              <input
                type="password"
                id="confirmPassword"
                placeholder="Confirm new password"
                value={password.confirmPassword}
                onChange={(e) => setPassword({ ...password, confirmPassword: e.target.value })}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-gray-50 text-gray-800"
              />
            </div>
            <button
              onClick={handlePasswordUpdate}
              className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md transition-colors duration-200 text-base font-semibold shadow-sm"
            >
              Update Password
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SettingsPage;-e [1;34m===== ./pages/admin/responses.jsx =====[0m
import React, { useEffect, useState } from "react";
import AdminLayout from "@/components/AdminLayout";
import { databases } from "@/utils/appwrite";
import { Query } from "appwrite";

const ResponsesPage = () => {
  const [responses, setResponses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const DATABASE_ID = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;
  const RESPONSES_COLLECTION_ID = process.env.NEXT_PUBLIC_APPWRITE_RESPONSES_COLLECTION_ID;

  useEffect(() => {
    fetchResponses();
  }, []);

  const fetchResponses = async () => {
    try {
      setLoading(true);
      const res = await databases.listDocuments(
        DATABASE_ID,
        RESPONSES_COLLECTION_ID,
        [Query.orderDesc("$createdAt")]
      );
      setResponses(res.documents);
    } catch (err) {
      console.error("Failed to fetch responses:", err);
      setError("You are not authorized to access responses or something went wrong.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <AdminLayout>
      <div className="p-6">
        <h1 className="text-2xl font-bold mb-6">üìÑ Student Responses</h1>

        {loading ? (
          <div className="flex justify-center items-center h-32">
            <div className="animate-spin h-8 w-8 border-4 border-blue-500 border-t-transparent rounded-full"></div>
          </div>
        ) : error ? (
          <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6">
            <p>{error}</p>
            <button
              onClick={fetchResponses}
              className="mt-2 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
            >
              Retry
            </button>
          </div>
        ) : responses.length === 0 ? (
          <p className="text-gray-500">No responses found.</p>
        ) : (
          <div className="overflow-x-auto bg-white shadow-md rounded-lg p-4">
            <table className="min-w-full text-sm text-left border border-gray-200">
              <thead className="bg-gray-100">
                <tr>
                  <th className="p-2 border">Response ID</th>
                  <th className="p-2 border">Student ID</th>
                  <th className="p-2 border">Exam ID</th>
                  <th className="p-2 border">Question ID</th>
                  <th className="p-2 border">Selected Option</th>
                  <th className="p-2 border">Created At</th>
                </tr>
              </thead>
              <tbody>
                {responses.map((res) => (
                  <tr key={res.$id} className="hover:bg-gray-50">
                    <td className="p-2 border">{res.response_id}</td>
                    <td className="p-2 border">{res.student_id || "N/A"}</td>
                    <td className="p-2 border">{res.exam_id || "N/A"}</td>
                    <td className="p-2 border">{res.question_id || "N/A"}</td>
                    <td className="p-2 border">{res.selected_option}</td>
                    <td className="p-2 border">{new Date(res.$createdAt).toLocaleString()}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>
    </AdminLayout>
  );
};

export default ResponsesPage;
-e [1;34m===== ./pages/admin/courses.jsx =====[0m
import React, { useState, useEffect, useCallback, useMemo, useRef, Suspense } from "react";
import { Plus, Edit, Trash2, BookOpen, Eye, Search, ChevronLeft, ChevronRight, Download, X } from "lucide-react";
import { databases, ID, account, Query } from "../../utils/appwrite";
import { formatDateTimeUTC, formatDateUTC } from "../../utils/date";
const Modal = React.lazy(() => import("../../components/Modal"));

const COURSES_PER_PAGE = 20;

const AdminCoursesPage = () => {
  const [courses, setCourses] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingCourse, setEditingCourse] = useState(null);
  const [currentUser, setCurrentUser] = useState(null);
  const [userNames, setUserNames] = useState({});
  const [isViewModalOpen, setIsViewModalOpen] = useState(false);
  const [viewingCourse, setViewingCourse] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [filterStatus, setFilterStatus] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [isExportMenuOpen, setIsExportMenuOpen] = useState(false);

  const exportButtonRef = useRef(null);

  const DATABASE_ID = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;
  const COURSES_COLLECTION_ID = process.env.NEXT_PUBLIC_APPWRITE_COURSE_COLLECTION_ID;
  const PROFILES_COLLECTION_ID = process.env.NEXT_PUBLIC_APPWRITE_PROFILES_COLLECTION_ID;

  const initialFormData = {
    course_name: "",
    course_description: "",
    credit: "",
    status: "active",
  };
  const [formData, setFormData] = useState(initialFormData);

  const courseModalPosition = {
    top: '10vh',
    bottom: '10vh',
    left: '25vw',
    right: '15vw'
  };

  const fetchCurrentUser = useCallback(async () => {
    try {
      const user = await account.get();
      setCurrentUser(user);
    } catch (err) {
      console.error("Failed to fetch current user:", err);
      setError("Could not fetch user details. Some operations might be affected.");
    }
  }, []);

  const fetchCourses = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    try {
      const response = await databases.listDocuments(
        DATABASE_ID,
        COURSES_COLLECTION_ID,
        [Query.orderDesc("$createdAt")]
      );
      let coursesData = response.documents;

      const activeCourses = coursesData.filter(course => course.status !== 'inactive');
      const inactiveCourses = coursesData.filter(course => course.status === 'inactive');
      const sortedCoursesData = [...activeCourses, ...inactiveCourses];
      
      setCourses(sortedCoursesData);

      const creatorIds = [...new Set(coursesData.map(course => course.created_by).filter(Boolean))];
      const newNamesToFetch = {};
      for (const id of creatorIds) {
        if (!userNames[id] && id) {
          if (PROFILES_COLLECTION_ID && PROFILES_COLLECTION_ID !== 'YOUR_PROFILES_COLLECTION_ID') {
            try {
              const profileResponse = await databases.listDocuments(
                DATABASE_ID, PROFILES_COLLECTION_ID, [Query.equal('userId', id), Query.limit(1)]
              );
              if (profileResponse.documents.length > 0) newNamesToFetch[id] = profileResponse.documents[0].name;
              else newNamesToFetch[id] = id === currentUser?.$id ? currentUser.name : id;
            } catch (profileError) {
              console.warn(`Could not fetch profile for user ${id}:`, profileError);
              newNamesToFetch[id] = id === currentUser?.$id ? currentUser.name : id;
            }
          } else {
            newNamesToFetch[id] = id === currentUser?.$id ? currentUser.name : id;
          }
        }
      }
      if (Object.keys(newNamesToFetch).length > 0) {
        setUserNames(prevNames => ({ ...prevNames, ...newNamesToFetch }));
      }
    } catch (err) {
      console.error("Error fetching courses:", err);
      setError("Failed to load courses. Please try again.");
    } finally {
      setIsLoading(false);
    }
  }, [DATABASE_ID, COURSES_COLLECTION_ID, userNames, currentUser, PROFILES_COLLECTION_ID]);

  useEffect(() => {
    fetchCurrentUser();
  }, [fetchCurrentUser]);

  useEffect(() => {
    if (PROFILES_COLLECTION_ID || currentUser) {
      fetchCourses();
    }
  }, [PROFILES_COLLECTION_ID, currentUser, fetchCourses]);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (exportButtonRef.current && !exportButtonRef.current.contains(event.target)) {
        setIsExportMenuOpen(false);
      }
    };

    if (isExportMenuOpen) {
      document.addEventListener("mousedown", handleClickOutside);
    }
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [isExportMenuOpen]);

  const handleInputChange = (e) => {
    const { name, value, type } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: type === "number" ? (value === "" ? "" : parseInt(value, 10)) : value,
    }));
    if (error) setError(null);
  };

  const validateForm = () => {
    const { course_name, course_description, credit, status } = formData;
    if (!course_name.trim()) { setError("Course Name is required."); return false; }
    if (course_name.trim().length < 3) { setError("Course Name must be at least 3 characters long."); return false; }
    if (course_name.length > 255) { setError("Course Name cannot exceed 255 characters."); return false; }
    if (course_description && course_description.length > 1000) { setError("Course Description cannot exceed 1000 characters."); return false; }
    if (credit !== "") {
      const creditValue = parseInt(credit, 10);
      if (isNaN(creditValue)) { setError("Credit must be a valid number."); return false; }
      if (creditValue < 0) { setError("Credit must be a non-negative number."); return false; }
      if (creditValue > 20) { setError("Credit value seems too high (max 20 recommended)."); return false; }
    }
    if (!status) { setError("Status is required."); return false;}
    setError(null);
    return true;
  };

  const openModal = (course = null) => {
    setError(null);
    if (course) {
      setEditingCourse(course);
      setFormData({
        course_name: course.course_name || "",
        course_description: course.course_description || "",
        credit: course.credit === null || course.credit === undefined ? "" : course.credit,
        status: course.status || "active",
      });
    } else {
      setEditingCourse(null);
      setFormData(initialFormData);
    }
    setIsModalOpen(true);
  };

  const closeModal = () => {
    setIsModalOpen(false);
    setEditingCourse(null);
    setFormData(initialFormData);
    setError(null);
  };

  const openViewModal = (course) => {
    setViewingCourse(course);
    setIsViewModalOpen(true);
  };

  const closeViewModal = () => {
    setIsViewModalOpen(false);
    setViewingCourse(null);
  };

  const handleSaveCourse = async (currentFormData) => {
    setError(null);
    if (!validateForm()) return;

    setIsLoading(true);
    const dataToSave = {
      course_name: currentFormData.course_name.trim(),
      course_description: currentFormData.course_description ? currentFormData.course_description.trim() : null,
      credit: currentFormData.credit === "" || currentFormData.credit === null || currentFormData.credit === undefined ? null : parseInt(currentFormData.credit, 10),
      status: currentFormData.status,
    };

    try {
      if (editingCourse) {
        await databases.updateDocument(DATABASE_ID, COURSES_COLLECTION_ID, editingCourse.$id, dataToSave);
      } else {
        if (!currentUser || !currentUser.$id) {
          console.error("Current user or user ID is not available.", currentUser);
          setError("User information is not available. Cannot set 'created_by'. Please try refreshing the page or logging in again.");
          setIsLoading(false); return;
        }
        dataToSave.created_by = currentUser.$id;
        await databases.createDocument(DATABASE_ID, COURSES_COLLECTION_ID, ID.unique(), dataToSave);
      }
      await fetchCourses();
      closeModal();
    } catch (err) {
      console.error("Error saving course:", err);
      if (err.code && err.message) setError(`Appwrite Error (${err.code}): ${err.message}. Please check console for details.`);
      else setError(`Failed to save course: ${err.message}`);
    } finally {
      setIsLoading(false);
    }
  };

  const handleDeleteCourse = async (courseId) => {
    if (!window.confirm("Are you sure you want to delete this course? This action cannot be undone.")) return;
    setIsLoading(true);
    setError(null);
    try {
      await databases.deleteDocument(DATABASE_ID, COURSES_COLLECTION_ID, courseId);
      await fetchCourses();
    } catch (err) {
      console.error("Error deleting course:", err);
      setError("Failed to delete course. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  const handleExport = async (format) => {
    setIsExportMenuOpen(false);
    if (filteredCourses.length === 0) {
      setError("No courses available to export.");
      return;
    }
    try {
      const exportData = filteredCourses.map((course) => ({
        "Course Name": course.course_name,
        Description: course.course_description || "N/A",
        Credits: course.credit === null || course.credit === undefined ? "N/A" : course.credit,
        Status: course.status || "active",
        "Created By": userNames[course.created_by] || course.created_by || "N/A",
        "Created At": formatDateTimeUTC(course.$createdAt),
        "Last Updated": formatDateTimeUTC(course.$updatedAt),
      }));
      if (format === "csv") {
        const { Parser } = await import("json2csv");
        const fields = ["Course Name", "Description", "Credits", "Status", "Created By", "Created At", "Last Updated"];
        const parser = new Parser({ fields });
        const csv = parser.parse(exportData);
        const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
        const url = URL.createObjectURL(blob);
        const link = document.createElement("a");
        link.setAttribute("href", url);
        link.setAttribute("download", `courses_${new Date().toISOString().slice(0, 10)}.csv`);
        link.click();
        URL.revokeObjectURL(url);
      } else if (format === "xls") {
        const { utils, writeFile } = await import("xlsx");
        const ws = utils.json_to_sheet(exportData);
        const wb = utils.book_new();
        utils.book_append_sheet(wb, ws, "Courses");
        writeFile(wb, `courses_${new Date().toISOString().slice(0, 10)}.xlsx`);
      }
    } catch (error) {
      console.error(`Error exporting to ${format.toUpperCase()}:`, error);
      setError(`Failed to export to ${format.toUpperCase()}: ${error.message}`);
    }
  };

  const courseModalFields = [
    { name: "course_name", label: "Course Name*", type: "text", required: true, placeholder: "e.g., Introduction to Programming", maxLength: 255 },
    { name: "course_description", label: "Description", type: "textarea", placeholder: "Enter a brief description of the course (max 1000 chars)", rows: 4, maxLength: 1000 },
    { name: "credit", label: "Credits", type: "number", placeholder: "e.g., 3 (0-20)", min: 0, max: 20 },
    { name: "status", label: "Status*", type: "select", options: ["active", "inactive"], required: true },
  ];

  const filteredCourses = useMemo(() => {
    return courses.filter(course =>
      (filterStatus === "" || course.status === filterStatus) &&
      course.course_name.toLowerCase().includes(searchTerm.toLowerCase())
    );
  }, [courses, searchTerm, filterStatus]);

  const totalPages = Math.ceil(filteredCourses.length / COURSES_PER_PAGE);
  const indexOfLastCourse = currentPage * COURSES_PER_PAGE;
  const indexOfFirstCourse = indexOfLastCourse - COURSES_PER_PAGE;
  
  const displayedCourses = useMemo(() => {
    return filteredCourses.slice(indexOfFirstCourse, indexOfLastCourse);
  }, [filteredCourses, indexOfFirstCourse, indexOfLastCourse]);

  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
    setCurrentPage(1);
  };

  const paginate = (pageNumber) => setCurrentPage(pageNumber);

  const truncateText = (text, maxLength) => {
    if (!text) return "";
    if (text.length <= maxLength) return text;
    return text.substring(0, maxLength) + "...";
  };

  return (
    <div className="w-full">
      <div className="bg-white rounded-lg shadow-md p-4 sm:p-6">
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-3">
          <h2 className="text-2xl sm:text-3xl font-extrabold text-gray-800">Manage Courses</h2>
          <div className="flex flex-wrap gap-2">
            <button
              onClick={() => {
                if (!currentUser) { setError("User data is still loading. Please wait a moment before adding a course."); return; }
                openModal();
              }}
              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition-colors duration-200 flex items-center gap-2 text-base font-semibold shadow-sm"
              disabled={!currentUser || isLoading}
            >
              <Plus size={18} /> Add Course
            </button>
            <div className="relative" ref={exportButtonRef}>
              <button
                className="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-md transition-colors duration-200 flex items-center gap-2 text-base font-semibold shadow-sm"
                onClick={() => setIsExportMenuOpen(!isExportMenuOpen)}
              >
                <Download size={18} />
                <span>Export</span>
              </button>
              {isExportMenuOpen && (
                <div className="absolute right-0 mt-2 w-32 bg-white rounded-md shadow-lg z-10 border border-gray-200">
                  <button
                    className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                    onClick={() => handleExport("csv")}
                  >
                    Export to CSV
                  </button>
                  <button
                    className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                    onClick={() => handleExport("xls")}
                  >
                    Export to XLS
                  </button>
                </div>
              )}
            </div>
          </div>
        </div>

        {error && !isModalOpen && !isViewModalOpen && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-6" role="alert">
            <strong className="font-bold">Error:</strong>
            <span className="block sm:inline ml-2">{error}</span>
          </div>
        )}

        <div className="mb-4 flex flex-col sm:flex-row items-start sm:items-center gap-3">
          <label htmlFor="status_filter" className="text-sm font-semibold text-gray-700 whitespace-nowrap">Filter by Status:</label>
          <select
            id="status_filter"
            value={filterStatus}
            onChange={(e) => setFilterStatus(e.target.value)}
            className="mt-1 block w-full sm:w-auto px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-gray-800 bg-gray-50"
          >
            <option value="">All Statuses</option>
            <option value="active">Active</option>
            <option value="inactive">Inactive</option>
          </select>
          {filterStatus && (
            <button
              onClick={() => setFilterStatus("")}
              className="bg-gray-200 text-gray-700 px-3 py-1.5 rounded-md hover:bg-gray-300 transition-colors duration-200 flex items-center gap-1 text-sm shadow-sm"
            >
              <X size={16} />
              Clear Filter
            </button>
          )}
          <div className="relative flex-grow sm:ml-4 w-full sm:w-auto">
            <label htmlFor="main_search" className="sr-only">Search Courses</label>
            <input
              type="text"
              id="main_search"
              placeholder="Search by course name..."
              value={searchTerm}
              onChange={handleSearchChange}
              className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-gray-800 bg-gray-50 pl-10"
            />
            <Search size={20} className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 mt-0.5" />
          </div>
        </div>

        {isLoading && !displayedCourses.length && !error ? (
          <div className="flex justify-center items-center h-64">
            <p className="text-xl text-gray-600">Loading...</p>
          </div>
        ) : !displayedCourses.length && !error ? (
          <div className="text-center py-10">
            <BookOpen size={48} className="mx-auto text-gray-400 mb-4" />
            <p className="text-gray-500 text-lg">{searchTerm || filterStatus ? "No courses match your search or filter." : "No courses found."}</p>
            {!searchTerm && !filterStatus && <p className="text-gray-400">Get started by adding a new course.</p>}
          </div>
        ) : displayedCourses.length > 0 && !error ? (
          <>
            <div className="overflow-x-auto rounded-lg shadow-sm border border-gray-200">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Sr. No.</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Course Name</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Credits</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Created By</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {displayedCourses.map((course, index) => (
                    <tr key={course.$id} className={`hover:bg-gray-50 transition-colors ${course.status === 'inactive' ? 'bg-gray-100 opacity-70' : ''}`}>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{indexOfFirstCourse + index + 1}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900" title={course.course_name}>
                        {truncateText(course.course_name, 18)}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 max-w-xs truncate">{course.course_description || "N/A"}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{course.credit === null || course.credit === undefined ? "N/A" : course.credit}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm">
                        <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${course.status === 'active' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                          {course.status || 'active'}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{userNames[course.created_by] || course.created_by || "N/A"}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <div className="flex items-center gap-1 sm:gap-2">
                          <button
                            onClick={() => openViewModal(course)}
                            className="bg-gray-500 text-white p-1 rounded-md hover:bg-gray-600 transition-colors duration-200"
                            title="View"
                          >
                            <Eye size={16} className="w-4 h-4" />
                          </button>
                          <button
                            onClick={() => openModal(course)}
                            className="bg-yellow-500 text-white p-1 rounded-md hover:bg-yellow-600 transition-colors duration-200"
                            title="Edit"
                          >
                            <Edit size={16} className="w-4 h-4" />
                          </button>
                          <button
                            onClick={() => handleDeleteCourse(course.$id)}
                            className="bg-red-500 text-white p-1 rounded-md hover:bg-red-600 transition-colors duration-200"
                            title="Delete"
                          >
                            <Trash2 size={16} className="w-4 h-4" />
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
            {totalPages > 1 && (
              <div className="mt-6 flex justify-center items-center space-x-2">
                <button
                  onClick={() => paginate(currentPage - 1)}
                  disabled={currentPage === 1}
                  className="p-2 rounded-md bg-gray-200 hover:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <ChevronLeft size={20} />
                </button>
                {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (
                  <button
                    key={page}
                    onClick={() => paginate(page)}
                    className={`px-4 py-2 rounded-md text-sm ${currentPage === page ? 'bg-blue-600 text-white' : 'bg-gray-200 hover:bg-gray-300'}`}
                  >
                    {page}
                  </button>
                ))}
                <button
                  onClick={() => paginate(currentPage + 1)}
                  disabled={currentPage === totalPages}
                  className="p-2 rounded-md bg-gray-200 hover:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <ChevronRight size={20} />
                </button>
              </div>
            )}
          </>
        ) : null }

        {isModalOpen && (
          <Suspense fallback={<div className="flex justify-center items-center h-32">Loading...</div>}>
          <Modal
            title={editingCourse ? "Edit Course" : "Add New Course"}
            onClose={closeModal}
            onSave={() => handleSaveCourse(formData)}
            initialData={formData}
            fields={courseModalFields}
            isLoading={isLoading}
            error={error}
            onChange={handleInputChange}
            customPosition={courseModalPosition}
          />
          </Suspense>
        )}

        {isViewModalOpen && viewingCourse && (
          <div className="fixed inset-0 z-50 bg-gray-900 bg-opacity-75 transition-opacity flex items-center justify-center">
            <div 
              className="bg-white rounded-lg shadow-xl p-6 overflow-y-auto"
              style={{ position: 'fixed', top: courseModalPosition.top, left: courseModalPosition.left, right: courseModalPosition.right, bottom: courseModalPosition.bottom }}
            >
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-xl font-semibold text-gray-800">Course Details</h3>
                <button onClick={closeViewModal} className="text-gray-500 hover:text-gray-700" aria-label="Close modal"><XCircle size={24} /></button>
              </div>
              <div className="space-y-4">
                <div><label className="block text-sm font-medium text-gray-700">Course Name:</label><p className="mt-1 text-gray-900 bg-gray-50 p-2 rounded">{viewingCourse.course_name}</p></div>
                <div><label className="block text-sm font-medium text-gray-700">Description:</label><p className="mt-1 text-gray-900 bg-gray-50 p-2 rounded whitespace-pre-wrap">{viewingCourse.course_description || "N/A"}</p></div>
                <div><label className="block text-sm font-medium text-gray-700">Credits:</label><p className="mt-1 text-gray-900 bg-gray-50 p-2 rounded">{viewingCourse.credit === null || viewingCourse.credit === undefined ? "N/A" : viewingCourse.credit}</p></div>
                <div><label className="block text-sm font-medium text-gray-700">Status:</label><p className="mt-1 text-gray-900 bg-gray-50 p-2 rounded capitalize">{viewingCourse.status || "active"}</p></div>
                <div><label className="block text-sm font-medium text-gray-700">Created By:</label><p className="mt-1 text-gray-900 bg-gray-50 p-2 rounded">{userNames[viewingCourse.created_by] || viewingCourse.created_by || "N/A"}</p></div>
                <div><label className="block text-sm font-medium text-gray-700">Created At:</label><p className="mt-1 text-gray-900 bg-gray-50 p-2 rounded">{formatDateTimeUTC(viewingCourse.$createdAt)}</p></div>
                <div><label className="block text-sm font-medium text-gray-700">Last Updated:</label><p className="mt-1 text-gray-900 bg-gray-50 p-2 rounded">{formatDateTimeUTC(viewingCourse.$updatedAt)}</p></div>
              </div>
              <div className="mt-6 flex justify-end">
                <button onClick={closeViewModal} className="bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2 rounded-lg transition-colors">Close</button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

const XCircle = ({ size = 24, className = "" }) => (
  <svg xmlns="http://www.w3.org/2000/svg" width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
    <circle cx="12" cy="12" r="10"></circle><line x1="15" y1="9" x2="9" y2="15"></line><line x1="9" y1="9" x2="15" y2="15"></line>
  </svg>
);

export default AdminCoursesPage;-e [1;34m===== ./pages/admin/questions.jsx =====[0m
import React, { useState, useEffect, useRef, useCallback, useMemo, Suspense } from "react";
import { databases, storage, ID, account, Query } from "../../utils/appwrite";
import { Plus, Eye, Edit, Trash2, Search, X, Download } from "lucide-react";
import { Modal } from "../../components/Modal";

const BUCKET_ID = "questions";

const QuestionsPage = () => {
  const [questions, setQuestions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [editingQuestion, setEditingQuestion] = useState(null);
  const [modalOpen, setModalOpen] = useState(false);
  const [viewModalOpen, setViewModalOpen] = useState(false);
  const [viewingQuestion, setViewingQuestion] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [filterDifficulty, setFilterDifficulty] = useState("");
  const [isExportMenuOpen, setIsExportMenuOpen] = useState(false);
  const modalRef = useRef(null);
  const viewModalRef = useRef(null);
  const exportButtonRef = useRef(null);

  const initialFormData = {
    question_id: "",
    text: "",
    image_id: "",
    options_text: ["", "", "", ""],
    options_image: ["", "", "", ""],
    correct_answer: 0,
    difficulty: "",
    tags: "",
    created_by: "",
  };

  const [formData, setFormData] = useState(initialFormData);

  const fetchQuestions = useCallback(async () => {
    setLoading(true);
    setError("");
    try {
      const response = await databases.listDocuments(
        process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
        process.env.NEXT_PUBLIC_APPWRITE_QUESTIONS_COLLECTION_ID
      );

      const updatedQuestions = await Promise.all(
        response.documents.map(async (q) => ({
          ...q,
          imageUrl: q.image_id ? await getFileUrl(q.image_id) : null,
          optionsImageUrls: await Promise.all(
            q.options_image.map(async (imgId) => 
              imgId ? await getFileUrl(imgId) : null
            )
          )
        }))
      );

      setQuestions(updatedQuestions);
    } catch (error) {
      console.error("Error fetching questions:", error.message);
      setError("Failed to load questions: " + error.message);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchQuestions();
  }, [fetchQuestions]);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (modalRef.current && !modalRef.current.contains(event.target)) {
        closeModal();
      }
      if (viewModalRef.current && !viewModalRef.current.contains(event.target)) {
        closeViewModal();
      }
      if (exportButtonRef.current && !exportButtonRef.current.contains(event.target)) {
        setIsExportMenuOpen(false);
      }
    };

    if (modalOpen || viewModalOpen || isExportMenuOpen) {
      document.addEventListener("mousedown", handleClickOutside);
    }
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [modalOpen, viewModalOpen, isExportMenuOpen]);

  const getFileUrl = async (fileId) => {
    try {
      return storage.getFileView(BUCKET_ID, fileId);
    } catch (error) {
      console.error("Error fetching image:", error.message);
      return null;
    }
  };

  const handleInputChange = (e, field, index = null) => {
    if (index !== null) {
      setFormData((prev) => ({
        ...prev,
        options_text: prev.options_text.map((opt, i) =>
          i === index ? e.target.value : opt
        )
      }));
    } else {
      setFormData({ ...prev, [field]: e.target.value });
    }
    if (error) setError("");
  };

  const handleImageUpload = async (file, field, index = null) => {
    if (!file) return;
    try {
      const uploadResponse = await storage.createFile(BUCKET_ID, ID.unique(), file);
      const fileId = uploadResponse.$id;

      setFormData(prev => ({
        ...prev,
        ...(field === "image_id" 
          ? { image_id: fileId }
          : {
              options_image: prev.options_image.map((img, i) => 
                i === index ? fileId : img
              )
            }
        )
      }));
    } catch (error) {
      console.error("Image upload error:", error.message);
      setError("Failed to upload image: " + error.message);
    }
  };

  const validateForm = () => {
    if (!formData.question_id || !formData.created_by) {
      setError("Please provide Question ID and Created By field.");
      return false;
    }
    if (!formData.text && !formData.image_id) {
      setError("Please provide either a question text or an image.");
      return false;
    }
    return true;
  };

  const handleSave = async () => {
    if (!validateForm()) return;

    try {
      const questionData = {
        question_id: formData.question_id,
        text: formData.text,
        image_id: formData.image_id,
        options_text: formData.options_text,
        options_image: formData.options_image,
        correct_answer: formData.correct_answer,
        difficulty: formData.difficulty,
        tags: formData.tags ? formData.tags.split(",").map(tag => tag.trim()) : [],
        created_by: formData.created_by,
      };

      if (editingQuestion) {
        await databases.updateDocument(
          process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
          process.env.NEXT_PUBLIC_APPWRITE_QUESTIONS_COLLECTION_ID,
          editingQuestion.$id,
          questionData
        );
      } else {
        await databases.createDocument(
          process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
          process.env.NEXT_PUBLIC_APPWRITE_QUESTIONS_COLLECTION_ID,
          ID.unique(),
          questionData
        );
      }

      closeModal();
      fetchQuestions();
    } catch (error) {
      console.error("Error saving question:", error.message);
      setError("Error saving question: " + error.message);
    }
  };

  const handleDelete = async (id) => {
    if (!window.confirm("Are you sure you want to delete this question?")) return;

    try {
      await databases.deleteDocument(
        process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
        process.env.NEXT_PUBLIC_APPWRITE_QUESTIONS_COLLECTION_ID,
        id
      );
      fetchQuestions();
    } catch (error) {
      console.error("Error deleting question:", error.message);
      setError("Failed to delete question: " + error.message);
    }
  };

  const handleExport = async (format) => {
    setIsExportMenuOpen(false);
    if (filteredQuestions.length === 0) {
      setError("No questions available to export.");
      return;
    }
    try {
      const exportData = filteredQuestions.map((q) => ({
        "Question ID": q.question_id,
        Text: q.text || "N/A",
        "Image ID": q.image_id || "N/A",
        "Option 1 Text": q.options_text[0] || "N/A",
        "Option 2 Text": q.options_text[1] || "N/A",
        "Option 3 Text": q.options_text[2] || "N/A",
        "Option 4 Text": q.options_text[3] || "N/A",
        "Option 1 Image": q.options_image[0] || "N/A",
        "Option 2 Image": q.options_image[1] || "N/A",
        "Option 3 Image": q.options_image[2] || "N/A",
        "Option 4 Image": q.options_image[3] || "N/A",
        "Correct Answer": q.correct_answer,
        Difficulty: q.difficulty || "N/A",
        Tags: q.tags?.join(", ") || "N/A",
        "Created By": q.created_by || "N/A",
      }));
      if (format === "csv") {
        const { Parser } = await import("json2csv");
        const fields = [
          "Question ID", "Text", "Image ID", 
          "Option 1 Text", "Option 2 Text", "Option 3 Text", "Option 4 Text",
          "Option 1 Image", "Option 2 Image", "Option 3 Image", "Option 4 Image",
          "Correct Answer", "Difficulty", "Tags", "Created By"
        ];
        const parser = new Parser({ fields });
        const csv = parser.parse(exportData);
        const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
        const url = URL.createObjectURL(blob);
        const link = document.createElement("a");
        link.setAttribute("href", url);
        link.setAttribute("download", `questions_${new Date().toISOString().slice(0, 10)}.csv`);
        link.click();
        URL.revokeObjectURL(url);
      } else if (format === "xls") {
        const { utils, writeFile } = await import("xlsx");
        const ws = utils.json_to_sheet(exportData);
        const wb = utils.book_new();
        utils.book_append_sheet(wb, ws, "Questions");
        writeFile(wb, `questions_${new Date().toISOString().slice(0, 10)}.xlsx`);
      }
    } catch (error) {
      console.error(`Error exporting to ${format.toUpperCase()}:`, error);
      setError(`Failed to export to ${format.toUpperCase()}: ${error.message}`);
    }
  };

  const handleEdit = (question) => {
    setEditingQuestion(question);
    setFormData({
      question_id: question.question_id,
      text: question.text || "",
      image_id: question.image_id || "",
      options_text: question.options_text || ["", "", "", ""],
      options_image: question.options_image || ["", "", "", ""],
      correct_answer: question.correct_answer || 0,
      difficulty: question.difficulty || "",
      tags: question.tags ? question.tags.join(", ") : "",
      created_by: question.created_by || "",
    });
    setModalOpen(true);
  };

  const handleView = (question) => {
    setViewingQuestion(question);
    setViewModalOpen(true);
  };

  const closeModal = () => {
    setModalOpen(false);
    setEditingQuestion(null);
    setFormData(initialFormData);
    setError("");
  };

  const closeViewModal = () => {
    setViewModalOpen(false);
    setViewingQuestion(null);
  };

  const filteredQuestions = useMemo(() => {
    return questions.filter(
      (q) =>
        (filterDifficulty === "" || q.difficulty.toLowerCase() === filterDifficulty.toLowerCase()) &&
        (q.question_id.toLowerCase().includes(searchTerm.toLowerCase()) ||
         q.text?.toLowerCase().includes(searchTerm.toLowerCase()))
    );
  }, [questions, searchTerm, filterDifficulty]);

  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };

  const ActionButtons = ({ question }) => (
    <div className="flex items-center gap-1 sm:gap-2">
      <button
        className="bg-gray-500 text-white p-1 rounded-md hover:bg-gray-600 transition-colors duration-200"
        onClick={() => handleView(question)}
        title="View"
        aria-label="View question"
      >
        <Eye size={16} className="w-4 h-4" />
      </button>
      <button
        className="bg-yellow-500 text-white p-1 rounded-md hover:bg-yellow-600 transition-colors duration-200"
        onClick={() => handleEdit(question)}
        title="Edit"
        aria-label="Edit question"
      >
        <Edit size={16} className="w-4 h-4" />
      </button>
      <button
        className="bg-red-500 text-white p-1 rounded-md hover:bg-red-600 transition-colors duration-200"
        onClick={() => handleDelete(question.$id)}
        title="Delete"
        aria-label="Delete question"
      >
        <Trash2 size={16} className="w-4 h-4" />
      </button>
    </div>
  );

  return (
    <div className="w-full">
      <div className="bg-white rounded-lg shadow-md p-4 sm:p-6">
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-3">
          <h2 className="text-2xl sm:text-3xl font-extrabold text-gray-800">Exam Enrollments</h2>
          <div className="flex flex-wrap gap-2">
            <button
              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition-colors duration-200 flex items-center gap-2 text-base font-semibold shadow-sm"
              onClick={() => setModalOpen(true)}
            >
              <Plus size={18} />
              <span>Add Question</span>
            </button>
            <div className="relative" ref={exportButtonRef}>
              <button
                className="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-md transition-colors duration-200 flex items-center gap-2 text-base font-semibold shadow-sm"
                onClick={() => setIsExportMenuOpen(!isExportMenuOpen)}
              >
                <Download size={18} />
                <span>Export</span>
              </button>
              {isExportMenuOpen && (
                <div className="absolute right-0 mt-2 w-32 bg-white rounded-md shadow-lg z-10 border border-gray-200">
                  <button
                    className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                    onClick={() => handleExport("csv")}
                  >
                    Export to CSV
                  </button>
                  <button
                    className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                    onClick={() => handleExport("xls")}
                  >
                    Export to XLS
                  </button>
                </div>
              )}
            </div>
          </div>
        </div>

        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-6" role="alert">
            <strong className="font-bold">Error:</strong>
            <span className="block sm:inline ml-2">{error}</span>
          </div>
        )}

        <div className="mb-4 flex flex-col sm:flex-row items-start sm:items-center gap-3">
          <label htmlFor="difficulty_filter" className="text-sm font-semibold text-gray-700 whitespace-nowrap">Filter by Difficulty:</label>
          <select
            id="difficulty_filter"
            value={filterDifficulty}
            onChange={(e) => setFilterDifficulty(e.target.value)}
            className="mt-1 block w-full sm:w-auto px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-gray-800 bg-gray-50"
          >
            <option value="">All Difficulties</option>
            <option value="easy">Easy</option>
            <option value="medium">Medium</option>
            <option value="hard">Hard</option>
          </select>
          {filterDifficulty && (
            <button
              onClick={() => setFilterDifficulty("")}
              className="bg-gray-200 text-gray-700 px-3 py-1.5 rounded-md hover:bg-gray-300 transition-colors duration-200 flex items-center gap-1 text-sm shadow-sm"
            >
              <X size={16} />
              Clear Filter
            </button>
          )}
          <div className="relative flex-grow sm:ml-4 w-full sm:w-auto">
            <label htmlFor="main_search" className="sr-only">Search Questions</label>
            <input
              type="text"
              id="main_search"
              placeholder="Search by ID or text..."
              value={searchTerm}
              onChange={handleSearchChange}
              className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-gray-800 bg-gray-50 pl-10"
            />
            <Search size={20} className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 mt-0.5" />
          </div>
        </div>

        {loading ? (
          <div className="flex justify-center items-center h-64">
            <p className="text-xl text-gray-600">Loading...</p>
          </div>
        ) : filteredQuestions.length === 0 ? (
          <div className="text-center py-10">
            <p className="text-gray-500 text-lg">{searchTerm || filterDifficulty ? "No questions match your search or filter." : "No questions found."}</p>
            {!searchTerm && !filterDifficulty && <p className="text-gray-400">Get started by adding a new question.</p>}
          </div>
        ) : (
          <div className="overflow-x-auto rounded-lg shadow-sm border border-gray-200">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Text</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Image</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Difficulty</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredQuestions.map((q) => (
                  <tr key={q.$id} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{q.question_id}</td>
                    <td className="px-6 py-4 whitespace-normal text-sm text-gray-500 max-w-xs truncate">{q.text || "N/A"}</td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {q.imageUrl ? (
                        <img src={q.imageUrl} alt="Question" className="h-12 object-contain" />
                      ) : (
                        <span className="text-sm text-gray-400">No Image</span>
                      )}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{q.difficulty || "N/A"}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      <ActionButtons question={q} />
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}

        {modalOpen && (
          <Suspense fallback={<div className="flex justify-center items-center h-32">Loading...</div>}>
            <Modal
              title={editingQuestion ? "Edit Question" : "Add New Question"}
              onClose={closeModal}
              onSave={handleSave}
              initialData={formData}
              fields={questionModalFields}
              isLoading={loading}
              error={error}
              onChange={handleInputChange}
              customPosition={questionModalPosition}
            />
          </Suspense>
        )}

        {viewModalOpen && viewingQuestion && (
          <div className="fixed inset-0 flex items-center justify-center bg-gray-900 bg-opacity-50 z-50">
            <div
              ref={viewModalRef}
              className="bg-white p-8 rounded-lg shadow-xl w-[90%] max-w-6xl max-h-[90vh] overflow-y-auto"
            >
              <div className="flex justify-between items-start mb-6">
                <h3 className="text-2xl font-bold text-gray-800">Question Details</h3>
                <button
                  onClick={closeViewModal}
                  className="text-gray-500 hover:text-gray-700"
                  aria-label="Close"
                >
                  <X size={24} />
                </button>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                <div className="space-y-6">
                  <div>
                    <h4 className="text-sm font-medium text-gray-500">Question ID</h4>
                    <p className="mt-1 text-lg font-semibold">{viewingQuestion.question_id}</p>
                  </div>
                  
                  <div>
                    <h4 className="text-sm font-medium text-gray-500">Created By</h4>
                    <p className="mt-1 text-lg">{viewingQuestion.created_by || "N/A"}</p>
                  </div>
                  
                  <div>
                    <h4 className="text-sm font-medium text-gray-500">Difficulty</h4>
                    <p className="mt-1 text-lg capitalize">{viewingQuestion.difficulty || "N/A"}</p>
                  </div>
                  
                  <div>
                    <h4 className="text-sm font-medium text-gray-500">Tags</h4>
                    <div className="mt-1 flex flex-wrap gap-2">
                      {viewingQuestion.tags?.length ? (
                        viewingQuestion.tags.map((tag, i) => (
                          <span key={i} className="px-2 py-1 bg-blue-100 text-blue-800 text-sm rounded-full">
                            {tag}
                          </span>
                        ))
                      ) : (
                        <p className="text-gray-400">No tags</p>
                      )}
                    </div>
                  </div>
                </div>
                
                <div className="space-y-6">
                  <div>
                    <h4 className="text-sm font-medium text-gray-500">Question</h4>
                    {viewingQuestion.text && (
                      <p className="mt-1 text-lg bg-gray-50 p-3 rounded">{viewingQuestion.text}</p>
                    )}
                    {viewingQuestion.imageUrl && (
                      <div className="mt-3">
                        <img 
                          src={viewingQuestion.imageUrl} 
                          alt="Question" 
                          className="max-h-80 w-full object-contain border rounded-lg"
                        />
                      </div>
                    )}
                  </div>
                </div>
              </div>
              
              <div className="mt-8">
                <h4 className="text-lg font-medium text-gray-700 mb-4">Options</h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {viewingQuestion.options_text.map((option, index) => (
                    <div 
                      key={index} 
                      className={`p-4 rounded-lg border-2 ${viewingQuestion.correct_answer === index 
                        ? 'border-green-500 bg-green-50' 
                        : 'border-gray-200'}`}
                    >
                      <div className="flex items-start gap-4">
                        <div className="flex-1">
                          <div className="flex items-center justify-between">
                            <h5 className="font-medium">Option {index + 1}</h5>
                            {viewingQuestion.correct_answer === index && (
                              <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                Correct Answer
                              </span>
                            )}
                          </div>
                          <p className="mt-1 text-gray-700">{option || "N/A"}</p>
                        </div>
                        {viewingQuestion.optionsImageUrls[index] && (
                          <div className="flex-shrink-0 w-32 h-32">
                            <img 
                              src={viewingQuestion.optionsImageUrls[index]} 
                              alt={`Option ${index + 1}`} 
                              className="w-full h-full object-contain"
                            />
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              <div className="flex justify-end mt-8">
                <button
                  className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                  onClick={closeViewModal}
                >
                  Close
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default QuestionsPage;-e [1;34m===== ./pages/admin/exams.jsx =====[0m
import React, { useState, useEffect, useCallback, useMemo, useRef, Suspense } from 'react'; 
import { Plus, Download, Search, X, BookOpen, Calendar, Clock, Edit, Trash2, Eye } from 'lucide-react'; 
import { useRouter } from 'next/router'; 
import { databases, ID, Query, Permission, Role } from '../../utils/appwrite'; 
import { account } from '../../utils/appwrite'; 
import ReactDOM from 'react-dom'; 
import { lazy } from 'react'; 
import { Suspense as ReactSuspense } from 'react'; 
import { formatDateTimeUTC, formatDateUTC } from "../../utils/date";

const Modal = lazy(() => import("../../components/Modal"));

const ExamsPage = () => { 
  const router = useRouter(); 
  const [exams, setExams] = useState([]); 
  const [filteredExams, setFilteredExams] = useState([]); 
  const [modalState, setModalState] = useState({ type: null, exam: null }); 
  const [selectedExam, setSelectedExam] = useState(null); 
  const [isLoading, setIsLoading] = useState(false); 
  const [error, setError] = useState(null); 
  const [selectedExamDetail, setSelectedExamDetail] = useState(null); 
  const [questions, setQuestions] = useState([]); 
  const [filteredQuestions, setFilteredQuestions] = useState([]); 
  const [mappedQuestions, setMappedQuestions] = useState([]); 
  const [selectedQuestions, setSelectedQuestions] = useState([]); 
  const [questionMarks, setQuestionMarks] = useState({}); 
  const [searchTerm, setSearchTerm] = useState(""); 
  const [difficultyFilter, setDifficultyFilter] = useState("all"); 
  const [tagFilter, setTagFilter] = useState("all"); 
  const [availableTags, setAvailableTags] = useState([]); 
  const [currentPage, setCurrentPage] = useState(1); 
  const [filterStatus, setFilterStatus] = useState(""); 
  const [isExportMenuOpen, setIsExportMenuOpen] = useState(false); 
  const [controllers, setControllers] = useState([]);
  const [selectedController, setSelectedController] = useState("");
  const questionsPerPage = 10; 

  const exportButtonRef = useRef(null); 

  const initialFormData = { 
    exam_id: "", 
    name: "", 
    description: "", 
    exam_date: "", 
    duration: "", 
    status: "active", 
    controller_id: ""
  }; 

  const [formData, setFormData] = useState(initialFormData); 

  const databaseId = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID; 
  const examsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_EXAMS_COLLECTION_ID; 
  const questionsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_QUESTIONS_COLLECTION_ID; 
  const examQuestionsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_EXAM_QUESTIONS_COLLECTION_ID;
  const controllersCollectionId = process.env.NEXT_PUBLIC_APPWRITE_CONTROLLERS_COLLECTION_ID;

  const logQuery = (queryName, params, result, error = null) => { 
    console.groupCollapsed(`Query: ${queryName}`); 
    console.log('Params:', params); 
    if (error) { 
      console.error('Error:', error); 
    } else { 
      console.log('Result:', result); 
    } 
    console.groupEnd(); 
  }; 

  const fetchControllers = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    try {
      const response = await databases.listDocuments(
        databaseId,
        controllersCollectionId,
        [Query.orderDesc("$createdAt"), Query.limit(100)]
      );
      logQuery('Fetch Controllers', {
        databaseId,
        collectionId: controllersCollectionId
      }, response);
      setControllers(response.documents);
    } catch (err) {
      logQuery('Fetch Controllers', {
        databaseId,
        collectionId: controllersCollectionId
      }, null, err);
      console.error('Error fetching controllers:', err);
      setError("Failed to load controllers. Please try again.");
    } finally {
      setIsLoading(false);
    }
  }, [databaseId, controllersCollectionId]);

  const fetchExams = useCallback(async () => { 
    setIsLoading(true); 
    setError(null); 
    try { 
      if (!databaseId || !examsCollectionId) {
        throw new Error("Database ID or Exams Collection ID is not defined");
      }

      const response = await databases.listDocuments( 
        databaseId, 
        examsCollectionId, 
        [Query.orderDesc("$createdAt")] 
      ); 

      const examsWithControllers = await Promise.all(
        response.documents.map(async (exam) => {
          let controllerId = exam.controller_id;
        
        // Handle case where controller_id is an object (like a reference)
        if (controllerId && typeof controllerId === 'object') {
          if (Array.isArray(controllerId)) {
            controllerId = controllerId[0]?.$id || controllerId[0];
          } else if (controllerId.$id) {
            controllerId = controllerId.$id;
          }
        }

        if (controllerId) {
          try {
            const controller = await databases.getDocument(
              databaseId,
              controllersCollectionId,
              controllerId
            );
            return {
              ...exam,
              controller_name: controller.Name,
              controller_email: controller.email,
              exam_date_obj: new Date(exam.exam_date),
              // Store the raw controller_id separately
              raw_controller_id: exam.controller_id
            };
          } catch (error) {
            console.error('Error fetching controller:', error);
            return {
              ...exam,
              controller_name: 'Not found',
              controller_email: '',
              exam_date_obj: new Date(exam.exam_date),
              raw_controller_id: exam.controller_id
            };
          }
        }
        return {
          ...exam,
          controller_name: 'Not assigned',
          controller_email: '',
          exam_date_obj: new Date(exam.exam_date),
          raw_controller_id: exam.controller_id
        };
      })
    );

    const sortedExams = examsWithControllers.sort((a, b) => { 
      const now = new Date(); 
      const aIsExpired = a.exam_date_obj < now; 
      const bIsExpired = b.exam_date_obj < now; 
       
      if (aIsExpired && !bIsExpired) return 1; 
      if (!aIsExpired && bIsExpired) return -1; 
      return a.exam_date_obj - b.exam_date_obj; 
    }); 

    setExams(sortedExams); 
    setFilteredExams(sortedExams.filter(exam =>  
      filterStatus === "" || exam.status === filterStatus 
    )); 
  } catch (err) { 
    console.error('Error fetching exams:', { 
      message: err.message, 
      stack: err.stack, 
      timestamp: new Date().toISOString() 
    }); 
    setError("Failed to load exams. Please try again."); 
  } finally { 
    setIsLoading(false); 
  } 
}, [databaseId, examsCollectionId, filterStatus, controllersCollectionId]);

  const fetchQuestions = useCallback(async () => { 
    setIsLoading(true); 
    setError(null); 
    try { 
      const queryParams = { 
        databaseId, 
        collectionId: questionsCollectionId, 
        queries: [Query.orderDesc("$createdAt"), Query.limit(500)] 
      }; 

      let response; 
      try { 
        response = await databases.listDocuments( 
          queryParams.databaseId, 
          queryParams.collectionId, 
          queryParams.queries 
        ); 
        logQuery('Fetch Questions', queryParams, { 
          total: response.total, 
          documents: response.documents 
        }); 
      } catch (err) { 
        logQuery('Fetch Questions', queryParams, null, err); 
        throw new Error(`Failed to fetch questions: ${err.message}`); 
      } 

      if (response.total === 0) { 
        console.warn('No questions found in the collection'); 
        setError('No questions found in the collection. Please add questions to the database.'); 
      } 

      const sortedQuestions = response.documents.sort((a, b) =>  
        new Date(b.$createdAt) - new Date(a.$createdAt) 
      ); 

      console.log('Fetched questions:', sortedQuestions.length, sortedQuestions); 

      setQuestions(sortedQuestions); 
      setFilteredQuestions(sortedQuestions); 
       
      const tags = new Set(); 
      sortedQuestions.forEach(question => { 
        if (question.tags && Array.isArray(question.tags)) { 
          question.tags.forEach(tag => tags.add(tag)); 
        } 
      }); 
      setAvailableTags(Array.from(tags).sort()); 
    } catch (err) { 
      console.error('Error fetching questions:', { 
        message: err.message, 
        stack: err.stack, 
        timestamp: new Date().toISOString() 
      }); 
      setError(err.message || "Failed to load questions. Please check your database connection and try again."); 
    } finally { 
      setIsLoading(false); 
    } 
  }, [databaseId, questionsCollectionId]); 

  const fetchExamQuestions = useCallback(async (examId) => { 
    setIsLoading(true); 
    setError(null); 
    try { 
      const examQuestionsResponse = await databases.listDocuments( 
        databaseId,  
        examQuestionsCollectionId, 
        [Query.orderAsc('order')] 
      ); 
       
      const filteredExamQuestions = examQuestionsResponse.documents.filter(doc => { 
        const examRef = doc.exam_id; 
        if (Array.isArray(examRef)) { 
          return examRef.some(ref => ref.$id === examId || ref === examId); 
        } else if (typeof examRef === 'object') { 
          return examRef.$id === examId; 
        } 
        return examRef === examId; 
      }); 

      const questionIds = filteredExamQuestions.map(eq => { 
        const questionRef = eq.question_id; 
        if (Array.isArray(questionRef)) { 
          return questionRef[0]?.$id || questionRef[0]; 
        } else if (typeof questionRef === 'object') { 
          return questionRef.$id; 
        } 
        return questionRef; 
      }).filter(id => id); 

      if (questionIds.length > 0) { 
        const questionsResponse = await databases.listDocuments( 
          databaseId, 
          questionsCollectionId, 
          [Query.limit(100)] 
        ); 
         
        const filteredQuestions = questionsResponse.documents.filter(q =>  
          questionIds.includes(q.$id) || questionIds.includes(q.question_id) 
        ); 

        const orderedQuestions = filteredExamQuestions.map(eq => { 
          const questionRef = eq.question_id; 
          const questionId = Array.isArray(questionRef) ? questionRef[0]?.$id || questionRef[0] :  
                           (typeof questionRef === 'object' ? questionRef.$id : questionRef); 
          const question = filteredQuestions.find(q => q.$id === questionId || q.question_id === questionId); 
          return { 
            ...question, 
            order: eq.order, 
            marks: eq.marks, 
            examQuestionId: eq.$id 
          }; 
        }); 

        return { 
          questions: orderedQuestions, 
          examQuestions: filteredExamQuestions, 
          questionIds: filteredExamQuestions.map(q => q.question_id) 
        }; 
      } 

      return { questions: [], examQuestions: [], questionIds: [] }; 
    } catch (err) { 
      console.error('Error fetching exam questions:', { 
        message: err.message, 
        stack: err.stack, 
        timestamp: new Date().toISOString() 
      }); 
      setError(err.message || "Failed to load exam questions"); 
      return { questions: [], examQuestions: [], questionIds: [] }; 
    } finally { 
      setIsLoading(false); 
    } 
  }, [databaseId, questionsCollectionId, examQuestionsCollectionId]); 

  useEffect(() => { 
    let results = [...questions]; 
     
    console.log('Applying filters:', { searchTerm, difficultyFilter, tagFilter, totalQuestions: questions.length }); 

    if (searchTerm) { 
      results = results.filter(question =>  
        (question.text?.toLowerCase()?.includes(searchTerm.toLowerCase()) || 
        question.question_id?.toLowerCase()?.includes(searchTerm.toLowerCase())) 
      ); 
    } 
     
    if (difficultyFilter !== "all") { 
      results = results.filter(question =>  
        question.difficulty === difficultyFilter 
      ); 
    } 
     
    if (tagFilter !== "all") { 
      results = results.filter(question =>  
        question.tags && Array.isArray(question.tags) && question.tags.includes(tagFilter) 
      ); 
    } 
     
    console.log('Filtered questions:', results.length, results); 

    setFilteredQuestions(results); 
    setCurrentPage(1); 
  }, [searchTerm, difficultyFilter, tagFilter, questions]); 

  useEffect(() => { 
    const fetchData = async () => { 
      try { 
        await Promise.all([fetchExams(), fetchQuestions(), fetchControllers()]); 
      } catch (err) { 
        setError("Failed to load initial data. Please try again."); 
      } 
    }; 
    fetchData(); 
  }, [fetchExams, fetchQuestions, fetchControllers]); 

  useEffect(() => { 
    const handleClickOutside = (event) => { 
      if (exportButtonRef.current && !exportButtonRef.current.contains(event.target)) { 
        setIsExportMenuOpen(false); 
      } 
    }; 

    if (isExportMenuOpen) { 
      document.addEventListener("mousedown", handleClickOutside); 
    } 
    return () => { 
      document.removeEventListener("mousedown", handleClickOutside); 
    }; 
  }, [isExportMenuOpen]); 

  const openModal = (type, exam = null) => { 
    setSelectedExam(exam); 
    if (type === 'edit') { 
      setFormData( 
        exam ? { 
          exam_id: exam.exam_id || "", 
          name: exam.name || "", 
          description: exam.description || "", 
          exam_date: exam.exam_date ? exam.exam_date.substring(0, 16) : "", 
          duration: exam.duration?.toString() || "", 
          status: exam.status || "active", 
          controller_id: exam.controller_id || ""
        } : initialFormData 
      ); 
      // Set the selected controller based on the exam's raw_controller_id
      if (exam?.raw_controller_id) {
        if (typeof exam.raw_controller_id === 'object') {
          setSelectedController(exam.raw_controller_id.$id || "");
        } else {
          setSelectedController(exam.raw_controller_id || "");
        }
      } else {
        setSelectedController("");
      }
    } else {
      setFormData(initialFormData);
      setSelectedController("");
    }
    setModalState({ type, exam }); 
  };

  const openQuestionModal = async (exam) => { 
    setSelectedExam(exam); 
    setIsLoading(true); 
    try { 
      const { questions: mapped, examQuestions } = await fetchExamQuestions(exam.$id); 
      setMappedQuestions(mapped); 
      const mappedIds = mapped.map(q => q.$id).filter(Boolean); 
      setSelectedQuestions(mappedIds); 
      const marks = {}; 
      mapped.forEach(q => { 
        marks[q.$id] = q.marks || 1; 
      }); 
      setQuestionMarks(marks); 
      setModalState({ type: 'questions', exam }); 
    } catch (err) { 
      setError("Failed to load exam questions"); 
    } finally { 
      setIsLoading(false); 
    } 
  }; 

  const openViewQuestionsModal = async (exam) => { 
    setSelectedExam(exam); 
    setIsLoading(true); 
    try { 
      const { questions: examQuestions } = await fetchExamQuestions(exam.$id); 
      setQuestions(examQuestions); 
      setModalState({ type: 'viewQuestions', exam }); 
    } catch (err) { 
      setError("Failed to load exam questions"); 
    } finally { 
      setIsLoading(false); 
    } 
  }; 

  const closeModal = () => { 
    setModalState({ type: null, exam: null }); 
    setSelectedExam(null); 
    setFormData(initialFormData); 
    setError(null); 
    setSelectedQuestions([]); 
    setQuestionMarks({}); 
    setSearchTerm(""); 
    setDifficultyFilter("all"); 
    setTagFilter("all"); 
    setMappedQuestions([]); 
    setCurrentPage(1); 
    setSelectedController(null);
  }; 

  const closeQuestionModal = () => { 
    setModalState({ type: null, exam: null }); 
    setSelectedExam(null); 
    setSelectedQuestions([]); 
    setQuestionMarks({}); 
    setSearchTerm(""); 
    setDifficultyFilter("all"); 
    setTagFilter("all"); 
    setMappedQuestions([]); 
    setCurrentPage(1); 
  }; 

  const closeViewQuestionsModal = () => { 
    setModalState({ type: null, exam: null }); 
    setSelectedExam(null); 
    setQuestions([]); 
  }; 

  const handleInputChange = (e) => { 
    const { name, value } = e.target; 
    setFormData(prev => ({ ...prev, [name]: value })); 
  }; 

  const handleQuestionSelect = (questionId) => { 
    setSelectedQuestions(prev => { 
      if (prev.includes(questionId)) { 
        const newMarks = {...questionMarks}; 
        delete newMarks[questionId]; 
        setQuestionMarks(newMarks); 
        return prev.filter(id => id !== questionId); 
      } else { 
        setQuestionMarks(prev => ({ 
          ...prev, 
          [questionId]: prev[questionId] || 1 
        })); 
        return [...prev, questionId]; 
      } 
    }); 
  }; 

  const handleMarksChange = (questionId, value) => { 
    const marksValue = parseInt(value) || 1; 
    setQuestionMarks(prev => ({ 
      ...prev, 
      [questionId]: marksValue > 0 ? marksValue : 1 
    })); 
  }; 

  const validateForm = (data) => { 
    if (!selectedExam && !data.name.trim()) return "Exam name is required"; 
    if (!selectedExam && !data.exam_date) return "Exam date is required"; 
    if (!selectedExam && (!data.duration || isNaN(parseInt(data.duration)))) return "Duration must be a valid number"; 
    if (selectedExam) { 
      if (!data.exam_id || !data.exam_id.trim()) return "Exam ID is required"; 
      if (!data.name.trim()) return "Exam name is required"; 
      if (!data.exam_date) return "Exam date is required"; 
      if (!data.duration || isNaN(parseInt(data.duration))) return "Duration must be a valid number"; 
    } 
    return null; 
  }; 

  const handleSave = async (data) => { 
    const validationError = validateForm(data); 
    if (validationError) { 
      setError(validationError); 
      return; 
    } 

    setIsLoading(true); 
    setError(null); 

    try { 
      const user = await account.get(); 
      if (!user) throw new Error("Authentication required"); 

      const durationInt = parseInt(data.duration, 10); 
      const timestamp = new Date().toISOString(); 

      // Prepare the exam data with proper controller_id format
      const examData = {
        ...data,
        duration: durationInt,
        modified_at: timestamp,
        // Only include controller_id if one is selected
        ...(selectedController ? { controller_id: selectedController } : {})
      };

      if (selectedExam) { 
        await databases.updateDocument( 
          databaseId, 
          examsCollectionId, 
          selectedExam.$id, 
          examData
        ); 
      } else { 
        const year = new Date().getFullYear(); 
        const random = Math.floor(Math.random() * 1e12).toString().padStart(12, '0'); 
        const exam_id = `EXAM-${year}-${random}`; 
        
        await databases.createDocument( 
          databaseId, 
          examsCollectionId, 
          ID.unique(), 
          { 
            ...examData,
            exam_id,
            created_by: user.$id, 
            created_at: timestamp,
            // Ensure controller_id is properly included
            ...(selectedController ? { controller_id: selectedController } : {})
          }, 
          [ 
            Permission.read(Role.any()), 
            Permission.update(Role.user(user.$id)), 
            Permission.delete(Role.user(user.$id)) 
          ] 
        ); 
      } 

      closeModal(); 
      await fetchExams(); 
    } catch (err) { 
      console.error("Error saving exam:", { 
        message: err.message, 
        stack: err.stack, 
        timestamp: new Date().toISOString() 
      }); 
      setError(err.message || "Failed to save exam"); 
    } finally { 
      setIsLoading(false); 
    } 
  };

  const handleSaveQuestions = async () => { 
    if (!selectedExam) { 
      setError("No exam selected"); 
      return; 
    } 

    setIsLoading(true); 
    setError(null); 

    try { 
      let user; 
      try { 
        user = await account.get(); 
        if (!user) throw new Error("User not authenticated"); 
      } catch (authError) { 
        throw new Error("Authentication failed. Please log in again."); 
      } 

      const existingQuestions = await fetchExamQuestions(selectedExam.$id); 
       
      const questionsToDelete = existingQuestions.examQuestions.filter( 
        q => !selectedQuestions.includes(Array.isArray(q.question_id) ? q.question_id[0] : q.question_id) 
      ); 
       
      await Promise.all( 
        questionsToDelete.map(async (q) => { 
          try { 
            await databases.deleteDocument(databaseId, examQuestionsCollectionId, q.$id); 
          } catch (deleteError) { 
            console.error(`Failed to delete exam question ${q.$id}:`, deleteError); 
            throw new Error(`Failed to delete question ${q.$id}: ${deleteError.message}`); 
          } 
        }) 
      ); 

      await Promise.all( 
        selectedQuestions.map(async (questionId, index) => { 
          const questionExists = questions.find(q => q.$id === questionId); 
          if (!questionExists) { 
            throw new Error(`Question with ID ${questionId} does not exist`); 
          } 

          const existing = existingQuestions.examQuestions.find( 
            q => { 
              const qId = Array.isArray(q.question_id) ? q.question_id[0] : q.question_id; 
              return qId === questionId; 
            } 
          ); 
           
          const marks = questionMarks[questionId] || 1; 
          if (isNaN(marks) || marks < 1) { 
            throw new Error(`Invalid marks for question ${questionId}`); 
          } 

          const documentData = { 
            exam_id: [selectedExam.$id], 
            question_id: [questionId], 
            order: index + 1, 
            marks: marks 
          }; 

          console.log('Creating/Updating exam question:', { 
            questionId, 
            documentData, 
            existing: !!existing 
          }); 

          if (existing) { 
            try { 
              await databases.updateDocument( 
                databaseId, 
                examQuestionsCollectionId, 
                existing.$id, 
                {  
                  order: index + 1,  
                  marks: marks  
                } 
              ); 
            } catch (updateError) { 
              console.error(`Failed to update exam question ${existing.$id}:`, updateError); 
              throw new Error(`Failed to update question ${questionId}: ${updateError.message}`); 
            } 
          } else { 
            try { 
              await databases.createDocument( 
                databaseId, 
                examQuestionsCollectionId, 
                ID.unique(), 
                documentData, 
                [ 
                  Permission.read(Role.any()), 
                  Permission.update(Role.user(user.$id)), 
                  Permission.delete(Role.user(user.$id)), 
                  Permission.write(Role.user(user.$id)) 
                ] 
              ); 
            } catch (createError) { 
              console.error(`Failed to create exam question for ${questionId}:`, createError); 
              throw new Error(`Failed to create question ${questionId}: ${createError.message}`); 
            } 
          } 
        }) 
      ); 

      closeQuestionModal(); 
      await fetchExams(); 
    } catch (err) { 
      console.error("Error saving exam questions:", { 
        message: err.message, 
        stack: err.stack, 
        timestamp: new Date().toISOString() 
      }); 
      setError(err.message || "Failed to save exam questions. Please check your permissions and try again."); 
    } finally { 
      setIsLoading(false); 
    } 
  }; 

  const deleteExam = async (examId) => { 
    if (!window.confirm("Are you sure you want to delete this exam?")) return; 

    setIsLoading(true); 
    try { 
      const user = await account.get(); 
      if (!user) throw new Error("Authentication required"); 

      const examQuestions = await fetchExamQuestions(examId); 
      await Promise.all( 
        examQuestions.examQuestions.map(q =>  
          databases.deleteDocument(databaseId, examQuestionsCollectionId, q.$id) 
        ) 
      ); 

      await databases.deleteDocument(databaseId, examsCollectionId, examId); 
      await fetchExams(); 
      closeExamDetails(); 
    } catch (err) { 
      console.error("Error deleting exam:", { 
        message: err.message, 
        stack: err.stack, 
        timestamp: new Date().toISOString() 
      }); 
      setError(err.message || "Failed to delete exam"); 
    } finally { 
      setIsLoading(false); 
    } 
  }; 

  const handleExport = async (format) => { 
    setIsExportMenuOpen(false); 
    if (filteredExams.length === 0) { 
      setError("No exams available to export."); 
      return; 
    } 
    try { 
      const exportData = filteredExams.map((exam) => ({ 
        "Exam ID": exam.exam_id, 
        "Name": exam.name, 
        "Description": exam.description || "N/A", 
        "Exam Date": formatDateUTC(exam.exam_date), 
        "Duration": formatDuration(exam.duration), 
        "Status": exam.status, 
        "Controller": exam.controller_name || "Not assigned",
        "Controller Email": exam.controller_email || "N/A",
        "Created By": exam.created_by || "N/A", 
        "Created At": formatDateUTC(exam.created_at), 
        "Last Modified": formatDateUTC(exam.modified_at), 
      })); 
      if (format === "csv") { 
        const { Parser } = await import("json2csv"); 
        const fields = [
          "Exam ID", 
          "Name", 
          "Description", 
          "Exam Date", 
          "Duration", 
          "Status", 
          "Controller",
          "Controller Email",
          "Created By", 
          "Created At", 
          "Last Modified"
        ]; 
        const parser = new Parser({ fields }); 
        const csv = parser.parse(exportData); 
        const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" }); 
        const url = URL.createObjectURL(blob); 
        const link = document.createElement("a"); 
        link.setAttribute("href", url); 
        link.setAttribute("download", `exams_${new Date().toISOString().slice(0, 10)}.csv`); 
        link.click(); 
        URL.revokeObjectURL(url); 
      } else if (format === "xls") { 
        const { utils, writeFile } = await import("xlsx"); 
        const ws = utils.json_to_sheet(exportData); 
        const wb = utils.book_new(); 
        utils.book_append_sheet(wb, ws, "Exams"); 
        writeFile(wb, `exams_${new Date().toISOString().slice(0, 10)}.xlsx`); 
      } 
    } catch (error) { 
      console.error(`Error exporting to ${format.toUpperCase()}:`, error); 
      setError(`Failed to export to ${format.toUpperCase()}: ${error.message}`); 
    } 
  }; 

  const formatDate = (dateString) => { 
    if (!dateString) return "N/A"; 
    const options = {  
      year: 'numeric',  
      month: 'long',  
      day: 'numeric',  
      hour: '2-digit',  
      minute: '2-digit'  
    }; 
    return new Date(dateString).toLocaleString(undefined, options); 
  }; 

  const formatDuration = (minutes) => { 
    const hours = Math.floor(minutes / 60); 
    const mins = minutes % 60; 
    return hours ? `${hours}h ${mins}m` :  
           `${mins}m`; 
  }; 

  const getExamStatus = (examDate) => { 
    const now = new Date(); 
    const examDateObj = new Date(examDate); 
    return examDateObj < now ? "Expired" : ""; 
  }; 

  const indexOfLastQuestion = currentPage * questionsPerPage; 
  const indexOfFirstQuestion = indexOfLastQuestion - questionsPerPage; 

  const currentQuestions = filteredQuestions.slice(indexOfFirstQuestion, indexOfLastQuestion); 
  const totalPages = Math.ceil(filteredQuestions.length / questionsPerPage); 

  const viewExamDetails = (exam) => { 
    setSelectedExamDetail(exam); 
  }; 

  const closeExamDetails = () => { 
    setSelectedExamDetail(null); 
  }; 

  if (isLoading && !exams.length) { 
    return ( 
      <div className="min-h-screen bg-gray-100 p-4 sm:p-6 font-inter"> 
        <div className="container mx-auto"> 
          <div className="flex justify-center items-center h-32"> 
            <p className="text-xl text-gray-600">Loading...</p> 
          </div> 
        </div> 
      </div> 
    ); 
  } 

  return ( 
    <div className="w-full"> 
      <div className="bg-white rounded-lg shadow-md p-4 sm:p-6"> 
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-3"> 
          <h2 className="text-2xl sm:text-3xl font-extrabold text-gray-600 sm:text-gray-800">Manage Exams</h2> 
          <div className="flex flex-wrap gap-2"> 
            <button 
              onClick={() => openModal('edit')} 
              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition-colors duration-200 flex items-center gap-2 text-base font-semibold sm:text-sm shadow-sm" 
              disabled={isLoading} 
            > 
              <Plus size={18} /> Add Exam 
            </button> 
            <div className="relative" ref={exportButtonRef}> 
              <button 
                className="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-md transition-colors duration-200 flex items-center gap-2 text-base font-semibold sm:text-sm shadow-sm" 
                onClick={() => setIsExportMenuOpen(!isExportMenuOpen)} 
              > 
                <Download size={18} /> 
                <span>Export</span> 
              </button> 
              {isExportMenuOpen && ( 
                <div className="absolute right-0 bg-white rounded-md shadow-lg mt-2 w-48 border border-gray-200 z-50"> 
                  <button 
                    className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" 
                    onClick={() => handleExport("csv")} 
                  > 
                    Export to CSV 
                  </button> 
                  <button 
                    className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" 
                    onClick={() => handleExport("xls")} 
                  > 
                    Export to XLS 
                  </button> 
                </div> 
              )} 
            </div> 
          </div> 
        </div> 

        {error && ( 
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-md mb-6" role="alert"> 
            <strong className="font-bold">Error:</strong> 
            <span className="block sm:inline ml-2">{error}</span> 
          </div> 
        )} 

        <div className="mb-4 flex flex-col sm:flex-row items-start sm:items-center gap-3"> 
          <label htmlFor="status_filter" className="text-sm font-semibold text-gray-700 whitespace-nowrap">Filter by Status:</label> 
          <select 
            id="status_filter" 
            value={filterStatus} 
            onChange={(e) => setFilterStatus(e.target.value)} 
            className="mt-1 block w-full sm:w-auto px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm bg-gray-50 text-gray-800" 
          > 
            <option value="">All Statuses</option> 
            <option value="active">Active</option> 
            <option value="inactive">Inactive</option> 
            <option value="completed">Completed</option> 
          </select> 
          {filterStatus && ( 
            <button 
              onClick={() => setFilterStatus("")} 
              className="bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2 rounded-md transition-colors duration-200 flex items-center gap-1 sm:text-sm shadow-sm" 
            > 
              <X size={16} /> 
              <span>Clear Filter</span> 
            </button> 
          )} 
        </div> 

        <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6"> 
          <div className="flex justify-between items-center mb-6"> 
            <h4 className="text-xl font-semibold text-gray-800 flex items-center sm:text-lg"> 
              <BookOpen size={20} className="mr-2 text-blue-600" /> 
              All Exams 
            </h4> 
            <span className="text-sm text-gray-500 sm:text-xs"> 
              {filteredExams.length} exam{filteredExams.length !== 1 ? 's' : ''} 
            </span> 
          </div> 

          {filteredExams.length > 0 ? ( 
            <div className="space-y-4"> 
              {filteredExams.map((examData) => ( 
                <div  
                  key={examData.$id} 
                  onClick={() => viewExamDetails(examData)} 
                  className={`border rounded-lg border-gray-100 p-3 sm:p-4 cursor-pointer transition-all hover:shadow-md ${ 
                    getExamStatus(examData.exam_date) === ""  
                      ? "bg-white"  
                      : "bg-white" 
                  }`} 
                > 
                  <div className="flex flex-col sm:flex-row justify-between items-start sm:items-start"> 
                    <div> 
                      <h4 className="text-base font-semibold text-gray-900 sm:text-lg">{examData.name}</h4> 
                      <p className="text-sm text-gray-600 mt-1">{examData.exam_id}</p> 
                      <div className="mt-2 flex flex-col sm:flex-row sm:items-center sm:space-x-2"> 
                        <span className="flex items-center text-sm text-gray-500 sm:text-xs"> 
                          <Calendar size={16} className="mr-1" /> {formatDateUTC(examData.exam_date)} 
                        </span> 
                        <span className="flex items-center text-sm text-gray-500 sm:text-xs sm:mt-0 mt-1"> 
                          <Clock size={16} className="mr-1" /> {formatDuration(examData.duration)} 
                        </span> 
                      </div> 
                      <div className="mt-2">
                        <span className="text-sm text-gray-600 sm:text-xs">
                          Examiner: {examData.controller_name || "Not assigned"}
                        </span>
                      </div>
                    </div> 
                    <div className="flex items-center space-x-2 mt-4 sm:mt-0"> 
                      <span className={`px-2 py-0 rounded-sm text-sm font-semibold sm:text-xs ${ 
                        examData.status === "active"  
                          ? "bg-blue-100 text-blue-800"  
                          : examData.status === "completed"  
                          ? "bg-green-100 text-green-800"  
                          : "bg-gray-100 text-gray-800" 
                      }`}> 
                        {examData.status} 
                      </span> 
                      <span className={`px-2 py-0 rounded-sm text-sm font-semibold sm:text-xs ${ 
                        getExamStatus(examData.exam_date) === "Expired"  
                          ? "bg-red-100 text-red-800"  
                          : "bg-green-100 text-green-800" 
                      }`}> 
                        {getExamStatus(examData.exam_date)} 
                      </span> 
                    </div> 
                  </div> 
                  <div className="mt-3 flex flex-wrap gap-2"> 
                    <button 
                      onClick={(e) => { 
                        e.stopPropagation(); 
                        openModal('edit', examData); 
                      }} 
                      className="bg-blue-500 text-white px-2 py-1 rounded-md hover:bg-blue-600 transition-colors duration-200 flex items-center gap-1 text-sm" 
                      disabled={isLoading} 
                      title="Edit Exam" 
                    > 
                      <Edit size={16} className="w-4 h-4" /> Edit 
                    </button> 
                    <button 
                      onClick={(e) => { 
                        e.stopPropagation(); 
                        deleteExam(examData.$id); 
                      }} 
                      className="bg-red-500 text-white px-2 py-1 rounded-md hover:bg-red-600 transition-colors duration-200 flex items-center gap-1 text-sm" 
                      disabled={isLoading} 
                      title="Delete Exam" 
                    > 
                      <Trash2 size={16} className="w-4 h-4" /> Delete 
                    </button> 
                    <button 
                      onClick={(e) => { 
                        e.stopPropagation(); 
                        openQuestionModal(examData); 
                      }} 
                      className="bg-gray-500 text-white px-2 py-1 rounded-md hover:bg-gray-600 transition-colors duration-200 flex items-center gap-1 text-sm" 
                      disabled={isLoading} 
                      title="Manage Questions" 
                    > 
                      <Edit size={16} className="w-4 h-4" /> Manage Questions 
                    </button> 
                    <button 
                      onClick={(e) => { 
                        e.stopPropagation(); 
                        openViewQuestionsModal(examData); 
                      }} 
                      className="bg-green-500 text-white px-2 py-1 rounded-md hover:bg-green-600 transition-colors duration-200 flex items-center gap-1 text-sm" 
                      disabled={isLoading} 
                      title="View Questions" 
                    > 
                      <Eye size={16} className="w-4 h-4" /> View Questions 
                    </button> 
                  </div> 
                </div> 
              ))} 
            </div> 
          ) : ( 
            <div className="text-center py-8"> 
              <p className="text-gray-500 mb-4 text-base sm:text-lg">{filterStatus ? "No exams match the selected status." : "No exams found."}</p> 
              <button 
                onClick={() => openModal('edit')} 
                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors text-sm sm:text-base" 
              > 
                Create First Exam 
              </button> 
            </div> 
          )} 
        </div> 

        {modalState.type === 'edit' && ( 
        <Suspense fallback={<div className="flex justify-center items-center h-32">Loading...</div>}> 
          <Modal 
            title={selectedExam ? "Edit Exam" : "Add New Exam"} 
            onClose={closeModal} 
            onSave={handleSave} 
            initialData={formData} 
            fields={[ 
              ...(!selectedExam ? [] : [ 
                { name: "exam_id", label: "Exam ID", type: "text", required: true, disabled: true }, 
              ]), 
              { name: "name", label: "Exam Name", type: "text", required: true }, 
              { name: "description", label: "Description", type: "textarea" }, 
              { name: "exam_date", label: "Exam Date", type: "datetime-local", required: true }, 
              { name: "duration", label: "Duration (minutes)", type: "number", required: true, min: 1 }, 
              { 
                name: "status", 
                label: "Status", 
                type: "select", 
                options: ["active", "inactive", "completed"], 
                required: true, 
              },
              {
                name: "controller_id",
                label: "Controller",
                type: "select",
                options: [
                  { value: "", label: "Select Controller" },
                  ...controllers.map(c => ({ 
                    value: c.$id, 
                    label: `${c.Name} (${c.email})` 
                  }))
                ],
                value: selectedController,
                onChange: (e) => {
                  const value = e.target.value;
                  setSelectedController(value);
                  setFormData(prev => ({
                    ...prev,
                    controller_id: value
                  }));
                },
                required: false
              }
            ]} 
            onChange={handleInputChange} 
            isLoading={isLoading} 
            error={error} 
            modalWidthClass="w-full max-w-4xl" 
          /> 
        </Suspense> 
      )} 

        {modalState.type === 'questions' && selectedExam && ( 
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"> 
            <div className="bg-white rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] overflow-y-auto"> 
              <div className="p-6"> 
                <div className="flex justify-between items-start mb-4"> 
                  <div> 
                    <h3 className="text-xl font-bold text-gray-800"> 
                      Manage Questions for {selectedExam.name} 
                    </h3> 
                    <p className="text-sm text-gray-600"> 
                      {selectedQuestions?.length || 0} question(s) selected 
                    </p> 
                  </div> 
                  <button 
                    onClick={closeQuestionModal} 
                    className="text-gray-500 hover:text-gray-700" 
                    disabled={isLoading} 
                  > 
                    <X size={24} /> 
                  </button> 
                </div> 

                {error && ( 
                  <div className="mb-4 p-3 bg-red-100 border-l-4 border-red-500 text-red-700"> 
                    <p>{error}</p> 
                  </div> 
                )} 

                <div className="mb-4 grid grid-cols-1 sm:grid-cols-3 gap-4"> 
                  <div className="relative"> 
                    <label htmlFor="search" className="block text-sm font-semibold text-gray-700 mb-1"> 
                      Search Questions 
                    </label> 
                    <input 
                      type="text" 
                      id="search" 
                      value={searchTerm} 
                      onChange={(e) => setSearchTerm(e.target.value)} 
                      placeholder="Search by text or ID..." 
                      className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm bg-gray-50 pl-10 text-gray-800" 
                      disabled={isLoading} 
                    /> 
                    <Search size={20} className="absolute left-3 top-9 -translate-y-1/2 text-gray-400" /> 
                  </div> 
                  <div> 
                    <label htmlFor="difficulty" className="block text-sm font-semibold text-gray-700 mb-1"> 
                      Filter Difficulty 
                    </label> 
                    <select 
                      id="difficulty" 
                      value={difficultyFilter} 
                      onChange={(e) => setDifficultyFilter(e.target.value)} 
                      className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm bg-gray-50 text-gray-800" 
                      disabled={isLoading} 
                    > 
                      <option value="all">All Difficulties</option> 
                      <option value="easy">Easy</option> 
                      <option value="medium">Medium</option> 
                      <option value="hard">Hard</option> 
                    </select> 
                  </div> 
                  <div> 
                    <label htmlFor="tags" className="block text-sm font-semibold text-gray-700 mb-1"> 
                      Filter Tag 
                    </label> 
                    <select 
                      id="tags" 
                      value={tagFilter} 
                      onChange={(e) => setTagFilter(e.target.value)} 
                      className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm bg-gray-50 text-gray-800" 
                      disabled={isLoading} 
                    > 
                      <option value="all">All Tags</option> 
                      {availableTags.map(tag => ( 
                        <option key={tag} value={tag}>{tag}</option> 
                      ))} 
                    </select> 
                  </div> 
                </div> 

                <div className="space-y-3"> 
                  {(() => { 
                    const selectedSet = new Set(selectedQuestions); 
                    const sortedQuestions = [ 
                      ...filteredQuestions.filter(q => selectedSet.has(q.$id)), 
                      ...filteredQuestions.filter(q => !selectedSet.has(q.$id)), 
                    ]; 
                    const indexOfLast = currentPage * questionsPerPage; 
                    const indexOfFirst = indexOfLast - questionsPerPage; 
                    const paginatedQuestions = sortedQuestions.slice(indexOfFirst, indexOfLast); 
                    return paginatedQuestions.map((question, idx) => ( 
                      <div 
                        key={question.$id} 
                        className={`p-4 border rounded-lg transition-colors ${ 
                          selectedQuestions.includes(question.$id) 
                            ? "bg-blue-50 border-blue-200" 
                            : "bg-white border-gray-200 hover:bg-gray-50" 
                        }`} 
                      > 
                        <div className="flex items-start space-x-3"> 
                          <div className="w-8 text-center text-gray-600 sm:text-sm font-bold">{indexOfFirst + idx + 1}.</div> 
                          <input 
                            type="checkbox" 
                            checked={selectedQuestions.includes(question.$id)} 
                            onChange={() => handleQuestionSelect(question.$id)} 
                            className="mt-1 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded sm:h-4 sm:w-4" 
                            disabled={isLoading} 
                          /> 
                          <div className="flex-1"> 
                            <div className="flex justify-between items-start"> 
                              <h4 className="font-medium text-gray-800 sm:text-sm"> 
                                {question.text || "Question"} 
                              </h4> 
                              <span className={`px-2 py-1 text-sm rounded-full sm:text-xs ${ 
                                question.difficulty === "easy" 
                                  ? "bg-green-100 text-green-800" 
                                  : question.difficulty === "medium" 
                                  ? "bg-yellow-100 text-yellow-800" 
                                  : "bg-red-100 text-red-800" 
                              }`}> 
                                {question.difficulty || "N/A"} 
                              </span> 
                            </div> 
                            <div className="mt-1 text-sm text-gray-600 sm:text-xs"> 
                              <span className="mr-2">ID: {question.question_id || "N/A"}</span> 
                              <span>Type: {question.type || "N/A"}</span> 
                              {question.tags && question.tags.length > 0 && ( 
                                <div className="mt-1 flex flex-wrap gap-1"> 
                                  {question.tags.map(tag => ( 
                                    <span key={tag} className="px-2 py-0.5 bg-gray-100 text-gray-700 rounded-full text-xs sm:text-xs"> 
                                      {tag} 
                                    </span> 
                                  ))} 
                                </div> 
                              )} 
                            </div> 
                            {selectedQuestions.includes(question.$id) && ( 
                              <div className="mt-3 flex items-center"> 
                                <label htmlFor={`marks-${question.$id}`} className="mr-2 text-sm text-gray-700 sm:text-sm"> 
                                  Marks: 
                                </label> 
                                <input 
                                  type="number" 
                                  id={`marks-${question.$id}`} 
                                  min="1" 
                                  value={questionMarks[question.$id] || 1} 
                                  onChange={(e) => handleMarksChange(question.$id, e.target.value)} 
                                  className="w-20 px-2 py-1 border border-gray-300 rounded-md text-sm sm:text-sm" 
                                  disabled={isLoading} 
                                /> 
                              </div> 
                            )} 
                            {question.options_text && ( 
                              <div className="mt-2 grid grid-cols-1 md:grid-cols-2 gap-2"> 
                                {question.options_text.map((option, index) => ( 
                                  <div 
                                    key={index} 
                                    className={`text-sm p-2 rounded ${ 
                                      question.correct_answer === index 
                                        ? "bg-green-100 text-green-800" 
                                        : "bg-gray-100 text-gray-800" 
                                    }`} 
                                  > 
                                    {option} 
                                  </div> 
                                ))} 
                              </div> 
                            )} 
                          </div> 
                        </div> 
                      </div> 
                    )); 
                  })()} 
                  {filteredQuestions.length === 0 && ( 
                    <div className="text-center py-8 text-gray-500"> 
                      {questions.length > 0 
                        ? "No questions match the current filters" 
                        : "No questions found in the collection"} 
                    </div> 
                  )} 
                </div> 

                {(() => { 
                  const selectedSet = new Set(selectedQuestions); 
                  const sortedQuestions = [ 
                    ...filteredQuestions.filter(q => selectedSet.has(q.$id)), 
                    ...filteredQuestions.filter(q => !selectedSet.has(q.$id)), 
                  ]; 
                  const totalPagesLocal = Math.ceil(sortedQuestions.length / questionsPerPage); 
                  return totalPagesLocal > 1 ? ( 
                    <div className="mt-6 flex justify-between items-center"> 
                      <button 
                        onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))} 
                        disabled={currentPage === 1 || isLoading} 
                        className="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition-colors duration-200 disabled:opacity-50 sm:text-sm" 
                      > 
                        Previous 
                      </button> 
                      <span className="text-sm text-gray-700 sm:text-xs"> 
                        Page {currentPage} of {totalPagesLocal || 1} 
                      </span> 
                      <button 
                        onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPagesLocal))} 
                        disabled={currentPage === totalPagesLocal || isLoading} 
                        className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors duration-200 disabled:opacity-50 sm:text-sm" 
                      > 
                        Next 
                      </button> 
                    </div> 
                  ) : null; 
                })()} 

                <div className="mt-6 flex justify-end space-x-3"> 
                  <button 
                    onClick={closeQuestionModal} 
                    className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors duration-150 disabled:opacity-50 sm:text-sm" 
                    disabled={isLoading} 
                  > 
                    Cancel 
                  </button> 
                  <button 
                    onClick={handleSaveQuestions} 
                    className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors duration-200 disabled:opacity-50 sm:text-sm" 
                    disabled={isLoading} 
                  > 
                    {isLoading ? 'Saving...' : 'Save Questions'} 
                  </button> 
                </div> 
              </div> 
            </div> 
          </div> 
        )} 

        {modalState.type === 'viewQuestions' && selectedExam && ( 
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"> 
            <div className="bg-white rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] overflow-y-auto"> 
              <div className="p-6"> 
                <div className="flex justify-between items-start mb-4"> 
                  <div> 
                    <h3 className="text-xl font-bold text-gray-800 sm:text-lg"> 
                      Questions for {selectedExam.name} 
                    </h3> 
                    <p className="text-sm text-gray-600 sm:text-sm"> 
                      {questions.length} question(s) 
                    </p> 
                  </div> 
                  <button 
                    onClick={closeViewQuestionsModal} 
                    className="text-gray-500 hover:text-gray-700" 
                    disabled={isLoading} 
                  > 
                    <X size={24} /> 
                  </button> 
                </div> 

                {error && ( 
                  <div className="mb-4 p-3 bg-red-100 border-l-4 border-red-500 text-red-700"> 
                    <p>{error}</p> 
                  </div> 
                )} 

                <div className="space-y-4"> 
                  {questions.length > 0 ? ( 
                    questions.map((question) => ( 
                      <div key={question.$id} className="p-4 border border-gray-200 rounded-lg bg-white"> 
                        <div className="flex justify-between items-start"> 
                          <div> 
                            <h4 className="font-medium text-gray-800 sm:text-sm"> 
                              Question {question.order || 'N/A'} (Marks: {question.marks || 'N/A'}) 
                            </h4> 
                            <p className="text-sm text-gray-700 mt-1 sm:text-sm">{question.text}</p> 
                          </div> 
                          <div className="flex items-center space-x-2"> 
                            <span className={`px-2 py-1 rounded-full text-sm sm:text-xs ${ 
                              question.difficulty === "easy"  
                                ? "bg-green-100 text-green-800"  
                                : question.difficulty === "medium" 
                                ? "bg-yellow-100 text-yellow-800" 
                                : "bg-red-100 text-red-800" 
                            }`}> 
                              {question.difficulty || "N/A"} 
                            </span> 
                          </div> 
                        </div> 
                        <div className="mt-1 text-sm text-gray-600 sm:text-xs"> 
                          <span className="mr-2">ID: {question.question_id || "N/A"}</span> 
                          <span>Type: {question.type || "N/A"}</span> 
                          {question.tags && question.tags.length > 0 && ( 
                            <div className="mt-1 flex flex-wrap gap-1"> 
                              {question.tags.map(tag => ( 
                                <span key={tag} className="px-2 py-0.5 bg-gray-100 text-gray-700 rounded-full text-xs sm:text-xs"> 
                                  {tag} 
                                </span> 
                              ))} 
                            </div> 
                          )} 
                        </div> 
                        {question.options_text && ( 
                          <div className="mt-3 grid grid-cols-1 sm:grid-cols-2 gap-2"> 
                            {question.options_text.map((option, index) => ( 
                              <div  
                                key={index}  
                                className={`text-sm p-2 rounded ${ 
                                  question.correct_answer === index  
                                    ? "bg-green-100 text-green-800"  
                                    : "bg-gray-100 text-gray-800" 
                                }`} 
                              > 
                                {option} 
                              </div> 
                            ))} 
                          </div> 
                        )} 
                      </div> 
                    )) 
                  ) : ( 
                    <div className="text-center py-8 text-gray-500"> 
                      No questions found for this exam 
                    </div> 
                  )} 
                </div> 

                <div className="mt-6 flex justify-end"> 
                  <button 
                    onClick={closeViewQuestionsModal} 
                    className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors duration-200 sm:text-sm" 
                    disabled={isLoading} 
                  > 
                    Close 
                  </button> 
                </div> 
              </div> 
            </div> 
          </div> 
        )} 

        {selectedExamDetail && ( 
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"> 
            <div className="bg-white rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] overflow-y-auto"> 
              <div className="p-6"> 
                <div className="flex justify-between items-start mb-4"> 
                  <div> 
                    <h3 className="text-xl font-bold text-gray-800 sm:text-lg">{selectedExamDetail.name}</h3> 
                    <p className="text-sm text-gray-600 sm:text-xs">{selectedExamDetail.exam_id}</p> 
                  </div> 
                  <div className="flex items-center space-x-3 gap-2 sm:gap-2"> 
                    <span className={`px-2 py-1 rounded-full text-sm font-semibold sm:text-xs ${ 
                      selectedExamDetail.status === "active"  
                        ? "bg-blue-100 text-blue-800"  
                        : selectedExamDetail.status === "completed" 
                        ? "bg-green-100 text-green-800" 
                        : "bg-gray-100 text-gray-800" 
                    }`}> 
                      {selectedExamDetail.status} 
                    </span> 
                    <span className={`px-2 py-1 rounded-full text-sm font-semibold sm:text-xs ${ 
                      getExamStatus(selectedExamDetail.exam_date) === "Expired"  
                        ? "bg-red-100 text-red-800"  
                        : "bg-green-100 text-green-800" 
                    }`}> 
                      {getExamStatus(selectedExamDetail.exam_date)} 
                    </span> 
                    <button 
                      onClick={closeExamDetails} 
                      className="text-gray-500 hover:text-gray-700" 
                    > 
                      <X size={24} /> 
                    </button> 
                  </div> 
                </div> 

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-4"> 
                  <div> 
                    <label className="block text-sm font-semibold text-gray-700">Exam Date:</label> 
                    <p className="mt-1 text-sm text-gray-800 sm:mt-0.5">{formatDateTimeUTC(selectedExamDetail.exam_date)}</p> 
                  </div> 
                  <div> 
                    <label className="block text-sm font-semibold text-gray-700">Duration:</label> 
                    <p className="mt-1 text-sm text-gray-800 sm:mt-0.5">{formatDuration(selectedExamDetail.duration)}</p> 
                  </div> 
                  <div className="md:col-span-2"> 
                    <label className="block text-sm font-semibold text-gray-700">Description:</label> 
                    <p className="mt-1 text-sm text-gray-800 sm:mt-0.5 whitespace-pre-line"> 
                      {selectedExamDetail.description || "No description provided"} 
                    </p> 
                  </div> 
                  <div> 
                    <label className="block text-sm font-semibold text-gray-700">Controller:</label> 
                    <p className="mt-1 text-sm text-gray-800 sm:mt-0.5">
                      {selectedExamDetail.controller_name || "Not assigned"}
                      {selectedExamDetail.controller_email && (
                        <span className="block text-gray-600">{selectedExamDetail.controller_email}</span>
                      )}
                    </p> 
                  </div> 
                  <div> 
                    <label className="block text-sm font-semibold text-gray-700">Created By:</label> 
                    <p className="mt-1 text-sm text-gray-800 sm:mt-0.5">{selectedExamDetail.created_by || "Unknown"}</p> 
                  </div> 
                  <div> 
                    <label className="block text-sm font-semibold text-gray-700">Last Modified:</label> 
                    <p className="mt-1 text-sm text-gray-800 sm:mt-0.5">{formatDateTimeUTC(selectedExamDetail.modified_at)}</p> 
                  </div> 
                  <div className="md:col-span-2"> 
                    <label className="block text-sm font-semibold text-gray-700">Document ID:</label> 
                    <p className="mt-1 text-sm text-gray-800 sm:mt-0.5 text-xs sm:text-sm break-all">{selectedExamDetail.$id}</p> 
                  </div> 
                </div> 

                <div className="mt-6 flex justify-end"> 
                  <button 
                    onClick={closeExamDetails} 
                    className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors duration-200 sm:text-sm sm:px-2 sm:p-1.5" 
                  > 
                    Close 
                  </button> 
                </div> 
              </div> 
            </div> 
          </div> 
        )} 
      </div> 
    </div> 
  ); 
}; 

export default ExamsPage;-e [1;34m===== ./pages/admin/students.jsx =====[0m
import React, { useState, useCallback, useEffect, useMemo, useRef, Suspense } from "react";
import { databases, account, ID, Query } from "../../utils/appwrite";
import { Plus, Edit, Trash2, Eye, Search, ChevronLeft, ChevronRight, Download, X } from "lucide-react";
import { React as ReactLazy } from "react";
import { lazy } from "react";
import Modal from "../../components/Modal";

const STUDENTS_PER_PAGE = 20;

const Students = () => {
  const [students, setStudents] = useState([]);
  const [courses, setCourses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [editingStudent, setEditingStudent] = useState(null);
  const [modalOpen, setModalOpen] = useState(false);
  const [viewModalOpen, setViewModalOpen] = useState(false);
  const [viewingStudent, setViewingStudent] = useState(null);
  const [user, setUser] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [filterCourseId, setFilterCourseId] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [selectedStudents, setSelectedStudents] = useState([]);
  const [isExportMenuOpen, setIsExportMenuOpen] = useState(false);

  const exportButtonRef = useRef(null);

  const DATABASE_ID = "67a5a946002e8a51f8fe";
  const STUDENTS_COLLECTION_ID = "students";
  const COURSES_COLLECTION_ID = "course";

  const initialFormData = {
    name: "",
    email: "",
    password: "",
    status: "active",
    course_id: "",
    student_id: "",
  };

  const [formData, setFormData] = useState(initialFormData);

  const resolveRelationshipId = (field) => {
    if (!field) return null;
    if (typeof field === "object" && field.$id) return field.$id;
    if (Array.isArray(field) && field.length > 0) {
      const id = field[0]?.$id || field[0];
      return id;
    }
    return field;
  };

  const getCourseName = async (courseId, retry = false) => {
    const resolvedId = resolveRelationshipId(courseId);
    if (!resolvedId) return "Not assigned";
    let course = courses.find((c) => c.$id === resolvedId);
    if (!course && !retry) {
      try {
        const coursesRes = await databases.listDocuments(DATABASE_ID, COURSES_COLLECTION_ID, [
          Query.equal("status", "active"),
          Query.limit(100),
        ]);
        setCourses(coursesRes.documents);
        course = coursesRes.documents.find((c) => c.$id === resolvedId);
        if (course) return course.course_name;
      } catch (error) {
        console.error("getCourseName: Error refetching courses", error);
      }
      return "Not assigned";
    }
    return course ? course.course_name : "Not assigned";
  };

  const fetchAllData = useCallback(async () => {
    setLoading(true);
    setError("");
    try {
      const [coursesRes, studentsRes, userRes] = await Promise.all([
        databases.listDocuments(DATABASE_ID, COURSES_COLLECTION_ID, [
          Query.equal("status", "active"),
          Query.orderDesc("$createdAt"),
          Query.limit(100),
        ]),
        databases.listDocuments(DATABASE_ID, STUDENTS_COLLECTION_ID, [
          Query.orderDesc("$createdAt"),
          Query.limit(100),
        ]),
        account.get(),
      ]);

      console.log("Fetched courses:", coursesRes.documents.map((c) => ({
        id: c.$id,
        name: c.course_name,
      })));
      setCourses(coursesRes.documents);
      setUser(userRes);

      const formattedStudents = await Promise.all(
        studentsRes.documents.map(async (student) => ({
          id: student.$id,
          name: student.name,
          email: student.email,
          password: student.password || "",
          student_id: student.student_id,
          status: student.status,
          course_id: resolveRelationshipId(student.course_id),
          course_name: await getCourseName(student.course_id),
          raw_course_id: student.course_id,
          registered_by: student.registered_by || userRes?.name || "Unknown",
          registered_date: student.registered_at
            ? new Date(student.registered_at).toLocaleDateString()
            : new Date(student.$createdAt).toLocaleDateString(),
        }))
      );

      console.log("Formatted students:", formattedStudents.map((s) => ({
        id: s.id,
        name: s.name,
        email: s.email,
        course_id: s.course_id,
        course_name: s.course_name,
        raw_course_id: s.raw_course_id,
      })));
      setStudents(formattedStudents);
    } catch (error) {
      console.error("Error fetching data:", error);
      setError("Failed to load data: " + error.message);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchAllData();
  }, [fetchAllData]);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (exportButtonRef.current && !exportButtonRef.current.contains(event.target)) {
        setIsExportMenuOpen(false);
      }
    };

    if (isExportMenuOpen) {
      document.addEventListener("mousedown", handleClickOutside);
    }
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [isExportMenuOpen]);

  const generateStudentId = (courseId) => {
    const year = new Date().getFullYear();
    const randomNum = Math.floor(100000000000 + Math.random() * 900000000000).toString().padStart(12, '0');
    if (!courseId) return `STUD-${year}-${randomNum}`;
    const course = courses.find((c) => c.$id === courseId);
    if (!course) return `STUD-${year}-${randomNum}`;
    const courseName = course.course_name.replace(/[^a-zA-Z0-9]/g, "");
    const coursePrefix = courseName.slice(0, 3).toUpperCase();
    return `${coursePrefix}-${year}-${randomNum}`;
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
      ...(name === "course_id" ? { student_id: generateStudentId(value) } : {}),
    }));
    if (error) setError("");
  };

  const validateForm = () => {
    if (!formData.name.trim()) {
      setError("Please provide a name");
      return false;
    }
    if (!formData.email.trim() || !/^\S+@\S+\.\S+$/.test(formData.email)) {
      setError("Please provide a valid email");
      return false;
    }
    if (!editingStudent && !formData.password) {
      setError("Password is required for new students");
      return false;
    }
    return true;
  };

  const handleSave = async () => {
    if (!validateForm()) return;
    setLoading(true);
    setError("");
    try {
      const studentData = {
        name: formData.name.trim(),
        email: formData.email.trim(),
        student_id: formData.student_id || generateStudentId(formData.course_id),
        status: formData.status,
        course_id: formData.course_id || null,
        registered_by: user?.$id || "Admin",
        registered_at: new Date().toISOString(),
      };
      if (formData.password) {
        studentData.password = formData.password;
      }
      if (editingStudent) {
        await databases.updateDocument(DATABASE_ID, STUDENTS_COLLECTION_ID, editingStudent.id, studentData);
      } else {
        await databases.createDocument(DATABASE_ID, STUDENTS_COLLECTION_ID, ID.unique(), studentData);
      }
      await fetchAllData();
      closeModal();
    } catch (error) {
      console.error("Error saving student:", error);
      setError(`Error saving student: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  const handleBulkDelete = async () => {
    if (!window.confirm(`Are you sure you want to delete ${selectedStudents.length} students?`)) return;
    setLoading(true);
    try {
      await Promise.all(
        selectedStudents.map((studentId) =>
          databases.deleteDocument(DATABASE_ID, STUDENTS_COLLECTION_ID, studentId)
        )
      );
      setSelectedStudents([]);
      await fetchAllData();
    } catch (error) {
      console.error("Bulk delete error:", error);
      setError("Failed to delete selected students");
    } finally {
      setLoading(false);
    }
  };

  const handleSelectStudent = (studentId) => {
    setSelectedStudents((prev) =>
      prev.includes(studentId)
        ? prev.filter((id) => id !== studentId)
        : [...prev, studentId]
    );
  };

  const handleSelectAll = (e) => {
    if (e.target.checked) {
      setSelectedStudents(displayedStudents.map((student) => student.id));
    } else {
      setSelectedStudents([]);
    }
  };

  const handleDelete = async (id) => {
    if (!window.confirm("Are you sure you want to delete this student?")) return;
    setLoading(true);
    setError("");
    try {
      await databases.deleteDocument(DATABASE_ID, STUDENTS_COLLECTION_ID, id);
      await fetchAllData();
      if (editingStudent && editingStudent.id === id) closeModal();
    } catch (error) {
      console.error("Error deleting student:", error);
      setError(`Error deleting student: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  const handleExport = async (format) => {
    setIsExportMenuOpen(false);
    if (filteredStudents.length === 0) {
      setError("No students available to export.");
      return;
    }
    try {
      const exportData = filteredStudents.map((student) => ({
        "Student ID": student.student_id,
        Name: student.name,
        Email: student.email,
        Course: student.course_name || "Not assigned",
        Status: student.status,
        Password: student.password || "",
        "Registered By": student.registered_by,
        "Registration Date": student.registered_date,
      }));
      if (format === "csv") {
        const { Parser } = await import("json2csv");
        const fields = ["Student ID", "Name", "Email", "Course", "Status", "Password", "Registered By", "Registration Date"];
        const parser = new Parser({ fields });
        const csv = parser.parse(exportData);
        const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
        const url = URL.createObjectURL(blob);
        const link = document.createElement("a");
        link.setAttribute("href", url);
        link.setAttribute("download", `students_${new Date().toISOString().slice(0, 10)}.csv`);
        link.click();
        URL.revokeObjectURL(url);
      } else if (format === "xls") {
        const { utils, writeFile } = await import("xlsx");
        const ws = utils.json_to_sheet(exportData);
        const wb = utils.book_new();
        utils.book_append_sheet(wb, ws, "Students");
        writeFile(wb, `students_${new Date().toISOString().slice(0, 10)}.xlsx`);
      }
    } catch (error) {
      console.error(`Error exporting to ${format.toUpperCase()}:`, error);
      setError(`Failed to export to ${format.toUpperCase()}: ${error.message}`);
    }
  };

  const openModal = (student = null) => {
    setError("");
    if (student) {
      setEditingStudent(student);
      setFormData({
        name: student.name,
        email: student.email,
        password: student.password || "",
        student_id: student.student_id,
        status: student.status,
        course_id: student.course_id || "",
      });
    } else {
      setEditingStudent(null);
      setFormData(initialFormData);
    }
    setModalOpen(true);
  };

  const closeModal = () => {
    setModalOpen(false);
    setEditingStudent(null);
    setFormData(initialFormData);
    setError("");
  };

  const openViewModal = (student) => {
    setViewingStudent(student);
    setViewModalOpen(true);
  };

  const closeViewModal = () => {
    setViewModalOpen(false);
    setViewingStudent(null);
  };

  const modalFields = [
    { name: "name", label: "Full Name*", type: "text", required: true, placeholder: "Enter full name" },
    { name: "email", label: "Email*", type: "email", required: true, placeholder: "Enter email" },
    {
      name: "password",
      label: `Password${editingStudent ? "" : "*"}`,
      type: "text",
      required: !editingStudent,
      placeholder: editingStudent ? "Leave blank to keep current" : "Enter password",
    },
    {
      name: "course_id",
      label: "Course",
      type: "select",
      options: courses.map((course) => ({ value: course.$id, label: course.course_name })),
      required: false,
      disabled: courses.length === 0,
    },
    { name: "student_id", label: "Student ID", type: "text", readOnly: true },
    {
      name: "status",
      label: "Status",
      type: "select",
      options: ["active", "inactive"],
      required: true,
    },
  ];

  const modalPosition = {
    top: "10vh",
    bottom: "10vh",
    left: "25vw",
    right: "15vw",
  };

  const filteredStudents = useMemo(() => {
    return students.filter(
      (student) =>
        (filterCourseId === "" || student.course_id === filterCourseId) &&
        (student.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
         student.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
         student.student_id.toLowerCase().includes(searchTerm.toLowerCase()))
    );
  }, [students, searchTerm, filterCourseId]);

  const totalPages = Math.ceil(filteredStudents.length / STUDENTS_PER_PAGE);
  const indexOfLastStudent = currentPage * STUDENTS_PER_PAGE;
  const indexOfFirstStudent = indexOfLastStudent - STUDENTS_PER_PAGE;
  const displayedStudents = useMemo(
    () => filteredStudents.slice(indexOfFirstStudent, indexOfLastStudent),
    [filteredStudents, indexOfFirstStudent, indexOfLastStudent]
  );

  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
    setCurrentPage(1);
    setSelectedStudents([]);
  };

  const paginate = (pageNumber) => {
    setCurrentPage(pageNumber);
    setSelectedStudents([]);
  };

  const allStudentsSelected = displayedStudents.length > 0 && selectedStudents.length === displayedStudents.length;

  const truncateCourseName = (name) => {
    if (!name || name === "Not assigned") return name;
    return name.length > 18 ? `${name.slice(0, 15)}...` : name;
  };

  const truncateStudentId = (id) => {
    if (!id) return id;
    return id.length > 15 ? `${id.slice(0, 12)}...` : id;
  };

  return (
    <div className="w-full">
      <div className="bg-white rounded-lg shadow-md p-4 sm:p-6">
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-3">
          <h2 className="text-2xl sm:text-3xl font-extrabold text-gray-800">Manage Students</h2>
          <div className="flex flex-wrap gap-2">
            {selectedStudents.length > 0 && (
              <button
                className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md transition-colors duration-200 flex items-center gap-2 text-base font-semibold shadow-sm"
                onClick={handleBulkDelete}
                disabled={loading}
              >
                <Trash2 size={18} />
                <span>Delete Selected ({selectedStudents.length})</span>
              </button>
            )}
            <button
              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition-colors duration-200 flex items-center gap-2 text-base font-semibold shadow-sm"
              onClick={() => {
                if (!user) {
                  setError("User data is still loading. Please wait before adding a student.");
                  return;
                }
                openModal();
              }}
              disabled={loading || !user}
            >
              <Plus size={18} />
              <span>Add Student</span>
            </button>
            <div className="relative" ref={exportButtonRef}>
              <button
                className="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-md transition-colors duration-200 flex items-center gap-2 text-base font-semibold shadow-sm"
                onClick={() => setIsExportMenuOpen(!isExportMenuOpen)}
              >
                <Download size={18} />
                <span>Export</span>
              </button>
              {isExportMenuOpen && (
                <div className="absolute right-0 mt-2 w-32 bg-white rounded-md shadow-lg z-10 border border-gray-200">
                  <button
                    className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                    onClick={() => handleExport("csv")}
                  >
                    Export to CSV
                  </button>
                  <button
                    className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                    onClick={() => handleExport("xls")}
                  >
                    Export to XLS
                  </button>
                </div>
              )}
            </div>
          </div>
        </div>

        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-6" role="alert">
            <strong className="font-bold">Error:</strong>
            <span className="block sm:inline ml-2">{error}</span>
          </div>
        )}

        <div className="mb-4 flex flex-col sm:flex-row items-start sm:items-center gap-3">
          <label htmlFor="course_filter" className="text-sm font-semibold text-gray-700 whitespace-nowrap">Filter by Course:</label>
          <select
            id="course_filter"
            value={filterCourseId}
            onChange={(e) => setFilterCourseId(e.target.value)}
            className="mt-1 block w-full sm:w-auto px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-gray-800 bg-gray-50"
          >
            <option value="">All Courses</option>
            {courses.map((course) => (
              <option key={course.$id} value={course.$id}>
                {course.course_name}
              </option>
            ))}
          </select>
          {filterCourseId && (
            <button
              onClick={() => setFilterCourseId("")}
              className="bg-gray-200 text-gray-700 px-3 py-1.5 rounded-md hover:bg-gray-300 transition-colors duration-200 flex items-center gap-1 text-sm shadow-sm"
            >
              <X size={16} />
              Clear Filter
            </button>
          )}
          <div className="relative flex-grow sm:ml-4 w-full sm:w-auto">
            <label htmlFor="main_search" className="sr-only">Search Students</label>
            <input
              type="text"
              id="main_search"
              placeholder="Search by name, email, or ID..."
              value={searchTerm}
              onChange={handleSearchChange}
              className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-gray-800 bg-gray-50 pl-10"
            />
            <Search size={20} className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 mt-0.5" />
          </div>
        </div>

        {loading ? (
          <div className="flex justify-center items-center h-64">
            <p className="text-xl text-gray-600">Loading...</p>
          </div>
        ) : (
          <>
            <div className="overflow-x-auto rounded-lg shadow-sm border border-gray-200">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left">
                      <input
                        type="checkbox"
                        className="rounded text-blue-600 focus:ring-blue-500 h-4 w-4"
                        onChange={handleSelectAll}
                        checked={allStudentsSelected}
                        disabled={displayedStudents.length === 0}
                      />
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Sr. No.</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider hidden sm:table-cell">Email</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Student ID</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Course</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider hidden md:table-cell">Status</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {displayedStudents.length > 0 ? (
                    displayedStudents.map((student, index) => (
                      <tr key={student.id} className={`hover:bg-gray-50 transition-colors duration-150 ${student.status === "inactive" ? "bg-gray-100 opacity-70" : ""}`}>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <input
                            type="checkbox"
                            className="rounded text-blue-600 focus:ring-blue-500 h-4 w-4"
                            checked={selectedStudents.includes(student.id)}
                            onChange={() => handleSelectStudent(student.id)}
                          />
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{indexOfFirstStudent + index + 1}</td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="text-sm font-medium text-gray-900">{student.name}</div>
                          <div className="text-xs text-gray-500 sm:hidden">{student.email}</div>
                          <div className="text-xs text-gray-500 sm:hidden">{truncateCourseName(student.course_name)}</div>
                          <div className="text-xs text-gray-500 sm:hidden">Status: {student.status}</div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600 hidden sm:table-cell">{student.email}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600">{truncateStudentId(student.student_id)}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600">{truncateCourseName(student.course_name)}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600 hidden md:table-cell">
                          <span
                            className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                              student.status === "active" ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800"
                            }`}
                          >
                            {student.status}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600">
                          <div className="flex items-center gap-1 sm:gap-2">
                            <button
                              className="bg-gray-500 text-white p-1 rounded-md hover:bg-gray-600 transition-colors duration-200"
                              onClick={() => openViewModal(student)}
                              title="View"
                            >
                              <Eye size={16} className="w-4 h-4" />
                            </button>
                            <button
                              className="bg-yellow-500 text-white p-1 rounded-md hover:bg-yellow-600 transition-colors duration-200"
                              onClick={() => openModal(student)}
                              title="Edit"
                            >
                              <Edit size={16} className="w-4 h-4" />
                            </button>
                            <button
                              className="bg-red-500 text-white p-1 rounded-md hover:bg-red-600 transition-colors duration-200"
                              onClick={() => handleDelete(student.id)}
                              title="Delete"
                            >
                              <Trash2 size={16} className="w-4 h-4" />
                            </button>
                          </div>
                        </td>
                      </tr>
                    ))
                  ) : (
                    <tr>
                      <td colSpan="8" className="text-center py-10 text-gray-500 text-lg">
                        {searchTerm || filterCourseId ? "No students match your search or filter." : "No students found."}
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
            {totalPages > 1 && (
              <div className="mt-6 flex justify-center items-center space-x-2">
                <button
                  onClick={() => paginate(currentPage - 1)}
                  disabled={currentPage === 1}
                  className="p-2 rounded-md bg-gray-200 hover:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <ChevronLeft size={20} />
                </button>
                {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (
                  <button
                    key={page}
                    onClick={() => paginate(page)}
                    className={`px-4 py-2 rounded-md text-sm ${
                      currentPage === page ? "bg-blue-600 text-white" : "bg-gray-200 hover:bg-gray-300"
                    }`}
                  >
                    {page}
                  </button>
                ))}
                <button
                  onClick={() => paginate(currentPage + 1)}
                  disabled={currentPage === totalPages}
                  className="p-2 rounded-md bg-gray-200 hover:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <ChevronRight size={20} />
                </button>
              </div>
            )}
          </>
        )}

        {modalOpen && (
          <Suspense fallback={<div className="flex justify-center items-center h-32">Loading...</div>}>
          <Modal
            title={editingStudent ? "Edit Student" : "Add New Student"}
            onClose={closeModal}
            onSave={handleSave}
            initialData={formData}
            fields={modalFields}
            isLoading={loading}
            error={error}
            onChange={handleInputChange}
            customPosition={modalPosition}
          />
          </Suspense>
        )}

        {viewModalOpen && viewingStudent && (
          <div className="fixed inset-0 z-50 bg-gray-900 bg-opacity-75 transition-opacity flex items-center justify-center">
            <div
              className="bg-white rounded-lg shadow-xl p-6 overflow-y-auto"
              style={{ position: "fixed", top: modalPosition.top, left: modalPosition.left, right: modalPosition.right, bottom: modalPosition.bottom }}
            >
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-xl font-semibold text-gray-800">Student Details</h3>
                <button onClick={closeViewModal} className="text-gray-500 hover:text-gray-700" aria-label="Close modal">
                  <XCircle size={24} />
                </button>
              </div>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700">Name:</label>
                  <p className="mt-1 text-gray-900 bg-gray-50 p-2 rounded">{viewingStudent.name}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">Email:</label>
                  <p className="mt-1 text-gray-900 bg-gray-50 p-2 rounded">{viewingStudent.email}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">Student ID:</label>
                  <p className="mt-1 text-gray-900 bg-gray-50 p-2 rounded">{viewingStudent.student_id}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">Course:</label>
                  <p className="mt-1 text-gray-900 bg-gray-50 p-2 rounded">{viewingStudent.course_name}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">Status:</label>
                  <p className="mt-1 text-gray-900 bg-gray-50 p-2 rounded capitalize">{viewingStudent.status}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">Password:</label>
                  <p className="mt-1 text-gray-900 bg-gray-50 p-2 rounded">{viewingStudent.password || "N/A"}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">Registered By:</label>
                  <p className="mt-1 text-gray-900 bg-gray-50 p-2 rounded">{viewingStudent.registered_by}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">Registration Date:</label>
                  <p className="mt-1 text-gray-900 bg-gray-50 p-2 rounded">{viewingStudent.registered_date}</p>
                </div>
              </div>
              <div className="mt-6 flex justify-end">
                <button
                  onClick={closeViewModal}
                  className="bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2 rounded-lg transition-colors"
                >
                  Close
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

const XCircle = ({ size = 24, className = "" }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width={size}
    height={size}
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    strokeWidth="2"
    strokeLinecap="round"
    strokeLinejoin="round"
    className={className}
  >
    <circle cx="12" cy="12" r="10"></circle>
    <line x1="15" y1="9" x2="9" y2="15"></line>
    <line x1="9" y1="9" x2="15" y2="15"></line>
  </svg>
);

export default Students;-e [1;34m===== ./pages/admin/exam-enrollments.jsx =====[0m
import React, { useState, useEffect, useRef, useCallback, useMemo, Suspense } from "react";
import { databases } from "../../utils/appwrite"; // Assuming this path is correct
import { Plus, Edit, Trash2, Eye, Search, X, Download } from "lucide-react";
import { Query } from "appwrite";
import Modal from "../../components/Modal";
import { formatDateTimeUTC, formatDateUTC } from "../../utils/date";

// Custom Confirmation Dialog Component
const ConfirmationDialog = ({ isOpen, title, message, onConfirm, onCancel, confirmText = "Confirm", cancelText = "Cancel" }) => {
    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 bg-black bg-opacity-60 flex justify-center items-center z-50 p-4">
            <div className="bg-white rounded-xl shadow-2xl p-6 w-full max-w-sm transform transition-all duration-300 scale-100 opacity-100">
                <h3 className="text-xl font-bold text-gray-800 mb-4">{title}</h3>
                <p className="text-gray-700 mb-6">{message}</p>
                <div className="flex justify-end gap-3">
                    <button
                        onClick={onCancel}
                        className="bg-gray-500 text-white px-5 py-2 rounded-lg hover:bg-gray-600 transition-colors duration-200 shadow-md"
                    >
                        {cancelText}
                    </button>
                    <button
                        onClick={onConfirm}
                        className="bg-red-600 text-white px-5 py-2 rounded-lg hover:bg-red-700 transition-colors duration-200 shadow-md"
                    >
                        {confirmText}
                    </button>
                </div>
            </div>
        </div>
    );
};

// Custom Message Dialog Component (for alerts)
const MessageDialog = ({ isOpen, title, message, onClose, closeText = "Close" }) => {
    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 bg-black bg-opacity-60 flex justify-center items-center z-50 p-4">
            <div className="bg-white rounded-xl shadow-2xl p-6 w-full max-w-sm transform transition-all duration-300 scale-100 opacity-100">
                <h3 className="text-xl font-bold text-gray-800 mb-4">{title}</h3>
                <p className="text-gray-700 mb-6">{message}</p>
                <div className="flex justify-end">
                    <button
                        onClick={onClose}
                        className="bg-blue-600 text-white px-5 py-2 rounded-lg hover:bg-blue-700 transition-colors duration-200 shadow-md"
                    >
                        {closeText}
                    </button>
                </div>
            </div>
        </div>
    );
};

const ExamEnrollment = () => {
    const [enrollments, setEnrollments] = useState([]);
    const [students, setStudents] = useState([]);
    const [exams, setExams] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    // --- Modal States ---
    const [modalOpen, setModalOpen] = useState(false);
    const [viewModalOpen, setViewModalOpen] = useState(false);
    const [bulkModalOpen, setBulkModalOpen] = useState(false);
    const [confirmDialogOpen, setConfirmDialogOpen] = useState(false);
    const [messageDialogOpen, setMessageDialogOpen] = useState(false);
    const [dialogContent, setDialogContent] = useState({ title: "", message: "", onConfirm: () => {}, onCancel: () => {} });

    // --- Export State ---
    const [isExportMenuOpen, setIsExportMenuOpen] = useState(false);

    // --- Data States ---
    const [editingEnrollment, setEditingEnrollment] = useState(null);
    const [viewingEnrollment, setViewingEnrollment] = useState(null);
    const [selectedStudents, setSelectedStudents] = useState(new Set());
    const [selectedEnrollments, setSelectedEnrollments] = useState(new Set());
    const [selectedExamForBulk, setSelectedExamForBulk] = useState("");
    const [searchTerm, setSearchTerm] = useState("");
    const [filterExamId, setFilterExamId] = useState("");
    const [mainSearchTerm, setMainSearchTerm] = useState("");

    // --- Refs ---
    const modalRef = useRef(null);
    const viewModalRef = useRef(null);
    const bulkModalRef = useRef(null);
    const exportButtonRef = useRef(null);

    // --- Initial Form Data ---
    const initialFormData = {
        student_id: "",
        exam_id: "",
        enrolled_at: new Date().toISOString().slice(0, 16),
    };
    const [formData, setFormData] = useState(initialFormData);

    // --- Fetch Data on Mount ---
    useEffect(() => {
        fetchAllData();
    }, []);

    // --- Close Export Menu on Click Outside ---
    useEffect(() => {
        const handleClickOutside = (event) => {
            if (exportButtonRef.current && !exportButtonRef.current.contains(event.target)) {
                setIsExportMenuOpen(false);
            }
        };

        if (isExportMenuOpen) {
            document.addEventListener("mousedown", handleClickOutside);
        }
        return () => {
            document.removeEventListener("mousedown", handleClickOutside);
        };
    }, [isExportMenuOpen]);

    // --- Fetch All Data ---
    const fetchAllData = useCallback(async () => {
        setLoading(true);
        setError(null);
        try {
            const [enrollmentsResponse, studentsResponse, examsResponse] =
                await Promise.all([
                    databases.listDocuments(
                        process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
                        process.env.NEXT_PUBLIC_APPWRITE_ENROLLMENTS_COLLECTION_ID,
                        [Query.orderDesc("$createdAt"), Query.limit(1000)]
                    ),
                    databases.listDocuments(
                        process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
                        process.env.NEXT_PUBLIC_APPWRITE_STUDENTS_COLLECTION_ID,
                        [
                            Query.orderDesc("$createdAt"),
                            Query.limit(5000),
                        ]
                    ),
                    databases.listDocuments(
                        process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
                        process.env.NEXT_PUBLIC_APPWRITE_EXAMS_COLLECTION_ID,
                        [Query.orderDesc("$createdAt"), Query.limit(1000)]
                    ),
                ]);

            const studentMap = new Map(
                studentsResponse.documents.map((student) => [
                    student.$id,
                    student,
                ])
            );
            const examMap = new Map(
                examsResponse.documents.map((exam) => [exam.$id, exam])
            );

            const normalizedEnrollments = enrollmentsResponse.documents.map(
                (enrollment) => {
                    let studentLookupKey = Array.isArray(enrollment.student_id)
                        ? enrollment.student_id[0]
                        : enrollment.student_id;

                    if (typeof studentLookupKey === 'object' && studentLookupKey !== null && studentLookupKey.$id) {
                        studentLookupKey = studentLookupKey.$id;
                    }
                    const student = studentMap.get(studentLookupKey);
                    if (!student && studentLookupKey) {
                        console.error(`Student NOT FOUND for ID: ${studentLookupKey} (Enrollment: ${enrollment.$id})`);
                    }

                    let examLookupKey = Array.isArray(enrollment.exam_id)
                        ? enrollment.exam_id[0]
                        : enrollment.exam_id;

                    if (typeof examLookupKey === 'object' && examLookupKey !== null && examLookupKey.$id) {
                        examLookupKey = examLookupKey.$id;
                    }
                    const exam = examMap.get(examLookupKey);
                    if (!exam && examLookupKey) {
                        console.error(`Exam NOT FOUND for ID: ${examLookupKey} (Enrollment: ${enrollment.$id})`);
                    }

                    const rawAppwriteStatus = enrollment.status; 
                    let appearance_status_display = "Not Appeared"; 
                    if (rawAppwriteStatus === 'appeared') {
                        appearance_status_display = "Appeared";
                    } else if (rawAppwriteStatus === 'not_appeared') {
                        appearance_status_display = "Not Appeared";
                    }
                    
                    return {
                        id: enrollment.$id,
                        enrollment_id: enrollment.enrollment_id, // Keep for other uses (export, view modal)
                        student_id: student?.$id || studentLookupKey || 'N/A',
                        student_name: student?.name || 'Unknown Student',
                        student_email: student?.email || '',
                        exam_id: exam?.$id || examLookupKey || 'N/A',
                        exam_name: exam?.name || 'Unknown Exam',
                        exam_description: exam?.description || '',
                        exam_date: exam?.exam_date ? formatDateUTC(exam.exam_date) : 'N/A',
                        enrolled_at: enrollment.enrolled_at ? formatDateTimeUTC(enrollment.enrolled_at) : 'N/A',
                        raw_enrolled_at: enrollment.enrolled_at,
                        appearance_status_display,
                        raw_appwrite_status: rawAppwriteStatus,
                    };
                }
            );

            setEnrollments(normalizedEnrollments);
            setStudents(studentsResponse.documents);
            setExams(examsResponse.documents);
            setSelectedEnrollments(new Set());
        } catch (error) {
            setError(error.message);
            console.error("Error fetching data:", error);
        } finally {
            setLoading(false);
        }
    }, []);

    // --- Export to CSV ---
    const exportToCSV = async () => {
        try {
            const { Parser } = await import('json2csv');
            const fields = [
                { label: 'Enrollment ID', value: 'enrollment_id' },
                { label: 'Student Name', value: 'student_name' },
                { label: 'Student Email', value: 'student_email' },
                { label: 'Exam Name', value: 'exam_name' },
                { label: 'Exam Date', value: 'exam_date' },
                { label: 'Status', value: 'appearance_status_display' },
                { label: 'Enrolled At', value: 'enrolled_at' },
            ];
            const parser = new Parser({ fields });
            const csv = parser.parse(filteredEnrollments);
            const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
            const url = URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.setAttribute('href', url);
            link.setAttribute('download', `enrollments_${new Date().toISOString().slice(0, 10)}.csv`);
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(url);
        } catch (error) {
            console.error('Error exporting to CSV:', error);
            setDialogContent({
                title: "Export Error",
                message: `Failed to export to CSV: ${error.message}`,
                onClose: () => setMessageDialogOpen(false)
            });
            setMessageDialogOpen(true);
        }
    };

    // --- Export to XLS ---
    const exportToXLS = async () => {
        try {
            const { utils, writeFile } = await import('xlsx');
            const data = filteredEnrollments.map(enrollment => ({
                'Enrollment ID': enrollment.enrollment_id,
                'Student Name': enrollment.student_name,
                'Student Email': enrollment.student_email,
                'Exam Name': enrollment.exam_name,
                'Exam Date': enrollment.exam_date,
                'Status': enrollment.appearance_status_display,
                'Enrolled At': enrollment.enrolled_at,
            }));
            const worksheet = utils.json_to_sheet(data);
            const workbook = utils.book_new();
            utils.book_append_sheet(workbook, worksheet, 'Enrollments');
            writeFile(workbook, `enrollments_${new Date().toISOString().slice(0, 10)}.xlsx`);
        } catch (error) {
            console.error('Error exporting to XLS:', error);
            setDialogContent({
                title: "Export Error",
                message: `Failed to export to XLS: ${error.message}`,
                onClose: () => setMessageDialogOpen(false)
            });
            setMessageDialogOpen(true);
        }
    };
    
    const handleExport = (format) => {
        setIsExportMenuOpen(false);
        if (filteredEnrollments.length === 0) {
            setDialogContent({
                title: "No Data",
                message: "No enrollments available to export.",
                onClose: () => setMessageDialogOpen(false)
            });
            setMessageDialogOpen(true);
            return;
        }
        if (format === 'csv') {
            exportToCSV();
        } else if (format === 'xls') {
            exportToXLS();
        }
    };

    const handleInputChange = (e, field) => {
        setFormData({ ...formData, [field]: e.target.value });
    };

    const validateForm = () => {
        if (!formData.student_id || !formData.exam_id) {
            setDialogContent({
                title: "Validation Error",
                message: "Please select both a student and an exam.",
                onClose: () => setMessageDialogOpen(false)
            });
            setMessageDialogOpen(true);
            return false;
        }
        return true;
    };

    const generateEnrollmentId = () => {
        return `enr_${Date.now().toString(36)}_${Math.random()
            .toString(36)
            .substring(2, 8)}`;
    };

    const handleSave = async () => {
        if (!validateForm()) return;

        try {
            const enrollmentData = {
                enrollment_id: editingEnrollment
                    ? editingEnrollment.enrollment_id
                    : generateEnrollmentId(),
                student_id: [formData.student_id],
                exam_id: [formData.exam_id],
                enrolled_at: formData.enrolled_at,
                status: editingEnrollment ? editingEnrollment.raw_appwrite_status : "not_appeared", 
            };

            if (editingEnrollment) {
                await databases.updateDocument(
                    process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
                    process.env.NEXT_PUBLIC_APPWRITE_ENROLLMENTS_COLLECTION_ID,
                    editingEnrollment.id,
                    enrollmentData
                );
            } else {
                await databases.createDocument(
                    process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
                    process.env.NEXT_PUBLIC_APPWRITE_ENROLLMENTS_COLLECTION_ID,
                    "unique()",
                    enrollmentData
                );
            }

            closeModal();
            fetchAllData();
        } catch (error) {
            console.error("Error saving enrollment:", error);
            setDialogContent({
                title: "Error",
                message: `Failed to save enrollment: ${error.message}`,
                onClose: () => setMessageDialogOpen(false)
            });
            setMessageDialogOpen(true);
        }
    };

    const handleDelete = (id) => {
        setDialogContent({
            title: "Confirm Deletion",
            message: "Are you sure you want to delete this enrollment?",
            onConfirm: async () => {
                setConfirmDialogOpen(false);
                try {
                    await databases.deleteDocument(
                        process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
                        process.env.NEXT_PUBLIC_APPWRITE_ENROLLMENTS_COLLECTION_ID,
                        id
                    );
                    fetchAllData();
                } catch (error) {
                    console.error("Error deleting enrollment:", error.message);
                    setDialogContent({
                        title: "Error",
                        message: `Failed to delete enrollment: ${error.message}`,
                        onClose: () => setMessageDialogOpen(false)
                    });
                    setMessageDialogOpen(true);
                }
            },
            onCancel: () => setConfirmDialogOpen(false)
        });
        setConfirmDialogOpen(true);
    };

    const handleEdit = (enrollment) => {
        setEditingEnrollment(enrollment);
        setFormData({
            student_id: enrollment.student_id,
            exam_id: enrollment.exam_id,
            enrolled_at: enrollment.raw_enrolled_at
                ? formatDateTimeUTC(enrollment.raw_enrolled_at)
                    .slice(0, 16)
                : formatDateTimeUTC(new Date()).slice(0, 16),
        });
        setModalOpen(true);
    };

    const handleView = (enrollment) => {
        setViewingEnrollment(enrollment);
        setViewModalOpen(true);
    };

    const closeModal = () => {
        setModalOpen(false);
        setEditingEnrollment(null);
        setFormData(initialFormData);
    };

    const closeViewModal = () => {
        setViewModalOpen(false);
        setViewingEnrollment(null);
    };

    const closeBulkModal = () => {
        setBulkModalOpen(false);
        setSelectedExamForBulk("");
        setSelectedStudents(new Set());
        setSearchTerm("");
    };

    useEffect(() => {
        const handleClickOutside = (event) => {
            if (modalRef.current && !modalRef.current.contains(event.target)) {
                closeModal();
            }
            if (viewModalRef.current && !viewModalRef.current.contains(event.target)) {
                closeViewModal();
            }
            if (bulkModalRef.current && !bulkModalRef.current.contains(event.target)) {
                closeBulkModal();
            }
        };

        if (modalOpen || viewModalOpen || bulkModalOpen) {
            document.addEventListener("mousedown", handleClickOutside);
        }
        return () => {
            document.removeEventListener("mousedown", handleClickOutside);
        };
    }, [modalOpen, viewModalOpen, bulkModalOpen]);

    const handleStudentSelect = (studentId) => {
        setSelectedStudents((prevSelected) => {
            const newSelected = new Set(prevSelected);
            if (newSelected.has(studentId)) {
                newSelected.delete(studentId);
            } else {
                newSelected.add(studentId);
            }
            return newSelected;
        });
    };

    const handleSelectAllStudents = (filteredStudentIds) => {
        const currentSelected = new Set(selectedStudents);
        const allFilteredSelected = filteredStudentIds.every(id => currentSelected.has(id));

        if (allFilteredSelected && filteredStudentIds.length > 0) {
            filteredStudentIds.forEach(id => currentSelected.delete(id));
        } else {
            filteredStudentIds.forEach(id => currentSelected.add(id));
        }
        setSelectedStudents(currentSelected);
    };

    const handleBulkSave = async () => {
        if (!selectedExamForBulk) {
            setDialogContent({
                title: "Selection Required",
                message: "Please select an exam.",
                onClose: () => setMessageDialogOpen(false)
            });
            setMessageDialogOpen(true);
            return;
        }
        if (selectedStudents.size === 0) {
            setDialogContent({
                title: "Selection Required",
                message: "Please select at least one student.",
                onClose: () => setMessageDialogOpen(false)
            });
            setMessageDialogOpen(true);
            return;
        }

        const enrolledAt = formatDateTimeUTC(new Date());
        let successCount = 0;
        let failCount = 0;
        let skippedCount = 0;

        const existingEnrollmentsForExam = enrollments.filter(
            (e) => e.exam_id === selectedExamForBulk
        );
        const enrolledStudentIds = new Set(
            existingEnrollmentsForExam.map((e) => e.student_id)
        );

        setLoading(true);

        const promises = [];

        selectedStudents.forEach((studentId) => {
            if (enrolledStudentIds.has(studentId)) {
                console.warn(`Student ${studentId} is already enrolled. Skipping.`);
                skippedCount++;
                return;
            }

            const enrollmentData = {
                enrollment_id: generateEnrollmentId(),
                student_id: [studentId],
                exam_id: [selectedExamForBulk],
                enrolled_at: enrolledAt,
                status: "not_appeared", // Default status for new bulk enrollments
            };

            promises.push(
                databases.createDocument(
                    process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
                    process.env.NEXT_PUBLIC_APPWRITE_ENROLLMENTS_COLLECTION_ID,
                    "unique()",
                    enrollmentData
                ).then(() => successCount++)
                .catch((err) => {
                    console.error(`Failed to enroll student ${studentId}:`, err);
                    failCount++;
                })
            );
        });

        try {
            await Promise.all(promises);
            let message = `Bulk enrollment complete! \n- ${successCount} successful\n- ${failCount} failed`;
            if (skippedCount > 0) {
                message += `\n- ${skippedCount} skipped (already enrolled)`;
            }
            setDialogContent({
                title: "Bulk Enrollment Result",
                message: message,
                onClose: () => setMessageDialogOpen(false)
            });
            setMessageDialogOpen(true);
            closeBulkModal();
            fetchAllData();
        } catch (error) {
            console.error("An unexpected error occurred during bulk save:", error);
            setDialogContent({
                title: "Error",
                message: "An unexpected error occurred during bulk enrollment.",
                onClose: () => setMessageDialogOpen(false)
            });
            setMessageDialogOpen(true);
        } 
        // setLoading will be set to false by fetchAllData
    };

    const handleSelectEnrollment = (enrollmentId) => {
        setSelectedEnrollments((prevSelected) => {
            const newSelected = new Set(prevSelected);
            if (newSelected.has(enrollmentId)) {
                newSelected.delete(enrollmentId);
            } else {
                newSelected.add(enrollmentId);
            }
            return newSelected;
        });
    };

    const handleSelectAllEnrollments = () => {
        if (selectedEnrollments.size === filteredEnrollments.length && filteredEnrollments.length > 0) {
            setSelectedEnrollments(new Set());
        } else {
            const allIds = new Set(filteredEnrollments.map(e => e.id));
            setSelectedEnrollments(allIds);
        }
    };
    
    const handleBulkDelete = () => {
        if (selectedEnrollments.size === 0) {
            setDialogContent({
                title: "No Selection",
                message: "Please select at least one enrollment to delete.",
                onClose: () => setMessageDialogOpen(false)
            });
            setMessageDialogOpen(true);
            return;
        }

        setDialogContent({
            title: "Confirm Bulk Deletion",
            message: `Are you sure you want to delete ${selectedEnrollments.size} selected enrollments? This action cannot be undone.`,
            onConfirm: async () => {
                setConfirmDialogOpen(false);
                setLoading(true);
                let successCount = 0;
                let failCount = 0;
                const deletePromises = [];

                selectedEnrollments.forEach(id => {
                    deletePromises.push(
                        databases.deleteDocument(
                            process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
                            process.env.NEXT_PUBLIC_APPWRITE_ENROLLMENTS_COLLECTION_ID,
                            id
                        ).then(() => successCount++)
                        .catch((err) => {
                            console.error(`Failed to delete enrollment ${id}:`, err);
                            failCount++;
                        })
                    );
                });

                try {
                    await Promise.all(deletePromises);
                    setDialogContent({
                        title: "Bulk Deletion Result",
                        message: `Bulk deletion complete! \n- ${successCount} successful\n- ${failCount} failed`,
                        onClose: () => setMessageDialogOpen(false)
                    });
                    setMessageDialogOpen(true);
                    fetchAllData();
                } catch (error) {
                    console.error("An unexpected error occurred during bulk deletion:", error);
                    setDialogContent({
                        title: "Error",
                        message: "An unexpected error occurred during bulk deletion.",
                        onClose: () => setMessageDialogOpen(false)
                    });
                    setMessageDialogOpen(true);
                }
                // setLoading will be set to false by fetchAllData
            },
            onCancel: () => setConfirmDialogOpen(false)
        });
        setConfirmDialogOpen(true);
    };

    const filteredStudents = students.filter(
        (student) =>
            student.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
            student.email.toLowerCase().includes(searchTerm.toLowerCase())
    );

    const filteredStudentIds = filteredStudents.map(student => student.$id);
    const allFilteredStudentsSelected = filteredStudents.length > 0 && filteredStudentIds.every(id => selectedStudents.has(id));

    const filteredEnrollments = enrollments.filter(enrollment => {
        const matchesExamFilter = filterExamId === "" || enrollment.exam_id === filterExamId;
        const matchesSearchTerm = mainSearchTerm === "" ||
            enrollment.student_name.toLowerCase().includes(mainSearchTerm.toLowerCase()) ||
            enrollment.exam_name.toLowerCase().includes(mainSearchTerm.toLowerCase()) ||
            (enrollment.enrollment_id && enrollment.enrollment_id.toLowerCase().includes(mainSearchTerm.toLowerCase())); // Keep enrollment_id search capability
        return matchesExamFilter && matchesSearchTerm;
    });

    const allEnrollmentsSelected = filteredEnrollments.length > 0 && selectedEnrollments.size === filteredEnrollments.length;

    const truncateText = (text, maxLength) => {
        if (text.length <= maxLength) {
            return text;
        }
        return text.substring(0, maxLength) + "...";
    };

    const ActionButtons = ({ enrollment }) => (
        <div className="flex items-center gap-1 sm:gap-2">
            <button
                className="bg-gray-500 text-white p-1 rounded-md hover:bg-gray-600 transition-colors duration-200"
                onClick={() => handleView(enrollment)}
                title="View"
            >
                <Eye size={16} className="w-4 h-4" />
            </button>
            <button
                className="bg-yellow-500 text-white p-1 rounded-md hover:bg-yellow-600 transition-colors duration-200"
                onClick={() => handleEdit(enrollment)}
                title="Edit"
            >
                <Edit size={16} className="w-4 h-4" />
            </button>
            <button
                className="bg-red-500 text-white p-1 rounded-md hover:bg-red-600 transition-colors duration-200"
                onClick={() => handleDelete(enrollment.id)}
                title="Delete"
            >
                <Trash2 size={16} className="w-4 h-4" />
            </button>
        </div>
    );

    return (
        <div className="w-full">
            <div className="bg-white rounded-lg shadow-md p-4 sm:p-6">
                <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-3">
                    <h2 className="text-2xl sm:text-3xl font-extrabold text-gray-800">Exam Enrollments</h2>
                    <div className="flex flex-wrap gap-2">
                        {selectedEnrollments.size > 0 && (
                            <button
                                className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md transition-colors duration-200 flex items-center gap-2 text-base font-semibold shadow-sm"
                                onClick={handleBulkDelete}
                            >
                                <Trash2 size={18} />
                                <span>Delete Selected ({selectedEnrollments.size})</span>
                            </button>
                        )}
                        <button
                            className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md transition-colors duration-200 flex items-center gap-2 text-base font-semibold shadow-sm"
                            onClick={() => setBulkModalOpen(true)}
                        >
                            <Plus size={18} />
                            <span>Bulk Enroll</span>
                        </button>
                        <button
                            className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition-colors duration-200 flex items-center gap-2 text-base font-semibold shadow-sm"
                            onClick={() => { setEditingEnrollment(null); setFormData(initialFormData); setModalOpen(true);}}
                        >
                            <Plus size={18} />
                            <span>Add Single</span>
                        </button>
                        <div className="relative" ref={exportButtonRef}>
                            <button
                                className="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-md transition-colors duration-200 flex items-center gap-2 text-base font-semibold shadow-sm"
                                onClick={() => setIsExportMenuOpen(!isExportMenuOpen)}
                            >
                                <Download size={18} />
                                <span>Export</span>
                            </button>
                            {isExportMenuOpen && (
                                <div className="absolute right-0 mt-2 w-32 bg-white rounded-md shadow-lg z-10 border border-gray-200">
                                    <button
                                        className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                                        onClick={() => handleExport('csv')}
                                    >
                                        Export to CSV
                                    </button>
                                    <button
                                        className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                                        onClick={() => handleExport('xls')}
                                    >
                                        Export to XLS
                                    </button>
                                </div>
                            )}
                        </div>
                    </div>
                </div>

                {error && (
                    <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-6" role="alert">
                        <strong className="font-bold">Error:</strong>
                        <span className="block sm:inline ml-2">{error}</span>
                    </div>
                )}

                <div className="mb-4 flex flex-col sm:flex-row items-start sm:items-center gap-3">
                    <label htmlFor="exam_filter" className="text-sm font-semibold text-gray-700 whitespace-nowrap">Filter by Exam:</label>
                    <select
                        id="exam_filter"
                        value={filterExamId}
                        onChange={(e) => setFilterExamId(e.target.value)}
                        className="mt-1 block w-full sm:w-auto px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-gray-800 bg-gray-50"
                    >
                        <option value="">All Exams</option>
                        {exams.map(exam => (
                            <option key={exam.$id} value={exam.$id}>
                                {exam.name} ({exam.exam_id})
                            </option>
                        ))}
                    </select>
                    {filterExamId && (
                        <button
                            onClick={() => setFilterExamId("")}
                            className="bg-gray-200 text-gray-700 px-3 py-1.5 rounded-md hover:bg-gray-300 transition-colors duration-200 flex items-center gap-1 text-sm shadow-sm"
                        >
                            <X size={16} />
                            Clear Filter
                        </button>
                    )}

                    <div className="relative flex-grow sm:ml-4 w-full sm:w-auto">
                        <label htmlFor="main_search" className="sr-only">Search Enrollments</label>
                        <input
                            type="text"
                            id="main_search"
                            placeholder="Search by student, exam, or ID..."
                            value={mainSearchTerm}
                            onChange={(e) => setMainSearchTerm(e.target.value)}
                            className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-gray-800 bg-gray-50 pl-10"
                        />
                        <Search size={20} className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 mt-0.5" />
                    </div>
                </div>

                {loading ? (
                    <div className="flex justify-center items-center h-64">
                        <p className="text-xl text-gray-600">Loading...</p>
                    </div>
                ) : (
                    <div className="overflow-x-auto rounded-lg shadow-sm border border-gray-200">
                        <table className="min-w-full divide-y divide-gray-200">
                            <thead className="bg-gray-50">
                                <tr>
                                    <th scope="col" className="px-6 py-3 text-left">
                                        <input 
                                            type="checkbox" 
                                            className="rounded text-blue-600 focus:ring-blue-500 h-4 w-4" 
                                            onChange={handleSelectAllEnrollments} 
                                            checked={allEnrollmentsSelected} 
                                            disabled={filteredEnrollments.length === 0}
                                        />
                                    </th>
                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Student</th>
                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider sm:table-cell">Exam</th>
                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider sm:table-cell">Exam Date</th>
                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Enrolled At</th>
                                    {/* Enrollment ID column header removed */}
                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                </tr>
                            </thead>
                            <tbody className="bg-white divide-y divide-gray-200">
                                {filteredEnrollments.length > 0 ? (
                                    filteredEnrollments.map((enrollment) => (
                                        <tr key={enrollment.id} className="hover:bg-gray-50 transition-colors duration-150">
                                            <td className="px-6 py-4 whitespace-nowrap">
                                                <input
                                                    type="checkbox"
                                                    className="rounded text-blue-600 focus:ring-blue-500 h-4 w-4"
                                                    checked={selectedEnrollments.has(enrollment.id)}
                                                    onChange={() => handleSelectEnrollment(enrollment.id)}
                                                />
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap">
                                                <div className="text-sm font-medium text-gray-900">{enrollment.student_name}</div>
                                                {/* Small screen details for exam name and date */}
                                                <div className="text-xs text-gray-500 sm:hidden" title={enrollment.exam_name}>
                                                    {truncateText(enrollment.exam_name, 20)} ({enrollment.exam_date}) {/* Slightly shorter for mobile view */}
                                                </div>
                                                <div className="text-xs text-gray-500 sm:hidden">Status: {enrollment.appearance_status_display}</div>
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600 sm:table-cell" title={enrollment.exam_name}>
                                                {truncateText(enrollment.exam_name, 25)}
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600 sm:table-cell">{enrollment.exam_date}</td>
                                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600">{enrollment.appearance_status_display}</td>
                                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600">{enrollment.enrolled_at}</td>
                                            {/* Enrollment ID column data removed */}
                                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600">
                                                <ActionButtons enrollment={enrollment} />
                                            </td>
                                        </tr>
                                    ))
                                ) : (
                                    <tr>
                                        {/* Adjusted colSpan */}
                                        <td colSpan="7" className="text-center py-10 text-gray-500 text-lg">No enrollments found for the selected filter.</td>
                                    </tr>
                                )}
                            </tbody>
                        </table>
                    </div>
                )}
                
                {modalOpen && (
                    <Modal
                        title={editingEnrollment ? "Edit Enrollment" : "Add Enrollment"}
                        onClose={closeModal}
                        onSave={handleSave}
                        initialData={formData}
                        fields={[
                            {
                                name: "student_id",
                                label: "Student",
                                type: "select",
                                required: true,
                                options: students.map(s => ({ value: s.$id, label: `${s.name} (${s.email})` })),
                                placeholder: "Select Student"
                            },
                            {
                                name: "exam_id",
                                label: "Exam",
                                type: "select",
                                required: true,
                                options: exams.map(e => ({ value: e.$id, label: e.name })),
                                placeholder: "Select Exam"
                            },
                            {
                                name: "enrolled_at",
                                label: "Enrollment Date",
                                type: "datetime-local",
                                required: true
                            }
                        ]}
                        isLoading={loading}
                        error={error}
                        onChange={e => {
                            const { name, value } = e.target;
                            setFormData(prev => ({ ...prev, [name]: value }));
                        }}
                    />
                )}
                
                {viewModalOpen && viewingEnrollment && (
                    <div className="fixed inset-0 bg-black bg-opacity-60 flex justify-center items-center z-50 p-4">
                        <div ref={viewModalRef} className="bg-white rounded-xl shadow-2xl p-6 w-full max-w-xl transform transition-all duration-300 scale-100 opacity-100">
                            <h3 className="text-2xl font-bold text-gray-800 mb-5">Enrollment Details</h3>
                            <div className="space-y-4 text-gray-700">
                                <div>
                                    <h4 className="font-semibold text-gray-800">Student:</h4>
                                    <p className="ml-2">{viewingEnrollment.student_name} ({viewingEnrollment.student_email})</p>
                                </div>
                                <div>
                                    <h4 className="font-semibold text-gray-800">Exam:</h4>
                                    <p className="ml-2">{viewingEnrollment.exam_name}</p>
                                    {viewingEnrollment.exam_description && (
                                        <p className="text-sm text-gray-600 ml-2">{viewingEnrollment.exam_description}</p>
                                    )}
                                </div>
                                <div>
                                    <h4 className="font-semibold text-gray-800">Exam Date:</h4>
                                    <p className="ml-2">{viewingEnrollment.exam_date}</p>
                                </div>
                                <div>
                                    <h4 className="font-semibold text-gray-800">Appearance Status:</h4>
                                    <p className="ml-2">{viewingEnrollment.appearance_status_display}</p>
                                </div>
                                <div>
                                    <h4 className="font-semibold text-gray-800">Enrollment ID:</h4>
                                    <p className="ml-2">{viewingEnrollment.enrollment_id}</p>
                                </div>
                                <div>
                                    <h4 className="font-semibold text-gray-800">Enrolled At:</h4>
                                    <p className="ml-2">{viewingEnrollment.enrolled_at}</p>
                                </div>
                            </div>
                            <div className="flex justify-end mt-6">
                                <button 
                                    onClick={closeViewModal} 
                                    className="bg-gray-500 text-white px-5 py-2 rounded-lg hover:bg-gray-600 transition-colors duration-200 shadow-md"
                                >
                                    Close
                                </button>
                            </div>
                        </div>
                    </div>
                )}
                
                {bulkModalOpen && (
                    <div className="fixed inset-0 bg-black bg-opacity-60 flex justify-center items-center z-50 p-4">
                        <div ref={bulkModalRef} className="bg-white rounded-xl shadow-2xl p-6 w-full max-w-2xl h-[80vh] flex flex-col transform transition-all duration-300 scale-100 opacity-100">
                            <h3 className="text-2xl font-bold text-gray-800 mb-5">Bulk Enroll Students</h3>
                            <div className="mb-4">
                                <label htmlFor="bulk_exam_id" className="block text-sm font-semibold text-gray-700 mb-1">Select Exam</label>
                                <select 
                                    id="bulk_exam_id" 
                                    value={selectedExamForBulk} 
                                    onChange={(e) => setSelectedExamForBulk(e.target.value)} 
                                    className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 text-gray-800 bg-gray-50" 
                                    required
                                >
                                    <option value="">Select Exam to Enroll In</option>
                                    {exams.map(exam => (
                                        <option key={exam.$id} value={exam.$id}>
                                            {exam.name}
                                        </option>
                                    ))}
                                </select>
                            </div>
                            <div className="mb-4 relative">
                                <label htmlFor="student_search" className="block text-sm font-semibold text-gray-700 mb-1">Search Students</label>
                                <input
                                    type="text"
                                    id="student_search"
                                    placeholder="Search by name or email..."
                                    value={searchTerm}
                                    onChange={(e) => setSearchTerm(e.target.value)}
                                    className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-gray-800 bg-gray-50 pl-10"
                                />
                                <Search size={20} className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 mt-2" />
                            </div>
                            <div className="flex-1 overflow-y-auto border border-gray-200 rounded-lg p-3 mb-4 shadow-inner">
                                <table className="min-w-full divide-y divide-gray-200">
                                    <thead className="bg-gray-50 sticky top-0 z-10">
                                        <tr>
                                            <th className="px-4 py-3 text-left">
                                                <input 
                                                    type="checkbox" 
                                                    className="rounded text-blue-600 focus:ring-blue-500 h-4 w-4" 
                                                    onChange={() => handleSelectAllStudents(filteredStudentIds)} 
                                                    checked={allFilteredStudentsSelected} 
                                                    disabled={filteredStudents.length === 0}
                                                />
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                                        </tr>
                                    </thead>
                                    <tbody className="bg-white divide-y divide-gray-200">
                                        {filteredStudents.map((student) => (
                                            <tr key={student.$id} className="hover:bg-gray-50 transition-colors duration-150">
                                                <td className="px-4 py-3 whitespace-nowrap">
                                                    <input
                                                        type="checkbox"
                                                        className="rounded text-blue-600 focus:ring-blue-500 h-4 w-4"
                                                        checked={selectedStudents.has(student.$id)}
                                                        onChange={() => handleStudentSelect(student.$id)}
                                                    />
                                                </td>
                                                <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900">{student.name}</td>
                                                <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-600">{student.email}</td>
                                            </tr>
                                        ))}
                                        {filteredStudents.length === 0 && (
                                            <tr>
                                                <td colSpan="3" className="text-center py-6 text-gray-500 text-md">No students match your search.</td>
                                            </tr>
                                        )}
                                    </tbody>
                                </table>
                            </div>
                            <div className="flex justify-between items-center mt-auto pt-4">
                                <span className="text-sm text-gray-600 font-medium">{selectedStudents.size} student(s) selected</span>
                                <div className="flex gap-3">
                                    <button 
                                        type="button" 
                                        onClick={closeBulkModal} 
                                        className="bg-gray-500 text-white px-5 py-2 rounded-lg hover:bg-gray-600 transition-colors duration-200 shadow-md"
                                    >
                                        Cancel
                                    </button>
                                    <button 
                                        type="button" 
                                        onClick={handleBulkSave} 
                                        className="bg-green-600 text-white px-5 py-2 rounded-lg hover:bg-green-700 transition-colors duration-200 shadow-md" 
                                        disabled={!selectedExamForBulk || selectedStudents.size === 0 || loading}
                                    >
                                        {loading ? 'Enrolling...' : `Enroll Selected (${selectedStudents.size})`}
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                )}
                
                <ConfirmationDialog
                    isOpen={confirmDialogOpen}
                    title={dialogContent.title}
                    message={dialogContent.message}
                    onConfirm={dialogContent.onConfirm}
                    onCancel={dialogContent.onCancel}
                />
                
                <MessageDialog
                    isOpen={messageDialogOpen}
                    title={dialogContent.title}
                    message={dialogContent.message}
                    onClose={dialogContent.onClose || (() => setMessageDialogOpen(false))}
                />
            </div>
        </div>
    );
};

export default ExamEnrollment;
-e [1;34m===== ./pages/admin/test-sidebar.jsx =====[0m
import React, { useEffect, useState } from 'react';
import { motion } from 'framer-motion';

const TestSidebar = () => {
  const [sidebarVisible, setSidebarVisible] = useState(false);
  const [toggleCount, setToggleCount] = useState(0);

  useEffect(() => {
    // Monitor sidebar visibility
    const checkSidebar = () => {
      const sidebar = document.querySelector('aside');
      if (sidebar) {
        const transform = window.getComputedStyle(sidebar).transform;
        const isVisible = transform === 'none' || transform.includes('translateX(0px)');
        setSidebarVisible(isVisible);
      }
    };

    checkSidebar();
    const interval = setInterval(checkSidebar, 500);
    return () => clearInterval(interval);
  }, []);

  // Monitor toggle button clicks
  useEffect(() => {
    const toggleButton = document.querySelector('button[title="Toggle sidebar"]');
    if (toggleButton) {
      const handleClick = () => {
        setToggleCount(prev => prev + 1);
      };
      toggleButton.addEventListener('click', handleClick);
      return () => toggleButton.removeEventListener('click', handleClick);
    }
  }, []);

  return (
    <div className="space-y-6">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="bg-white rounded-lg shadow-sm p-6"
      >
        <h1 className="text-2xl font-bold text-gray-800 mb-4">Admin Sidebar Test</h1>
        <p className="text-gray-600 mb-4">
          This page tests the admin sidebar toggle functionality.
        </p>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <div className={`p-4 rounded-lg border-2 ${
            sidebarVisible 
              ? 'bg-green-50 border-green-200' 
              : 'bg-red-50 border-red-200'
          }`}>
            <h3 className="font-semibold mb-2">Sidebar Status</h3>
            <p className={sidebarVisible ? 'text-green-700' : 'text-red-700'}>
              {sidebarVisible ? '‚úÖ Visible' : '‚ùå Hidden'}
            </p>
          </div>
          
          <div className="bg-blue-50 p-4 rounded-lg border-2 border-blue-200">
            <h3 className="font-semibold mb-2">Toggle Count</h3>
            <p className="text-blue-700">{toggleCount} clicks</p>
          </div>
        </div>

        <div className="bg-yellow-50 p-4 rounded-lg border-2 border-yellow-200">
          <h3 className="font-semibold mb-2">Instructions</h3>
          <ol className="list-decimal list-inside space-y-1 text-yellow-800">
            <li>Look for the menu button (‚ò∞) in the top-left corner</li>
            <li>Click the menu button to toggle the sidebar</li>
            <li>Watch the status change from Hidden to Visible</li>
            <li>The toggle count should increase with each click</li>
          </ol>
        </div>
      </motion.div>

      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.1 }}
        className="bg-white rounded-lg shadow-sm p-6"
      >
        <h2 className="text-xl font-bold text-gray-800 mb-4">Debug Information</h2>
        <div className="space-y-2 text-sm text-gray-600">
          <p><strong>Current URL:</strong> {typeof window !== 'undefined' ? window.location.href : 'N/A'}</p>
          <p><strong>Sidebar Element:</strong> {typeof document !== 'undefined' && document.querySelector('aside') ? 'Found' : 'Not Found'}</p>
          <p><strong>Toggle Button:</strong> {typeof document !== 'undefined' && document.querySelector('button[title="Toggle sidebar"]') ? 'Found' : 'Not Found'}</p>
          <p><strong>Screen Width:</strong> {typeof window !== 'undefined' ? window.innerWidth : 'N/A'}px</p>
        </div>
      </motion.div>
    </div>
  );
};

export default TestSidebar; -e [1;34m===== ./pages/admin/index.jsx =====[0m
import React, { useEffect, useState, useCallback, useMemo, Suspense } from "react";
import { databases, account } from "../../utils/appwrite";
import { BarChart, Users, FileText, CheckCircle, ClipboardList, BookCopy } from "lucide-react";
import Link from "next/link";
import { motion, AnimatePresence } from "framer-motion";
import LoadingSpinner from "../../components/LoadingSpinner";
import dashboardCache, { CACHE_KEYS } from "../../utils/cache";
import performanceMonitor, { PERFORMANCE_OPS } from "../../utils/performance";
import { formatDateTimeUTC } from "../../utils/date";

// Skeleton loading component
const DashboardSkeleton = () => (
  <div className="space-y-6">
    {/* Stats Cards Skeleton */}
    <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-6">
      {[1, 2, 3, 4].map((i) => (
        <div key={i} className="bg-white shadow-md rounded-lg p-4 animate-pulse">
          <div className="flex items-center space-x-4">
            <div className="w-8 h-8 bg-gray-200 rounded"></div>
            <div className="flex-1">
              <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
              <div className="h-6 bg-gray-200 rounded w-1/2"></div>
            </div>
          </div>
        </div>
      ))}
    </div>

    {/* Content Skeleton */}
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
      {[1, 2].map((i) => (
        <div key={i} className="bg-white shadow-md rounded-lg p-6 animate-pulse">
          <div className="h-6 bg-gray-200 rounded w-1/3 mb-4"></div>
          <div className="space-y-3">
            {[1, 2, 3].map((j) => (
              <div key={j} className="flex items-center space-x-3">
                <div className="w-4 h-4 bg-gray-200 rounded"></div>
                <div className="flex-1">
                  <div className="h-4 bg-gray-200 rounded w-2/3 mb-1"></div>
                  <div className="h-3 bg-gray-200 rounded w-1/2"></div>
                </div>
              </div>
            ))}
          </div>
        </div>
      ))}
    </div>
  </div>
);

const Dashboard = () => {
  const [stats, setStats] = useState({
    students: 0,
    exams: 0,
    questions: 0,
    courses: 0,
    attempts: "N/A",
    passPercentage: "N/A"
  });
const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [upcomingExams, setUpcomingExams] = useState([]);
  const [recentActivity, setRecentActivity] = useState([]);
  const [isInitialLoad, setIsInitialLoad] = useState(true);

  // Memoize environment variables
  const envConfig = useMemo(() => ({
    DATABASE_ID: process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID || '67a5a946002e8a51f8fe',
    STUDENTS_COLLECTION_ID: process.env.NEXT_PUBLIC_APPWRITE_STUDENTS_COLLECTION_ID,
    EXAMS_COLLECTION_ID: process.env.NEXT_PUBLIC_APPWRITE_EXAMS_COLLECTION_ID,
    QUESTIONS_COLLECTION_ID: process.env.NEXT_PUBLIC_APPWRITE_QUESTIONS_COLLECTION_ID,
    COURSES_COLLECTION_ID: process.env.NEXT_PUBLIC_APPWRITE_COURSE_COLLECTION_ID || 'course'
  }), []);

  // Optimized data fetching with error handling and caching
  const fetchDashboardData = useCallback(async (showLoading = true, forceRefresh = false) => {
    if (showLoading) {
    setLoading(true);
    }
    setError(null);

try {
      // Check authentication first
      const user = await account.get();
if (!user) {
        throw new Error("You must be logged in to view this dashboard");
}

      // Check cache first (unless force refresh)
      if (!forceRefresh) {
        const cachedStats = dashboardCache.get(CACHE_KEYS.DASHBOARD_STATS);
        const cachedExams = dashboardCache.get(CACHE_KEYS.UPCOMING_EXAMS);
        const cachedActivity = dashboardCache.get(CACHE_KEYS.RECENT_ACTIVITY);

        if (cachedStats && cachedExams && cachedActivity) {
          setStats(cachedStats);
          setUpcomingExams(cachedExams);
          setRecentActivity(cachedActivity);
          setIsInitialLoad(false);
          setLoading(false);
          return;
        }
      }

      // Fetch data in parallel with timeout
      const fetchWithTimeout = (promise, timeout = 10000) => {
        return Promise.race([
          promise,
          new Promise((_, reject) => 
            setTimeout(() => reject(new Error('Request timeout')), timeout)
          )
        ]);
      };

      const [studentsData, examsData, questionsData, coursesData] = await Promise.allSettled([
        fetchWithTimeout(databases.listDocuments(envConfig.DATABASE_ID, envConfig.STUDENTS_COLLECTION_ID)),
        fetchWithTimeout(databases.listDocuments(envConfig.DATABASE_ID, envConfig.EXAMS_COLLECTION_ID)),
        fetchWithTimeout(databases.listDocuments(envConfig.DATABASE_ID, envConfig.QUESTIONS_COLLECTION_ID)),
        fetchWithTimeout(databases.listDocuments(envConfig.DATABASE_ID, envConfig.COURSES_COLLECTION_ID))
      ]);

      // Handle partial failures gracefully
      const students = studentsData.status === 'fulfilled' ? studentsData.value : { total: 0, documents: [] };
      const exams = examsData.status === 'fulfilled' ? examsData.value : { total: 0, documents: [] };
      const questions = questionsData.status === 'fulfilled' ? questionsData.value : { total: 0, documents: [] };
      const courses = coursesData.status === 'fulfilled' ? coursesData.value : { total: 0, documents: [] };

      // Process upcoming exams
const now = new Date();
      const upcoming = exams.documents
        ?.filter(exam => new Date(exam.exam_date) > now)
        .sort((a, b) => new Date(a.exam_date) - new Date(b.exam_date))
        .slice(0, 5) || [];

      // Generate recent activity
const recentActivity = [
        { 
          message: `${students.total} students registered`, 
          time: new Date().toLocaleString(),
          type: 'students'
        },
        { 
          message: `${exams.total} exams created`, 
          time: new Date().toLocaleString(),
          type: 'exams'
        },
        { 
          message: `${courses.total} courses available`, 
          time: new Date().toLocaleString(),
          type: 'courses'
        },
        { 
          message: `${questions.total} questions available`, 
          time: new Date().toLocaleString(),
          type: 'questions'
        }
      ];

      const newStats = {
        students: students.total || 0,
        exams: exams.total || 0,
        questions: questions.total || 0,
        courses: courses.total || 0,
        attempts: "N/A",
        passPercentage: "N/A"
      };

      // Cache the data
      dashboardCache.set(CACHE_KEYS.DASHBOARD_STATS, newStats, 5 * 60 * 1000); // 5 minutes
      dashboardCache.set(CACHE_KEYS.UPCOMING_EXAMS, upcoming, 2 * 60 * 1000); // 2 minutes
      dashboardCache.set(CACHE_KEYS.RECENT_ACTIVITY, recentActivity, 5 * 60 * 1000); // 5 minutes

      setStats(newStats);
setUpcomingExams(upcoming);
      setRecentActivity(recentActivity);
      setIsInitialLoad(false);

    } catch (error) {
      console.error("Error fetching dashboard data:", error);
setError(error.message || "Failed to load dashboard data. Please try again.");
    } finally {
      setLoading(false);
}
  }, [envConfig]);

  // Initial load
  useEffect(() => {
    performanceMonitor.startTimer(PERFORMANCE_OPS.DASHBOARD_LOAD);
    fetchDashboardData().finally(() => {
      performanceMonitor.endTimer(PERFORMANCE_OPS.DASHBOARD_LOAD);
      performanceMonitor.logPerformance();
    });
  }, [fetchDashboardData]);

  // Auto-refresh every 5 minutes (only if not in error state)
  useEffect(() => {
    if (!error && !isInitialLoad) {
      const interval = setInterval(() => {
        fetchDashboardData(false); // Don't show loading for auto-refresh
      }, 5 * 60 * 1000);

      return () => clearInterval(interval);
    }
  }, [error, isInitialLoad, fetchDashboardData]);

  // Memoize dashboard cards data
  const dashboardCards = useMemo(() => [
    {
      icon: <Users size={28} />,
      title: "Total Students",
      value: stats.students,
      link: "/admin/students",
      color: "blue"
    },
    {
      icon: <FileText size={28} />,
      title: "Total Exams",
      value: stats.exams,
      link: "/admin/exams",
      color: "green"
    },
    {
      icon: <BookCopy size={28} />,
      title: "Total Courses",
      value: stats.courses,
      link: "/admin/courses",
      color: "purple"
    },
    {
      icon: <ClipboardList size={28} />,
      title: "Total Questions",
      value: stats.questions,
      link: "/admin/questions",
      color: "orange"
    }
  ], [stats]);

  if (loading && isInitialLoad) {
    return (
      <div className="space-y-6">
        <motion.h2 
          className="text-2xl font-bold mb-6"
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          Admin Dashboard
        </motion.h2>
        <DashboardSkeleton />
        </div>
    );
}

  if (error) {
    return (
      <motion.div 
        className="bg-red-50 border border-red-200 text-red-700 p-6 rounded-lg mb-6"
        initial={{ opacity: 0, scale: 0.95 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ duration: 0.3 }}
      >
        <div className="flex items-center gap-3 mb-3">
          <div className="w-5 h-5 bg-red-100 rounded-full flex items-center justify-center">
            <span className="text-red-600 text-xs">!</span>
          </div>
          <h3 className="font-semibold">Error Loading Dashboard</h3>
        </div>
        <p className="mb-4">{error}</p>
          <button 
          onClick={() => fetchDashboardData()}
          className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors duration-200"
          >
          Retry
          </button>
      </motion.div>
    );
}

  return (
    <div className="space-y-6">
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="flex items-center justify-between"
      >
        <h2 className="text-2xl font-bold">Admin Dashboard</h2>
        {!isInitialLoad && (
          <motion.button
            onClick={() => fetchDashboardData(false, true)}
            className="text-sm text-gray-500 hover:text-gray-700 transition-colors duration-200"
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            Refresh
          </motion.button>
        )}
      </motion.div>

      {/* Stats Cards */}
      <motion.div 
        className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-6"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.1 }}
      >
        {/* Placeholder for stats cards */}
        {dashboardCards.map((card, index) => (
          <motion.div
            key={card.title}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.1 + index * 0.1 }}
          >
            <div className={`bg-white shadow-md rounded-lg p-4 flex items-center space-x-4 border-l-4 border-${card.color}-500`}>
              <div>{card.icon}</div>
              <div>
                <div className="text-lg font-semibold">{card.value}</div>
                <div className="text-gray-500 text-sm">{card.title}</div>
              </div>
            </div>
          </motion.div>
        ))}
      </motion.div>

      {/* Content Sections */}
      <motion.div 
        className="grid grid-cols-1 lg:grid-cols-2 gap-6"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.3 }}
      >
        {/* Placeholder for Upcoming Exams */}
        <div className="bg-white shadow-md rounded-lg p-6">
          <h3 className="text-lg font-bold mb-2">Upcoming Exams</h3>
          {upcomingExams.length === 0 ? (
            <div className="text-gray-500">No upcoming exams.</div>
          ) : (
            <ul className="space-y-2">
              {upcomingExams.map((exam) => (
                <li key={exam.$id} className="flex flex-col">
                  <span className="font-semibold">{exam.name}</span>
                  <span className="text-gray-500 text-sm">{formatDateTimeUTC(exam.exam_date)}</span>
                </li>
              ))}
            </ul>
          )}
        </div>
        {/* Placeholder for System Summary */}
        <div className="bg-white shadow-md rounded-lg p-6">
          <h3 className="text-lg font-bold mb-2">System Summary</h3>
          <ul className="space-y-2">
            {recentActivity.map((activity, idx) => (
              <li key={idx} className="flex items-center space-x-2">
                <span className="text-gray-700">{activity.message}</span>
                <span className="text-gray-400 text-xs">({formatDateTimeUTC(activity.time)})</span>
              </li>
            ))}
          </ul>
        </div>
      </motion.div>
    </div>
  );
};

export default Dashboard;-e [1;34m===== ./pages/admin/debug-sidebar.jsx =====[0m
import React, { useEffect, useState } from 'react';
import { motion } from 'framer-motion';

const DebugSidebar = () => {
  const [sidebarState, setSidebarState] = useState('Unknown');

  useEffect(() => {
    // Try to detect sidebar state from DOM
    const checkSidebar = () => {
      const sidebar = document.querySelector('aside');
      if (sidebar) {
        const transform = window.getComputedStyle(sidebar).transform;
        const isVisible = transform === 'none' || transform.includes('translateX(0px)');
        setSidebarState(isVisible ? 'Visible' : 'Hidden');
      }
    };

    checkSidebar();
    const interval = setInterval(checkSidebar, 1000);
    return () => clearInterval(interval);
  }, []);
  return (
    <div className="space-y-6">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="bg-white rounded-lg shadow-sm p-6"
      >
        <h1 className="text-2xl font-bold text-gray-800 mb-4">Sidebar Debug Page</h1>
        <p className="text-gray-600 mb-4">
          This page is used to test the sidebar toggle functionality. 
          Click the menu button in the navbar to toggle the sidebar.
        </p>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <div className="bg-blue-50 p-4 rounded-lg">
            <h3 className="font-semibold text-blue-800 mb-2">Sidebar Status</h3>
            <p className="text-blue-600">Current state: <span className="font-bold">{sidebarState}</span></p>
          </div>
          
          <div className="bg-green-50 p-4 rounded-lg">
            <h3 className="font-semibold text-green-800 mb-2">Toggle Button</h3>
            <p className="text-green-600">Menu button in navbar should work</p>
          </div>
          
          <div className="bg-purple-50 p-4 rounded-lg">
            <h3 className="font-semibold text-purple-800 mb-2">Responsive</h3>
            <p className="text-purple-600">Sidebar should be responsive</p>
          </div>
        </div>
      </motion.div>

      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.1 }}
        className="bg-white rounded-lg shadow-sm p-6"
      >
        <h2 className="text-xl font-bold text-gray-800 mb-4">Instructions</h2>
        <ol className="list-decimal list-inside space-y-2 text-gray-600">
          <li>Look for the menu button (‚ò∞) in the top-left corner of the navbar</li>
          <li>Click the menu button to toggle the sidebar</li>
          <li>On desktop, the sidebar should slide in/out smoothly</li>
          <li>On mobile, the sidebar should overlay with a dark background</li>
          <li>Click outside the sidebar on mobile to close it</li>
        </ol>
      </motion.div>

      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.2 }}
        className="bg-white rounded-lg shadow-sm p-6"
      >
        <h2 className="text-xl font-bold text-gray-800 mb-4">Expected Behavior</h2>
        <ul className="list-disc list-inside space-y-2 text-gray-600">
          <li>Sidebar should be open by default on desktop</li>
          <li>Sidebar should be closed by default on mobile</li>
          <li>Toggle button should be visible on all screen sizes</li>
          <li>Sidebar should contain navigation menu items</li>
          <li>Main content should adjust when sidebar toggles</li>
        </ul>
      </motion.div>
    </div>
  );
};

export default DebugSidebar; -e [1;34m===== ./pages/admin/notifications.jsx =====[0m
import React, { useState, useEffect } from "react";
import Table from "../../components/Table";
import Modal from "../../components/Modal";
import { databases } from "../../utils/appwrite";
import { ID } from "appwrite";

const NotificationsPage = () => {
  const [notifications, setNotifications] = useState([]);
  const [modalOpen, setModalOpen] = useState(false);
  const [editingNotification, setEditingNotification] = useState(null);
  const [message, setMessage] = useState("");
  const [scheduleDate, setScheduleDate] = useState("");
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchNotifications();
  }, []);

  const fetchNotifications = async () => {
    setLoading(true);
    try {
      const response = await databases.listDocuments(
        process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
        process.env.NEXT_PUBLIC_APPWRITE_NOTIFICATIONS_COLLECTION_ID
      );
      setNotifications(response.documents);
    } catch (error) {
      console.error("Error fetching notifications:", error.message);
    }
    setLoading(false);
  };

  const handleSave = async () => {
    if (!message.trim()) {
      alert("Notification message cannot be empty.");
      return;
    }

    try {
      if (editingNotification) {
        await databases.updateDocument(
          process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
          process.env.NEXT_PUBLIC_APPWRITE_NOTIFICATIONS_COLLECTION_ID,
          editingNotification.$id,
          { message, scheduleDate: scheduleDate || null }
        );
      } else {
        await databases.createDocument(
          process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
          process.env.NEXT_PUBLIC_APPWRITE_NOTIFICATIONS_COLLECTION_ID,
          ID.unique(),
          { message, scheduleDate: scheduleDate || null, status: "Scheduled" }
        );
      }

      setModalOpen(false);
      setEditingNotification(null);
      setMessage("");
      setScheduleDate("");
      fetchNotifications();
    } catch (error) {
      console.error("Error saving notification:", error.message);
    }
  };

  const handleEdit = (notification) => {
    setEditingNotification(notification);
    setMessage(notification.message);
    setScheduleDate(notification.scheduleDate || "");
    setModalOpen(true);
  };

  const handleDelete = async (id) => {
    if (!confirm("Are you sure you want to delete this notification?")) return;
    
    try {
      await databases.deleteDocument(
        process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
        process.env.NEXT_PUBLIC_APPWRITE_NOTIFICATIONS_COLLECTION_ID,
        id
      );
      fetchNotifications();
    } catch (error) {
      console.error("Error deleting notification:", error.message);
    }
  };

  return (
    <div className="p-6">
      <h2 className="text-2xl font-bold mb-4">üì¢ Manage Notifications</h2>

      <button className="bg-blue-500 text-white px-4 py-2 rounded mb-4" onClick={() => setModalOpen(true)}>
        ‚ûï Add Notification
      </button>

      {loading ? (
        <p>Loading notifications...</p>
      ) : (
        <Table
          data={notifications.map((n) => ({
            Message: n.message,
            "Scheduled Date": n.scheduleDate ? new Date(n.scheduleDate).toLocaleString() : "Immediate",
            Status: n.status,
            Actions: (
              <div className="flex gap-2">
                <button className="text-blue-500" onClick={() => handleEdit(n)}>‚úèÔ∏è Edit</button>
                <button className="text-red-500" onClick={() => handleDelete(n.$id)}>üóëÔ∏è Delete</button>
              </div>
            ),
          }))}
        />
      )}

      {modalOpen && (
        <Modal
          title={editingNotification ? "Edit Notification" : "Create Notification"}
          onClose={() => {
            setModalOpen(false);
            setEditingNotification(null);
            setMessage("");
            setScheduleDate("");
          }}
          onSave={handleSave}
        >
          <label className="block mb-1 font-semibold">Message</label>
          <textarea
            placeholder="Notification message..."
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            className="w-full px-4 py-2 border border-gray-300 rounded mb-4"
          />
          
          <label className="block mb-1 font-semibold">üìÖ Schedule Notification (Optional)</label>
          <input
            type="datetime-local"
            value={scheduleDate}
            onChange={(e) => setScheduleDate(e.target.value)}
            className="w-full px-4 py-2 border border-gray-300 rounded"
          />
        </Modal>
      )}
    </div>
  );
};

export default NotificationsPage;
-e [1;34m===== ./pages/student/exam-instructions/[id].jsx =====[0m
import React, { useEffect, useState } from "react";
import { useRouter } from "next/router";
import { databases } from "../../../utils/appwrite";
import { getCurrentStudentSession } from "../../../utils/auth";
import { formatDateTimeUTC } from "../../../utils/date";
import { BookOpen, AlertTriangle, CheckSquare, Palette, MousePointerClick, Clock, Info, Shield, ArrowRight, Flag, Check } from "lucide-react";

const EXAMS_COLLECTION = process.env.NEXT_PUBLIC_APPWRITE_EXAMS_COLLECTION_ID;
const DATABASE_ID = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;

// Helper component for individual instruction points
const InstructionItem = ({ icon, title, text }) => (
  <div className="flex items-start gap-4">
    <div className="flex-shrink-0 mt-1 text-indigo-500 bg-indigo-100 p-2 rounded-full">{icon}</div>
    <div>
        <h4 className="font-semibold text-gray-800">{title}</h4>
        <p className="text-gray-600 text-sm">{text}</p>
    </div>
  </div>
);

// Helper component for the palette guide
const PaletteGuide = ({ color, text }) => (
    <div className="flex items-center gap-3 p-2 bg-gray-50 rounded-md">
        <div className={`w-8 h-8 rounded-md ${color} flex items-center justify-center text-white font-bold text-sm shadow-inner`}>Q</div>
        <span className="text-sm text-gray-700">{text}</span>
    </div>
);


const ExamInstructionsPage = () => {
  const router = useRouter();
  const { id: examId } = router.query;
  const [exam, setExam] = useState(null);
  const [loading, setLoading] = useState(true);
  const [instructionsRead, setInstructionsRead] = useState(false);

  useEffect(() => {
    const studentSession = getCurrentStudentSession();
    if (!studentSession) {
      router.replace("/login");
      return;
    }
    if (!examId) return;

    databases.getDocument(DATABASE_ID, EXAMS_COLLECTION, examId)
      .then((doc) => {
        setExam(doc);
      })
      .catch((err) => {
          console.error("Failed to fetch exam details:", err);
      })
      .finally(() => {
        setLoading(false);
      });
  }, [examId, router]);

  if (loading) {
    return <div className="min-h-screen flex items-center justify-center text-gray-500">Loading Exam Details...</div>;
  }
  if (!exam) {
    return <div className="min-h-screen flex items-center justify-center text-red-500">Error: Exam not found or could not be loaded.</div>;
  }

  return (
    <div className="min-h-screen bg-gray-100 p-4 sm:p-8">
      <div className="max-w-5xl mx-auto">
        
        <header className="text-center mb-8">
            <h1 className="text-4xl font-bold text-gray-800 bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent">{exam.name}</h1>
            <p className="text-gray-600 mt-2 max-w-2xl mx-auto">{exam.description}</p>
        </header>

        <main className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            {/* Left Column: Instructions */}
            <div className="lg:col-span-2 bg-white rounded-xl shadow-md p-6 sm:p-8">
                <h2 className="text-2xl font-bold mb-6 text-gray-800 flex items-center gap-3">
                    <Info size={24} className="text-indigo-600"/>
                    Important Instructions
                </h2>

                <div className="space-y-6">
                    <InstructionItem icon={<Clock size={20}/>} title="Timer" text={`The exam has a duration of ${exam.duration} minutes. The countdown timer in the top right corner will display the remaining time. The exam will submit automatically when the time runs out.`} />
                    <InstructionItem icon={<CheckSquare size={20}/>} title="Answering Questions" text="To answer a question, click the radio button next to your chosen option. Your answer is saved immediately. To change your answer, simply select another option." />
                    <InstructionItem icon={<ArrowRight size={20}/>} title="Navigating Questions" text="Use the 'Next' and 'Previous' buttons to move between questions. You can also jump to any question by clicking its number in the Question Palette." />
                    <InstructionItem icon={<Flag size={20}/>} title="Mark for Review" text="If you are unsure about an answer, you can use the 'Mark for Review' button. This will highlight the question in the palette, reminding you to return to it later. This does not affect your final score." />
                    <InstructionItem icon={<Check size={20}/>} title="Submitting the Exam" text="Click the 'Submit Exam' button to finish the test. You will be asked to confirm before your exam is submitted permanently. You cannot make changes after submission." />
                    <InstructionItem icon={<AlertTriangle size={20}/>} title="Do Not Refresh" text="Avoid refreshing the page or using the browser's back/forward buttons, as this may disrupt your exam session and cause loss of progress." />
                    <InstructionItem icon={<Shield size={20}/>} title="Academic Integrity" text="This is a proctored exam. Any form of malpractice, such as opening new tabs or trying to copy/paste, will be logged and may result in disqualification." />
                </div>
            </div>

            {/* Right Column: Palette and Declaration */}
            <div className="space-y-8">
                <div className="bg-white rounded-xl shadow-md p-6">
                    <h3 className="text-lg font-semibold mb-4 text-gray-700 flex items-center gap-2">
                        <Palette size={20} className="text-indigo-600"/>
                        Question Palette Guide
                    </h3>
                    <div className="grid grid-cols-1 gap-3">
                        <PaletteGuide color="bg-gray-400" text="You have not visited the question yet." />
                        <PaletteGuide color="bg-green-500" text="You have answered the question." />
                        <PaletteGuide color="bg-yellow-500" text="You have marked the question for review." />
                        <PaletteGuide color="bg-blue-600" text="This is the current question you are viewing." />
                    </div>
                </div>

                <div className="bg-white rounded-xl shadow-md p-6">
                     <h3 className="text-lg font-semibold mb-4 text-gray-700 flex items-center gap-2">
                        <BookOpen size={20} className="text-indigo-600"/>
                        Declaration
                    </h3>
                    <div className="bg-indigo-50 p-4 rounded-lg border border-indigo-200">
                        <label className="flex items-start gap-3 cursor-pointer">
                        <input
                            type="checkbox"
                            checked={instructionsRead}
                            onChange={() => setInstructionsRead(!instructionsRead)}
                            className="mt-1 h-5 w-5 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500"
                        />
                        <p className="text-sm text-gray-800">
                            I have read and understood all the instructions. I agree to abide by the rules of the examination.
                        </p>
                        </label>
                    </div>
                     <button
                        className="w-full mt-6 px-8 py-4 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-all duration-300 font-semibold text-lg disabled:bg-gray-400 disabled:cursor-not-allowed shadow-lg hover:shadow-indigo-300 disabled:shadow-none transform hover:-translate-y-1 disabled:transform-none"
                        onClick={() => router.push(`/student/exams/take?examId=${exam.$id}`)}
                        disabled={!instructionsRead}
                    >
                        Start Exam
                    </button>
                </div>
            </div>
        </main>
      </div>
    </div>
  );
};

export default ExamInstructionsPage;
-e [1;34m===== ./pages/student/exams/take.jsx =====[0m
import React, { useState, useEffect, useCallback, useRef } from 'react';
import { databases, ID, Query } from '../../../utils/appwrite';
import { getCurrentStudentSession } from '../../../utils/auth';
import { useRouter } from 'next/router';
import { Clock, ChevronLeft, ChevronRight, Eye, Maximize2 } from 'lucide-react';

// Environment Variables
const DATABASE_ID = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;
const EXAMS_COLLECTION_ID = process.env.NEXT_PUBLIC_APPWRITE_EXAMS_COLLECTION_ID;
const QUESTIONS_COLLECTION_ID = process.env.NEXT_PUBLIC_APPWRITE_QUESTIONS_COLLECTION_ID;
const EXAM_QUESTIONS_COLLECTION_ID = process.env.NEXT_PUBLIC_APPWRITE_EXAM_QUESTIONS_COLLECTION_ID;
const RESPONSES_COLLECTION_ID = process.env.NEXT_PUBLIC_APPWRITE_RESPONSES_COLLECTION_ID;
const RESULTS_COLLECTION_ID = process.env.NEXT_PUBLIC_APPWRITE_RESULTS_COLLECTION_ID;
const ENROLLMENTS_COLLECTION_ID = process.env.NEXT_PUBLIC_APPWRITE_ENROLLMENTS_COLLECTION_ID;
const SESSIONS_COLLECTION_ID = process.env.NEXT_PUBLIC_APPWRITE_STUDENT_SESSIONS_COLLECTION_ID;
const ATTEMPTS_COLLECTION_ID = process.env.NEXT_PUBLIC_APPWRITE_EXAM_ATTEMPTS_COLLECTION_ID;

const TakeExam = () => {
    const [exam, setExam] = useState(null);
    const [questions, setQuestions] = useState([]);
    const [examQuestionMappings, setExamQuestionMappings] = useState([]);
    const [answers, setAnswers] = useState({});
    const [markedForReview, setMarkedForReview] = useState({});
    const [responseDocs, setResponseDocs] = useState({});
    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [studentInfo, setStudentInfo] = useState(null);
    const [timeLeft, setTimeLeft] = useState(null);
    const [showSubmitConfirm, setShowSubmitConfirm] = useState(false);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [examStartTime, setExamStartTime] = useState(null);
    const [attemptId, setAttemptId] = useState(null);
    const [securityWarning, setSecurityWarning] = useState(null);
    const [violationCount, setViolationCount] = useState({
        tabSwitch: 0,
        fullscreenExit: 0,
        copyPaste: 0
    });
    const router = useRouter();
    const { examId } = router.query;

    const isSaving = useRef(false);
    const effectRan = useRef(false);

    const resolveRelationshipId = (field) => {
        if (!field) return null;
        if (Array.isArray(field) && field.length > 0) return field[0]?.$id || field[0];
        if (typeof field === 'object' && field.$id) return field.$id;
        return field;
    };

    // Security functions
    const handleVisibilityChange = useCallback(() => {
        if (document.hidden) {
            setViolationCount(prev => {
                const newCount = prev.tabSwitch + 1;
                updateAttemptViolations('tab_switch_count', newCount);
                return { ...prev, tabSwitch: newCount };
            });
            setSecurityWarning('Warning: Switching tabs is not allowed during the exam!');
            setTimeout(() => setSecurityWarning(null), 5000);
        }
    }, []);

    const enterFullscreen = useCallback(() => {
        if (!document.fullscreenElement) {
            document.documentElement.requestFullscreen()
                .then(() => {
                    // Successfully entered fullscreen
                })
                .catch(err => {
                    console.error('Fullscreen error:', err);
                    setSecurityWarning('Please allow fullscreen mode for the best experience');
                    setTimeout(() => setSecurityWarning(null), 3000);
                });
        }
    }, []);

    const handleFullscreenChange = useCallback(() => {
        if (!document.fullscreenElement) {
            setViolationCount(prev => {
                const newCount = prev.fullscreenExit + 1;
                updateAttemptViolations('full_screen_exit_count', newCount);
                return { ...prev, fullscreenExit: newCount };
            });
            setSecurityWarning('Warning: Please remain in fullscreen mode during the exam!');
            setTimeout(() => setSecurityWarning(null), 5000);
        }
    }, []);

    const handleCopyPaste = useCallback((e) => {
        e.preventDefault();
        setViolationCount(prev => {
            const newCount = prev.copyPaste + 1;
            updateAttemptViolations('copy_paste_events', newCount);
            return { ...prev, copyPaste: newCount };
        });
        setSecurityWarning('Warning: Copy-paste is disabled during the exam!');
        setTimeout(() => setSecurityWarning(null), 3000);
        return false;
    }, []);

    const disableContextMenu = (e) => {
        e.preventDefault();
        return false;
    };

    const disableDevTools = useCallback((e) => {
        // Disable F12, Ctrl+Shift+I, Ctrl+Shift+J, Ctrl+Shift+C, Ctrl+U
        if (e.keyCode === 123 || // F12
            (e.ctrlKey && e.shiftKey && e.keyCode === 73) || // Ctrl+Shift+I
            (e.ctrlKey && e.shiftKey && e.keyCode === 74) || // Ctrl+Shift+J
            (e.ctrlKey && e.shiftKey && e.keyCode === 67)) { // Ctrl+Shift+C
            e.preventDefault();
            setSecurityWarning('Warning: Developer tools are disabled during the exam!');
            setTimeout(() => setSecurityWarning(null), 3000);
            return false;
        }
        // Disable right click
        if (e.button === 2) {
            e.preventDefault();
            return false;
        }
    }, []);

    const setupSecurity = useCallback(() => {
        // Event listeners for security
        document.addEventListener('visibilitychange', handleVisibilityChange);
        document.addEventListener('fullscreenchange', handleFullscreenChange);
        document.addEventListener('copy', handleCopyPaste);
        document.addEventListener('paste', handleCopyPaste);
        document.addEventListener('cut', handleCopyPaste);
        document.addEventListener('contextmenu', disableContextMenu);
        document.addEventListener('keydown', disableDevTools);

        return () => {
            document.removeEventListener('visibilitychange', handleVisibilityChange);
            document.removeEventListener('fullscreenchange', handleFullscreenChange);
            document.removeEventListener('copy', handleCopyPaste);
            document.removeEventListener('paste', handleCopyPaste);
            document.removeEventListener('cut', handleCopyPaste);
            document.removeEventListener('contextmenu', disableContextMenu);
            document.removeEventListener('keydown', disableDevTools);
        };
    }, [handleVisibilityChange, handleFullscreenChange, handleCopyPaste, disableDevTools]);

    const updateAttemptViolations = async (field, value) => {
        if (!attemptId) return;
        try {
            await databases.updateDocument(DATABASE_ID, ATTEMPTS_COLLECTION_ID, attemptId, {
                [field]: value
            });
        } catch (err) {
            console.error('Failed to update violation count:', err);
        }
    };

    useEffect(() => {
        if (effectRan.current === false) {
            const fetchExamData = async () => {
                const session = getCurrentStudentSession();
                if (!session?.studentId) {
                    router.push('/login');
                    return;
                }
                setStudentInfo({ studentId: session.studentId, name: session.name });
                if (!examId) return;
                setLoading(true);
                setExamStartTime(new Date());

                try {
                    const examDoc = await databases.getDocument(DATABASE_ID, EXAMS_COLLECTION_ID, examId);
                    setExam(examDoc);
                    setTimeLeft(examDoc.duration * 60);

                    const existingAttempts = await databases.listDocuments(
                        DATABASE_ID, ATTEMPTS_COLLECTION_ID,
                        [Query.equal('students_id', [session.studentId]), Query.equal('exams_id', [examId]), Query.limit(1)]
                    );

                    if (existingAttempts.documents.length > 0) {
                        const existingAttempt = existingAttempts.documents[0];
                        setAttemptId(existingAttempt.$id);
                        setViolationCount({
                            tabSwitch: existingAttempt.tab_switch_count || 0,
                            fullscreenExit: existingAttempt.full_screen_exit_count || 0,
                            copyPaste: existingAttempt.copy_paste_events || 0
                        });
                        await databases.updateDocument(DATABASE_ID, ATTEMPTS_COLLECTION_ID, existingAttempt.$id, { 
                            status: 'in_progress', 
                            last_active_timestamp: new Date().toISOString() 
                        });
                    } else {
                        const attemptDoc = await databases.createDocument(DATABASE_ID, ATTEMPTS_COLLECTION_ID, ID.unique(), {
                            students_id: session.studentId, 
                            exams_id: examId, 
                            status: 'started', 
                            last_active_timestamp: new Date().toISOString(),
                            remaining_time: examDoc.duration * 60, 
                            tab_switch_count: 0, 
                            full_screen_exit_count: 0, 
                            copy_paste_events: 0,
                        });
                        setAttemptId(attemptDoc.$id);
                    }

                    const mappingsRes = await databases.listDocuments(DATABASE_ID, EXAM_QUESTIONS_COLLECTION_ID, [Query.limit(5000), Query.orderAsc('order')]);
                    const filteredMappings = mappingsRes.documents.filter(m => resolveRelationshipId(m.exam_id) === examId);
                    setExamQuestionMappings(filteredMappings);
                    
                    const questionIds = filteredMappings.map(m => resolveRelationshipId(m.question_id)).filter(Boolean);
                    if (questionIds.length > 0) {
                        const questionsRes = await databases.listDocuments(DATABASE_ID, QUESTIONS_COLLECTION_ID, [Query.equal('$id', questionIds)]);
                        const orderedQuestions = questionIds.map(id => questionsRes.documents.find(q => q.$id === id)).filter(Boolean);
                        setQuestions(orderedQuestions);

                        const prevResponsesRes = await databases.listDocuments(DATABASE_ID, RESPONSES_COLLECTION_ID, [
                            Query.equal('student_id', [session.studentId]), Query.equal('exam_id', [examId]), Query.limit(5000)
                        ]);

                        if (prevResponsesRes.documents.length > 0) {
                            const initialAnswers = {}, initialMarked = {}, initialResponseDocs = {};
                            prevResponsesRes.documents.forEach(res => {
                                const qId = resolveRelationshipId(res.question_id);
                                if (res.selected_option !== null) initialAnswers[qId] = res.selected_option;
                                initialMarked[qId] = res.marked_for_review;
                                initialResponseDocs[qId] = res.$id;
                            });
                            setAnswers(initialAnswers);
                            setMarkedForReview(initialMarked);
                            setResponseDocs(initialResponseDocs);
                        }
                    } else {
                        setQuestions([]);
                    }
                } catch (err) {
                    setError("Failed to load exam data.");
                    console.error("Fetch exam data error:", err);
                } finally {
                    setLoading(false);
                }
            };
            fetchExamData();
        }

        return () => {
            effectRan.current = true;
        };
    }, [examId, router]);

    useEffect(() => {
        if (!loading && exam) {
            const cleanup = setupSecurity();
            return cleanup;
        }
    }, [loading, exam, setupSecurity]);

    const saveResponse = useCallback(async (questionId, newAnswer, newMarkedStatus) => {
        if (isSaving.current || !studentInfo) return;
        isSaving.current = true;
        
        try {
            const responseDocId = responseDocs[questionId];
            const data = {
                student_id: studentInfo.studentId,
                exam_id: examId,
                question_id: questionId,
                marked_for_review: newMarkedStatus,
                selected_option: (newAnswer !== undefined && newAnswer !== null) ? newAnswer : null,
            };
            
            if (responseDocId) {
                await databases.updateDocument(DATABASE_ID, RESPONSES_COLLECTION_ID, responseDocId, data);
            } else {
                if (data.selected_option !== null || data.marked_for_review === true) {
                    const newDoc = await databases.createDocument(DATABASE_ID, RESPONSES_COLLECTION_ID, ID.unique(), { ...data, response_id: ID.unique() });
                    setResponseDocs(prev => ({...prev, [questionId]: newDoc.$id}));
                }
            }
        } catch (err) {
            console.error("Failed to save response:", err);
            if (err.code === 401) {
                setError("Permission Error: Cannot save answers. Please contact an administrator to check the 'responses' collection permissions.");
            }
        } finally {
            isSaving.current = false;
        }
    }, [responseDocs, studentInfo, examId]);

    const handleSubmit = useCallback(async (autoSubmit = false) => {
        if (!autoSubmit && !showSubmitConfirm) {
            setShowSubmitConfirm(true);
            return;
        }
        setIsSubmitting(true);
        setShowSubmitConfirm(false);
    
        try {
            const currentQuestionId = questions[currentQuestionIndex]?.$id;
            if (currentQuestionId) {
                await saveResponse(currentQuestionId, answers[currentQuestionId], markedForReview[currentQuestionId]);
            }
    
            let score = 0;
            let total_marks = 0;
    
            examQuestionMappings.forEach(mapping => {
                const questionId = resolveRelationshipId(mapping.question_id);
                const question = questions.find(q => q.$id === questionId);
                if (question) {
                    total_marks += mapping.marks;
                    if (answers[questionId] === question.correct_answer) {
                        score += mapping.marks;
                    }
                }
            });
    
            const percentage = total_marks > 0 ? (score / total_marks) * 100 : 0;
            const endTime = new Date();
            const time_taken = Math.round((endTime - examStartTime) / (1000 * 60));
    
            await databases.createDocument(DATABASE_ID, RESULTS_COLLECTION_ID, ID.unique(), {
                result_id: ID.unique(),
                student_id: studentInfo.studentId,
                exam_id: examId,
                score, total_marks, percentage,
                status: percentage >= 30 ? 'passed' : 'failed',
                time_taken,
                attempted_at: examStartTime.toISOString(),
                completed_at: endTime.toISOString(),
                created_at: endTime.toISOString()
            });
    
            const enrollmentsRes = await databases.listDocuments(DATABASE_ID, ENROLLMENTS_COLLECTION_ID, [Query.limit(5000)]);
            const studentEnrollment = enrollmentsRes.documents.find(enrollment =>
                resolveRelationshipId(enrollment.student_id) === studentInfo.studentId &&
                resolveRelationshipId(enrollment.exam_id) === examId
            );
    
            if (studentEnrollment) {
                await databases.updateDocument(DATABASE_ID, ENROLLMENTS_COLLECTION_ID, studentEnrollment.$id, { status: 'appeared' });
            }

            if (attemptId) {
                await databases.updateDocument(DATABASE_ID, ATTEMPTS_COLLECTION_ID, attemptId, { 
                    status: 'submitted',
                    tab_switch_count: violationCount.tabSwitch,
                    full_screen_exit_count: violationCount.fullscreenExit,
                    copy_paste_events: violationCount.copyPaste
                });
            }
    
            alert("Exam submitted successfully!");
            router.push('/student');
    
        } catch (err) {
            setError("Failed to submit exam. Please contact support.");
            console.error("Submission error:", err);
            setIsSubmitting(false);
        }
    }, [questions, answers, studentInfo, examId, router, examQuestionMappings, examStartTime, showSubmitConfirm, saveResponse, currentQuestionIndex, attemptId, violationCount]);

    useEffect(() => {
        if (timeLeft === 0) handleSubmit(true);
        if (timeLeft === null) return;
        const timer = setInterval(() => setTimeLeft(prev => prev > 0 ? prev - 1 : 0), 1000);
        return () => clearInterval(timer);
    }, [timeLeft, handleSubmit]);
    
    const handleAnswerChange = (questionId, optionIndex) => {
        const newAnswers = { ...answers, [questionId]: optionIndex };
        setAnswers(newAnswers);
        const newMarkedStatus = { ...markedForReview, [questionId]: false };
        setMarkedForReview(newMarkedStatus);
        saveResponse(questionId, optionIndex, false);
    };

    const handleMarkForReview = (questionId) => {
        const newMarkedStatusValue = !markedForReview[questionId];
        setMarkedForReview(prev => ({ ...prev, [questionId]: newMarkedStatusValue }));
        saveResponse(questionId, answers[questionId], newMarkedStatusValue);
    };

    const handleNavigation = (newIndex) => {
        const oldQuestionId = questions[currentQuestionIndex]?.$id;
        if (oldQuestionId) {
            saveResponse(oldQuestionId, answers[oldQuestionId], markedForReview[oldQuestionId]);
        }
        setCurrentQuestionIndex(newIndex);
    };

    if (loading) return <div className="min-h-screen flex items-center justify-center">Loading Exam...</div>;
    if (error) return <div className="min-h-screen flex items-center justify-center text-red-500">{error}</div>;
    if (!exam || questions.length === 0) return <div className="min-h-screen flex items-center justify-center">No questions found for this exam.</div>;

    const currentQuestion = questions[currentQuestionIndex];
    const formatTime = (seconds) => `${Math.floor(seconds / 60).toString().padStart(2, '0')}:${(seconds % 60).toString().padStart(2, '0')}`;
    
    return (
        <div className="min-h-screen bg-gray-100 flex flex-col">
            {securityWarning && (
                <div className="fixed top-0 left-0 right-0 bg-red-600 text-white text-center py-2 z-50 animate-bounce">
                    {securityWarning}
                </div>
            )}
            
            <header className="bg-white p-4 border-b flex justify-between items-center sticky top-0 z-20">
                <h1 className="text-xl font-bold">{exam.name}</h1>
                <div className="flex items-center gap-4">
                    <div className="flex items-center gap-2 font-mono text-lg">
                        <Clock size={20} />
                        <span>{formatTime(timeLeft)}</span>
                    </div>
                    <button 
                        onClick={enterFullscreen}
                        className="flex items-center gap-2 px-3 py-1 bg-blue-100 text-blue-700 rounded text-sm hover:bg-blue-200"
                    >
                        <Maximize2 size={16} /> Fullscreen
                    </button>
                    <button 
                        onClick={() => handleSubmit(false)} 
                        disabled={isSubmitting} 
                        className="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700 disabled:bg-gray-400"
                    >
                        {isSubmitting ? 'Submitting...' : 'Submit Exam'}
                    </button>
                </div>
            </header>

            <div className="flex flex-1 p-4 gap-4">
                <div className="flex-1 bg-white p-6 rounded-lg shadow-sm flex flex-col">
                    {currentQuestion && (
                        <div className="flex-1">
                            <p className="mb-2 text-sm text-gray-500">Question {currentQuestionIndex + 1} of {questions.length}</p>
                            <h2 className="text-xl font-semibold mb-4">{currentQuestion.text}</h2>
                            <div className="space-y-3">
                                {currentQuestion.options_text.map((option, index) => (
                                    <label 
                                        key={index} 
                                        className="flex items-center gap-3 p-4 border rounded-lg cursor-pointer hover:bg-gray-50 has-[:checked]:bg-blue-50 has-[:checked]:border-blue-300"
                                    >
                                        <input 
                                            type="radio" 
                                            name={currentQuestion.$id} 
                                            checked={answers[currentQuestion.$id] === index} 
                                            onChange={() => handleAnswerChange(currentQuestion.$id, index)} 
                                            className="w-4 h-4 text-blue-600" 
                                        />
                                        <span>{option}</span>
                                    </label>
                                ))}
                            </div>
                        </div>
                    )}
                    <div className="mt-6 pt-4 border-t flex justify-between items-center">
                        <button 
                            onClick={() => handleNavigation(Math.max(0, currentQuestionIndex - 1))} 
                            disabled={currentQuestionIndex === 0} 
                            className="flex items-center gap-2 px-4 py-2 rounded disabled:opacity-50 bg-gray-200 hover:bg-gray-300"
                        >
                            <ChevronLeft size={20} /> Previous
                        </button>
                        <button 
                            onClick={() => handleMarkForReview(currentQuestion.$id)} 
                            className={`px-4 py-2 rounded flex items-center gap-2 ${markedForReview[currentQuestion.$id] ? 'bg-yellow-400' : 'bg-gray-200'}`}
                        >
                            <Eye size={20} /> {markedForReview[currentQuestion.$id] ? 'Unmark' : 'Mark for Review'}
                        </button>
                        <button 
                            onClick={() => handleNavigation(Math.min(questions.length - 1, currentQuestionIndex + 1))} 
                            disabled={currentQuestionIndex === questions.length - 1} 
                            className="flex items-center gap-2 px-4 py-2 rounded disabled:opacity-50 bg-blue-600 text-white hover:bg-blue-700"
                        >
                            Next <ChevronRight size={20} />
                        </button>
                    </div>
                </div>

                <div className="w-72 bg-white p-4 rounded-lg shadow-sm">
                    <h3 className="font-bold mb-4">Question Palette</h3>
                    <div className="grid grid-cols-5 gap-2">
                        {questions.map((q, index) => {
                            const isAnswered = answers[q.$id] !== undefined;
                            const isMarked = markedForReview[q.$id];
                            const isCurrent = index === currentQuestionIndex;
                            let color = 'bg-gray-200 hover:bg-gray-300';
                            if(isAnswered) color = 'bg-green-500 text-white';
                            if(isMarked) color = 'bg-yellow-400 text-white';
                            if(isCurrent) color = 'bg-blue-600 text-white ring-2 ring-blue-300';
                            return (
                                <button 
                                    key={q.$id} 
                                    onClick={() => handleNavigation(index)} 
                                    className={`w-10 h-10 rounded text-sm ${color}`}
                                >
                                    {index + 1}
                                </button>
                            );
                        })}
                    </div>
                    <div className="mt-6 pt-4 border-t">
                        <h4 className="font-semibold mb-2">Legend:</h4>
                        <div className="flex items-center gap-2 mb-2">
                            <div className="w-4 h-4 rounded bg-gray-200"></div>
                            <span>Unanswered</span>
                        </div>
                        <div className="flex items-center gap-2 mb-2">
                            <div className="w-4 h-4 rounded bg-green-500"></div>
                            <span>Answered</span>
                        </div>
                        <div className="flex items-center gap-2">
                            <div className="w-4 h-4 rounded bg-yellow-400"></div>
                            <span>Marked</span>
                        </div>
                    </div>
                </div>
            </div>

            {showSubmitConfirm && (
                <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-30">
                    <div className="bg-white p-6 rounded-lg shadow-xl text-center">
                        <h2 className="text-xl font-bold mb-2">Confirm Submission</h2>
                        <p className="mb-6">Are you sure you want to submit your exam?</p>
                        <div className="flex justify-center gap-4">
                            <button 
                                onClick={() => setShowSubmitConfirm(false)} 
                                className="px-6 py-2 rounded bg-gray-200 hover:bg-gray-300"
                            >
                                Cancel
                            </button>
                            <button 
                                onClick={() => handleSubmit(false)} 
                                className="px-6 py-2 rounded bg-red-600 text-white hover:bg-red-700"
                            >
                                Submit
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default TakeExam;-e [1;34m===== ./pages/student/index.jsx =====[0m
import React, { useEffect, useState } from "react";
import { databases, Query } from "../../utils/appwrite";
import { useRouter } from "next/router";
import { getCurrentStudentSession } from "../../utils/auth";
import { formatDateTimeUTC } from "../../utils/date";
import { Clock, HelpCircle, CheckCircle } from "lucide-react";

const ENROLLMENTS_COLLECTION = process.env.NEXT_PUBLIC_APPWRITE_ENROLLMENTS_COLLECTION_ID;
const EXAMS_COLLECTION = process.env.NEXT_PUBLIC_APPWRITE_EXAMS_COLLECTION_ID;
const EXAM_QUESTIONS_COLLECTION = process.env.NEXT_PUBLIC_APPWRITE_EXAM_QUESTIONS_COLLECTION_ID;
const DATABASE_ID = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;

const EnrolledExamsPage = () => {
  const [loading, setLoading] = useState(true);
  const [exams, setExams] = useState([]);
  const [error, setError] = useState(null);
  const router = useRouter();

  // Helper to safely resolve Appwrite's relationship data
  const resolveRelationshipId = (field) => {
    if (!field) return null;
    if (Array.isArray(field) && field.length > 0) return field[0]?.$id || field[0];
    if (typeof field === 'object' && field.$id) return field.$id;
    return field;
  };

  useEffect(() => {
    const studentSession = getCurrentStudentSession();
    if (!studentSession || !studentSession.studentId) {
      router.replace("/login");
      return;
    }

    const fetchEnrolledExams = async () => {
      try {
        // 1. Get all data sources in parallel for efficiency
        const [enrollmentsRes, examQuestionsRes] = await Promise.all([
            databases.listDocuments(DATABASE_ID, ENROLLMENTS_COLLECTION, [Query.limit(5000)]),
            databases.listDocuments(DATABASE_ID, EXAM_QUESTIONS_COLLECTION, [Query.limit(5000)])
        ]);

        // 2. Filter enrollments for the current student
        const filteredEnrollments = enrollmentsRes.documents.filter(enrollment =>
          resolveRelationshipId(enrollment.student_id) === studentSession.studentId
        );

        if (filteredEnrollments.length === 0) {
          setExams([]);
          setLoading(false);
          return;
        }

        const examIds = filteredEnrollments.map(enrollment => resolveRelationshipId(enrollment.exam_id)).filter(Boolean);

        if (examIds.length === 0) {
          setExams([]);
          setLoading(false);
          return;
        }

        // 3. Fetch the details for only the exams the student is enrolled in
        const examsRes = await databases.listDocuments(
          DATABASE_ID,
          EXAMS_COLLECTION,
          [Query.equal("$id", examIds)]
        );

        // 4. Filter for active/upcoming exams and enrich them with status, duration, and question count
        const now = new Date();
        const activeAndUpcomingExams = examsRes.documents
          .filter(exam => exam.status === 'active' && new Date(exam.exam_date) > now)
          .map(exam => {
            // Find the specific enrollment document for this exam to check the status
            const enrollment = filteredEnrollments.find(e => resolveRelationshipId(e.exam_id) === exam.$id);
            // Count the questions for this exam from the data we already fetched
            const questionCount = examQuestionsRes.documents.filter(eq => resolveRelationshipId(eq.exam_id) === exam.$id).length;

            return {
              ...exam,
              enrollmentStatus: enrollment ? enrollment.status : 'not_appeared',
              totalQuestions: questionCount
            };
          });

        setExams(activeAndUpcomingExams);
      } catch (err) {
        console.error("Failed to fetch enrolled exams:", err);
        setError("Could not load your exams. Please try again later.");
      } finally {
        setLoading(false);
      }
    };

    fetchEnrolledExams();
  }, [router]);

  if (loading) {
    return <div className="min-h-screen flex items-center justify-center text-gray-500">Loading...</div>;
  }

  if (error) {
    return <div className="min-h-screen flex items-center justify-center text-red-500">{error}</div>;
  }

  return (
    <div className="min-h-screen bg-gray-50 p-8">
      <h1 className="text-2xl font-bold mb-6 text-gray-800">Active Exam</h1>
      {exams.length === 0 ? (
        <div className="text-center bg-white p-8 rounded-lg shadow">
          <h3 className="text-lg font-semibold text-gray-700">No Active Exam</h3>
          <p className="text-gray-500 mt-2">There is no active exam available for you at this time.</p>
        </div>
      ) : (
        <ul className="space-y-4">
          {exams.map((exam) => (
            <li key={exam.$id} className="bg-white rounded-lg shadow p-6 flex flex-col sm:flex-row sm:items-center sm:justify-between transition hover:shadow-md">
              <div>
                <div className="text-lg font-semibold text-gray-800">{exam.name}</div>
                <div className="text-gray-400 text-sm mt-2">Date: {formatDateTimeUTC(exam.exam_date)}</div>
                <div className="flex items-center gap-4 mt-2 text-sm text-gray-600">
                    <span className="flex items-center gap-1"><Clock size={14} /> {exam.duration} Minutes</span>
                    <span className="flex items-center gap-1"><HelpCircle size={14} /> {exam.totalQuestions} Questions</span>
                </div>
              </div>
              
              {exam.enrollmentStatus === 'appeared' ? (
                <div className="mt-4 sm:mt-0 flex items-center gap-2 px-6 py-3 bg-green-100 text-green-700 rounded-lg font-semibold">
                  <CheckCircle size={20} />
                  <span>Completed</span>
                </div>
              ) : (
                <button
                  className="mt-4 sm:mt-0 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-semibold"
                  onClick={() => router.push(`/student/exam-instructions/${exam.$id}`)}
                >
                  Start Exam
                </button>
              )}
            </li>
          ))}
        </ul>
      )}
    </div>
  );
};

export default EnrolledExamsPage;-e [1;34m===== ./pages/demo-login.jsx =====[0m
import React from 'react';
import Head from 'next/head';
import Link from 'next/link';
import { motion } from 'framer-motion';
import { ArrowLeft, Sparkles } from 'lucide-react';

const DemoLogin = () => {
  return (
    <>
      <Head>
        <title>Login Demo - NIELIT Tezpur EC</title>
        <meta name="description" content="Demo of the new login design" />
      </Head>

      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-indigo-50 p-8">
        <div className="max-w-4xl mx-auto">
          {/* Header */}
          <motion.div 
            className="text-center mb-12"
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6 }}
          >
            <div className="flex items-center justify-center mb-4">
              <Sparkles className="w-8 h-8 text-purple-600 mr-3" />
              <h1 className="text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                New Login Design
              </h1>
            </div>
            <p className="text-xl text-gray-600 max-w-2xl mx-auto">
              Experience the modern, beautiful, and user-friendly login interface designed for NIELIT Tezpur EC Online Exam System
            </p>
          </motion.div>

          {/* Features Grid */}
          <motion.div 
            className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6, delay: 0.2 }}
          >
            <motion.div 
              className="bg-white rounded-2xl p-6 shadow-lg border border-gray-100"
              whileHover={{ scale: 1.05, y: -5 }}
              transition={{ type: "spring", stiffness: 300 }}
            >
              <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-600 rounded-xl flex items-center justify-center mb-4">
                <span className="text-white font-bold text-xl">üé®</span>
              </div>
              <h3 className="text-xl font-semibold text-gray-800 mb-2">Modern Design</h3>
              <p className="text-gray-600">Beautiful gradients, smooth animations, and intuitive user interface</p>
            </motion.div>

            <motion.div 
              className="bg-white rounded-2xl p-6 shadow-lg border border-gray-100"
              whileHover={{ scale: 1.05, y: -5 }}
              transition={{ type: "spring", stiffness: 300 }}
            >
              <div className="w-12 h-12 bg-gradient-to-r from-green-500 to-emerald-600 rounded-xl flex items-center justify-center mb-4">
                <span className="text-white font-bold text-xl">üì±</span>
              </div>
              <h3 className="text-xl font-semibold text-gray-800 mb-2">Responsive</h3>
              <p className="text-gray-600">Perfect experience across all devices - desktop, tablet, and mobile</p>
            </motion.div>

            <motion.div 
              className="bg-white rounded-2xl p-6 shadow-lg border border-gray-100"
              whileHover={{ scale: 1.05, y: -5 }}
              transition={{ type: "spring", stiffness: 300 }}
            >
              <div className="w-12 h-12 bg-gradient-to-r from-purple-500 to-pink-600 rounded-xl flex items-center justify-center mb-4">
                <span className="text-white font-bold text-xl">‚ö°</span>
              </div>
              <h3 className="text-xl font-semibold text-gray-800 mb-2">Fast & Smooth</h3>
              <p className="text-gray-600">Optimized animations and transitions for seamless user experience</p>
            </motion.div>

            <motion.div 
              className="bg-white rounded-2xl p-6 shadow-lg border border-gray-100"
              whileHover={{ scale: 1.05, y: -5 }}
              transition={{ type: "spring", stiffness: 300 }}
            >
              <div className="w-12 h-12 bg-gradient-to-r from-orange-500 to-red-600 rounded-xl flex items-center justify-center mb-4">
                <span className="text-white font-bold text-xl">üîí</span>
              </div>
              <h3 className="text-xl font-semibold text-gray-800 mb-2">Secure</h3>
              <p className="text-gray-600">Role-based authentication with proper session management</p>
            </motion.div>

            <motion.div 
              className="bg-white rounded-2xl p-6 shadow-lg border border-gray-100"
              whileHover={{ scale: 1.05, y: -5 }}
              transition={{ type: "spring", stiffness: 300 }}
            >
              <div className="w-12 h-12 bg-gradient-to-r from-indigo-500 to-blue-600 rounded-xl flex items-center justify-center mb-4">
                <span className="text-white font-bold text-xl">üéØ</span>
              </div>
              <h3 className="text-xl font-semibold text-gray-800 mb-2">User-Friendly</h3>
              <p className="text-gray-600">Intuitive navigation and clear visual feedback for all interactions</p>
            </motion.div>

            <motion.div 
              className="bg-white rounded-2xl p-6 shadow-lg border border-gray-100"
              whileHover={{ scale: 1.05, y: -5 }}
              transition={{ type: "spring", stiffness: 300 }}
            >
              <div className="w-12 h-12 bg-gradient-to-r from-teal-500 to-cyan-600 rounded-xl flex items-center justify-center mb-4">
                <span className="text-white font-bold text-xl">‚ú®</span>
              </div>
              <h3 className="text-xl font-semibold text-gray-800 mb-2">Accessible</h3>
              <p className="text-gray-600">WCAG compliant design with proper contrast and keyboard navigation</p>
            </motion.div>
          </motion.div>

          {/* CTA Buttons */}
          <motion.div 
            className="text-center space-y-4"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6, delay: 0.4 }}
          >
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <Link href="/login">
                <motion.button
                  className="px-8 py-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-xl font-semibold hover:from-blue-700 hover:to-purple-700 transition-all duration-300 shadow-lg hover:shadow-xl flex items-center justify-center gap-2"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <span>Try New Login</span>
                  <Sparkles className="w-5 h-5" />
                </motion.button>
              </Link>

              <Link href="/">
                <motion.button
                  className="px-8 py-4 bg-white text-gray-700 rounded-xl font-semibold hover:bg-gray-50 transition-all duration-300 shadow-lg hover:shadow-xl border border-gray-200 flex items-center justify-center gap-2"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <ArrowLeft className="w-5 h-5" />
                  <span>Back to Home</span>
                </motion.button>
              </Link>
            </div>

            <p className="text-gray-500 text-sm">
              Experience the difference with our redesigned login interface
            </p>
          </motion.div>
        </div>
      </div>
    </>
  );
};

export default DemoLogin; -e [1;34m===== ./pages/api/hello.js =====[0m
// Next.js API route support: https://nextjs.org/docs/api-routes/introduction

export default function handler(req, res) {
  res.status(200).json({ name: "John Doe" });
}
-e [1;34m===== ./pages/_document.js =====[0m
import { Html, Head, Main, NextScript } from "next/document";

export default function Document() {
  return (
    <Html lang="en">
      <Head />
      <body className="antialiased">
        <Main />
        <NextScript />
      </body>
    </Html>
  );
}
-e [1;34m===== ./pages/_app.js =====[0m
import "../styles/globals.css";
import { useRouter } from "next/router";
import AdminLayout from "../components/AdminLayout";
import Navbar from "../components/Navbar";
import { AuthProvider } from "../hooks/useAuth";
import { useState, useCallback, useMemo } from "react";
import StudentHeader from "../components/StudentHeader";

function MyApp({ Component, pageProps }) {
  const router = useRouter();
  const [sidebarOpen, setSidebarOpen] = useState(true);

  const isAdminRoute = router.pathname.startsWith("/admin");
  const isStudentRoute = router.pathname.startsWith("/student");
  const isPublicRoute = !isAdminRoute && !isStudentRoute;

  // Optimized toggle function with useCallback
  const toggleSidebar = useCallback(() => {
    console.log('Toggle sidebar clicked, current state:', sidebarOpen);
    setSidebarOpen(prev => !prev);
  }, [sidebarOpen]);

  // Memoize layout components to prevent unnecessary re-renders
  const adminLayout = useMemo(() => (
    <>
        <Navbar isAdmin={true} toggleSidebar={toggleSidebar} />
          <AdminLayout sidebarOpen={sidebarOpen} toggleSidebar={toggleSidebar}>
            <Component {...pageProps} />
          </AdminLayout>
    </>
  ), [sidebarOpen, toggleSidebar, Component, pageProps]);

  // Minimal student layout: just Navbar and Component
  const studentLayout = useMemo(() => (
    <>
      <StudentHeader />
      <Component {...pageProps} />
    </>
  ), [Component, pageProps]);

    return (
    <AuthProvider>
      {isAdminRoute && adminLayout}
      {isStudentRoute && studentLayout}
      {isPublicRoute && <Component {...pageProps} />}
    </AuthProvider>
    );
}

export default MyApp;-e [1;34m===== ./pages/login.jsx =====[0m
import React, { useState, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { User, Lock, LogIn, Eye, EyeOff, GraduationCap, Shield } from "lucide-react";
import { useRouter } from "next/router";
import { loginAdmin, loginStudent, getCurrentStudentSession } from "../utils/auth";
import { account } from "../utils/appwrite";
import Head from "next/head";

const Login = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [role, setRole] = useState("student");
  const [loading, setLoading] = useState(true); // Start with loading true
  const [error, setError] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const router = useRouter();

  useEffect(() => {
    const checkSession = async () => {
      try {
        // Check for admin session first
        await account.get();
        router.replace('/admin');
        return;
      } catch (_adminError) {
        // No admin session, check for student session
        const studentSession = getCurrentStudentSession();
        if (studentSession) {
          router.replace('/student');
          return;
        }
      }
      // If no sessions are found, stop loading
      setLoading(false);
    };

    checkSession();
  }, [router]);

  const handleLogin = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError("");

    try {
      if (role === "admin") {
        await loginAdmin(email, password);
        router.push("/admin");
      } else {
        const studentSession = await loginStudent(email, password);
        // Use sessionStorage to ensure session ends when tab is closed
        sessionStorage.setItem('studentSession', JSON.stringify(studentSession));
        router.push("/student");
      }
    } catch (error) {
      setError(error.message);
      setLoading(false);
    }
  };

  if (loading) {
      return (
        <div className="min-h-screen flex items-center justify-center bg-gray-50">
            <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
            <p className="ml-4 text-gray-600">Checking session...</p>
        </div>
      );
  }

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        duration: 0.6,
        staggerChildren: 0.1
      }
    }
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0 }
  };

  return (
    <>
      <Head>
        <title>Login - NIELIT Tezpur EC Online Exam System</title>
        <meta name="description" content="Secure login for NIELIT Tezpur EC Online Exam System" />
        <link rel="icon" href="https://mimitmalout.ac.in/NIELIT.png" />
      </Head>

      <div className="min-h-screen flex">
        {/* Left Side - Branding & Info */}
        <motion.div
          className="hidden lg:flex lg:w-1/2 bg-gradient-to-br from-blue-600 via-purple-600 to-indigo-700 relative overflow-hidden"
          initial={{ opacity: 0, x: -50 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.8 }}
        >
          {/* Background Pattern */}
          <div className="absolute inset-0 bg-black/10"></div>
          <div className="absolute top-0 left-0 w-full h-full">
            <div className="absolute top-20 left-20 w-72 h-72 bg-white/10 rounded-full blur-3xl"></div>
            <div className="absolute bottom-20 right-20 w-96 h-96 bg-white/5 rounded-full blur-3xl"></div>
            <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-64 h-64 bg-white/5 rounded-full blur-2xl"></div>
          </div>

          {/* Content */}
          <div className="relative z-10 flex flex-col justify-center items-center text-white p-12">
            <motion.div
              initial={{ scale: 0.8, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              transition={{ duration: 0.8, delay: 0.2 }}
              className="text-center"
            >
              <div className="mb-8">
                <img
                  src="https://mimitmalout.ac.in/NIELIT.png"
                  alt="NIELIT Logo"
                  className="w-24 h-24 mx-auto mb-6 filter brightness-0 invert"
                />
                <h1 className="text-4xl font-bold mb-4">NIELIT Tezpur EC</h1>
                <h2 className="text-2xl font-light mb-6">Online Exam System</h2>
              </div>

              <div className="space-y-6 max-w-md">
                <motion.div
                  className="flex items-center space-x-4 p-4 bg-white/10 rounded-lg backdrop-blur-sm"
                  variants={itemVariants}
                >
                  <Shield className="w-8 h-8 text-blue-200" />
                  <div className="text-left">
                    <h3 className="font-semibold">Secure Platform</h3>
                    <p className="text-blue-100 text-sm">Advanced security measures to protect your data</p>
                  </div>
                </motion.div>

                <motion.div
                  className="flex items-center space-x-4 p-4 bg-white/10 rounded-lg backdrop-blur-sm"
                  variants={itemVariants}
                >
                  <GraduationCap className="w-8 h-8 text-blue-200" />
                  <div className="text-left">
                    <h3 className="font-semibold">Professional Exams</h3>
                    <p className="text-blue-100 text-sm">Comprehensive testing environment for students</p>
                  </div>
                </motion.div>
                 <motion.div
                  className="flex items-center space-x-4 p-4 bg-white/10 rounded-lg backdrop-blur-sm"
                  variants={itemVariants}
                >
                  <div className="w-8 h-8 bg-blue-200 rounded-full flex items-center justify-center">
                    <span className="text-blue-800 font-bold text-sm">‚úì</span>
                  </div>
                  <div className="text-left">
                    <h3 className="font-semibold">Real-time Results</h3>
                    <p className="text-blue-100 text-sm">Instant feedback and detailed analytics</p>
                  </div>
                </motion.div>
              </div>
            </motion.div>
          </div>
        </motion.div>

        {/* Right Side - Login Form */}
        <motion.div
          className="flex-1 flex items-center justify-center p-8 bg-gray-50"
          initial={{ opacity: 0, x: 50 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.8 }}
        >
          <motion.div
            className="w-full max-w-md"
            variants={containerVariants}
            initial="hidden"
            animate="visible"
          >
            {/* Mobile Logo */}
            <motion.div
              className="lg:hidden text-center mb-8"
              variants={itemVariants}
            >
              <img
                src="https://mimitmalout.ac.in/NIELIT.png"
                alt="NIELIT Logo"
                className="w-16 h-16 mx-auto mb-4"
              />
              <h1 className="text-2xl font-bold text-gray-800">NIELIT Tezpur EC</h1>
              <p className="text-gray-600">Online Exam System</p>
            </motion.div>

            {/* Login Card */}
            <motion.div
              className="bg-white rounded-2xl shadow-2xl p-8 border border-gray-100"
              variants={itemVariants}
            >
              <div className="text-center mb-8">
                <h2 className="text-3xl font-bold text-gray-800 mb-2">
                  Welcome Back
                </h2>
                <p className="text-gray-600">
                  Sign in to access your dashboard
                </p>
              </div>

              {/* Role Toggle */}
              <motion.div
                className="flex justify-center mb-8"
                variants={itemVariants}
              >
                <div className="relative inline-flex items-center bg-gray-100 rounded-xl p-1 shadow-inner">
                   <motion.button
                    className={`px-6 py-3 rounded-lg text-sm font-medium transition-all duration-300 relative z-10 ${
                      role === "student"
                        ? "text-white"
                        : "text-gray-600 hover:text-gray-800"
                    }`}
                    onClick={() => setRole("student")}
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    <GraduationCap className="w-4 h-4 inline mr-2" />
                    Student
                  </motion.button>
                  <motion.button
                    className={`px-6 py-3 rounded-lg text-sm font-medium transition-all duration-300 relative z-10 ${
                      role === "admin"
                        ? "text-white"
                        : "text-gray-600 hover:text-gray-800"
                    }`}
                    onClick={() => setRole("admin")}
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    <Shield className="w-4 h-4 inline mr-2" />
                    Admin
                  </motion.button>
                  <motion.div
                    className="absolute top-1 left-1 w-1/2 h-[calc(100%-8px)] bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg"
                    animate={{
                      x: role === "student" ? 0 : "100%"
                    }}
                    transition={{ type: "spring", stiffness: 300, damping: 30 }}
                  />
                </div>
              </motion.div>

              {/* Error Message */}
              <AnimatePresence>
                {error && (
                  <motion.div
                    className="mb-6 p-4 bg-red-50 border border-red-200 text-red-700 rounded-xl flex items-center gap-3"
                    initial={{ opacity: 0, y: -10, scale: 0.95 }}
                    animate={{ opacity: 1, y: 0, scale: 1 }}
                    exit={{ opacity: 0, y: -10, scale: 0.95 }}
                    transition={{ duration: 0.3 }}
                  >
                    <div className="w-5 h-5 bg-red-100 rounded-full flex items-center justify-center">
                      <span className="text-red-600 text-xs">!</span>
                    </div>
                    <span className="text-sm font-medium">{error}</span>
                  </motion.div>
                )}
              </AnimatePresence>

              {/* Form */}
              <form onSubmit={handleLogin} className="space-y-6">
                {/* Email Input */}
                <motion.div variants={itemVariants}>
                  <label className="block text-sm font-semibold text-gray-700 mb-3">
                    Email Address
                  </label>
                  <div className="relative group">
                    <input
                      type="email"
                      className="w-full px-4 py-4 pl-12 bg-gray-50 border-2 border-gray-200 rounded-xl focus:outline-none focus:border-blue-500 focus:bg-white transition-all duration-300 text-gray-800 placeholder-gray-400"
                      placeholder="Enter your email"
                      value={email}
                      onChange={(e) => setEmail(e.target.value)}
                      required
                    />
                    <User
                      size={20}
                      className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 group-focus-within:text-blue-500 transition-colors duration-300"
                    />
                  </div>
                </motion.div>

                {/* Password Input */}
                <motion.div variants={itemVariants}>
                  <label className="block text-sm font-semibold text-gray-700 mb-3">
                    Password
                  </label>
                  <div className="relative group">
                    <input
                      type={showPassword ? "text" : "password"}
                      className="w-full px-4 py-4 pl-12 pr-12 bg-gray-50 border-2 border-gray-200 rounded-xl focus:outline-none focus:border-blue-500 focus:bg-white transition-all duration-300 text-gray-800 placeholder-gray-400"
                      placeholder="Enter your password"
                      value={password}
                      onChange={(e) => setPassword(e.target.value)}
                      required
                    />
                    <Lock
                      size={20}
                      className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 group-focus-within:text-blue-500 transition-colors duration-300"
                    />
                    <button
                      type="button"
                      onClick={() => setShowPassword(!showPassword)}
                      className="absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 transition-colors duration-300"
                    >
                      {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}
                    </button>
                  </div>
                </motion.div>

                {/* Submit Button */}
                <motion.div variants={itemVariants}>
                  <motion.button
                    type="submit"
                    className="w-full bg-gradient-to-r from-blue-600 to-purple-600 text-white py-4 rounded-xl font-semibold hover:from-blue-700 hover:to-purple-700 focus:outline-none focus:ring-4 focus:ring-blue-500/20 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300 shadow-lg hover:shadow-xl"
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                    disabled={loading}
                  >
                    {loading ? (
                      <div className="flex items-center justify-center gap-3">
                        <div className="w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                        <span>Signing In...</span>
                      </div>
                    ) : (
                      <div className="flex items-center justify-center gap-3">
                        <LogIn size={20} />
                        <span>Sign In</span>
                      </div>
                    )}
                  </motion.button>
                </motion.div>
              </form>

              {/* Footer */}
              <motion.div
                className="mt-8 text-center"
                variants={itemVariants}
              >
                <p className="text-sm text-gray-500">
                  Need help? Contact your administrator
                </p>
              </motion.div>
            </motion.div>
          </motion.div>
        </motion.div>
      </div>
    </>
  );
};

export default Login;
-e [1;34m===== ./pages/index.jsx =====[0m
import React from "react";
import { motion } from "framer-motion";
import { useRouter } from "next/router";
import { Shield, GraduationCap, Clock, Award, Users, BookOpen, ArrowRight } from "lucide-react";
import Head from "next/head";

const Home = () => {
  const router = useRouter();

  const features = [
    {
      icon: Shield,
      title: "Secure Platform",
      description: "Advanced security measures to protect your data and ensure exam integrity"
    },
    {
      icon: GraduationCap,
      title: "Professional Exams",
      description: "Comprehensive testing environment designed for educational excellence"
    },
    {
      icon: Clock,
      title: "Real-time Monitoring",
      description: "Live tracking and monitoring of exam progress and performance"
    },
    {
      icon: Award,
      title: "Instant Results",
      description: "Get immediate feedback and detailed analytics after completion"
    },
    {
      icon: Users,
      title: "Multi-role Support",
      description: "Separate interfaces for administrators and students"
    },
    {
      icon: BookOpen,
      title: "Comprehensive Management",
      description: "Complete exam lifecycle management from creation to results"
    }
  ];

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        duration: 0.6,
        staggerChildren: 0.1
      }
    }
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0 }
  };

  return (
    <>
      <Head>
        <title>NIELIT Tezpur EC - Online Exam System</title>
        <meta name="description" content="Professional online examination system for NIELIT Tezpur EC" />
        <link rel="icon" href="https://mimitmalout.ac.in/NIELIT.png" />
      </Head>

      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50">
        {/* Navigation */}
        <nav className="bg-white/80 backdrop-blur-md border-b border-gray-200 sticky top-0 z-50">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex justify-between items-center h-16">
              <div className="flex items-center space-x-3">
                <img
                  src="https://mimitmalout.ac.in/NIELIT.png"
                  alt="NIELIT Logo"
                  className="w-8 h-8"
                />
                <span className="text-xl font-bold text-gray-800">NIELIT Tezpur EC</span>
              </div>
              <div className="flex space-x-4">
                <motion.button
                  onClick={() => router.push('/login')}
                  className="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  Login
                </motion.button>
                <motion.button
                  onClick={() => router.push('/login')}
                  className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center space-x-2"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <span>Get Started</span>
                  <ArrowRight className="w-4 h-4" />
                </motion.button>
              </div>
            </div>
          </div>
        </nav>

        {/* Hero Section */}
        <motion.section 
          className="relative overflow-hidden"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.8 }}
        >
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20">
            <div className="text-center">
              <motion.div
                initial={{ scale: 0.8, opacity: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                transition={{ duration: 0.8, delay: 0.2 }}
                className="mb-8"
              >
                <img 
                  src="https://mimitmalout.ac.in/NIELIT.png" 
                  alt="NIELIT Logo"
                  className="w-24 h-24 mx-auto mb-6"
                />
              </motion.div>
              
              <motion.h1 
                className="text-5xl md:text-6xl font-bold text-gray-900 mb-6"
                initial={{ y: 30, opacity: 0 }}
                animate={{ y: 0, opacity: 1 }}
                transition={{ duration: 0.8, delay: 0.3 }}
              >
                Online Exam System
              </motion.h1>
              
              <motion.p 
                className="text-xl text-gray-600 mb-8 max-w-3xl mx-auto"
                initial={{ y: 30, opacity: 0 }}
                animate={{ y: 0, opacity: 1 }}
                transition={{ duration: 0.8, delay: 0.4 }}
              >
                Professional, secure, and comprehensive online examination platform designed for 
                educational excellence at NIELIT Tezpur EC.
              </motion.p>
              
              <motion.div
                className="flex flex-col sm:flex-row gap-4 justify-center"
                initial={{ y: 30, opacity: 0 }}
                animate={{ y: 0, opacity: 1 }}
                transition={{ duration: 0.8, delay: 0.5 }}
              >
                <motion.button
                  onClick={() => router.push('/login')}
                  className="px-8 py-4 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-lg font-semibold flex items-center justify-center space-x-2"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <Shield className="w-5 h-5" />
                  <span>Admin Login</span>
                </motion.button>
                <motion.button
                  onClick={() => router.push('/login')}
                  className="px-8 py-4 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors text-lg font-semibold flex items-center justify-center space-x-2"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <GraduationCap className="w-5 h-5" />
                  <span>Student Login</span>
                </motion.button>
              </motion.div>
            </div>
          </div>
        </motion.section>

        {/* Features Section */}
        <motion.section 
          className="py-20 bg-white"
                variants={containerVariants}
                initial="hidden"
          whileInView="visible"
          viewport={{ once: true }}
              >
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <motion.div 
              className="text-center mb-16"
                  variants={itemVariants}
            >
              <h2 className="text-4xl font-bold text-gray-900 mb-4">
                Why Choose Our Platform?
              </h2>
              <p className="text-xl text-gray-600 max-w-3xl mx-auto">
                Built with modern technology and security in mind, our platform provides 
                everything you need for successful online examinations.
              </p>
            </motion.div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
              {features.map((feature, index) => (
                <motion.div
                  key={index}
                  className="p-6 bg-gray-50 rounded-xl hover:bg-gray-100 transition-colors"
                  variants={itemVariants}
                  whileHover={{ y: -5 }}
                >
                  <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mb-4">
                    <feature.icon className="w-6 h-6 text-blue-600" />
                  </div>
                  <h3 className="text-xl font-semibold text-gray-900 mb-2">
                    {feature.title}
                  </h3>
                  <p className="text-gray-600">
                    {feature.description}
                  </p>
                </motion.div>
              ))}
            </div>
          </div>
        </motion.section>

        {/* CTA Section */}
        <motion.section 
          className="py-20 bg-gradient-to-r from-blue-600 to-indigo-700"
          initial={{ opacity: 0 }}
          whileInView={{ opacity: 1 }}
          viewport={{ once: true }}
          transition={{ duration: 0.8 }}
        >
          <div className="max-w-4xl mx-auto text-center px-4 sm:px-6 lg:px-8">
            <h2 className="text-4xl font-bold text-white mb-4">
              Ready to Get Started?
            </h2>
            <p className="text-xl text-blue-100 mb-8">
              Join thousands of students and administrators who trust our platform for their examination needs.
            </p>
            <motion.button
              onClick={() => router.push('/login')}
              className="px-8 py-4 bg-white text-blue-600 rounded-lg hover:bg-gray-100 transition-colors text-lg font-semibold flex items-center justify-center space-x-2 mx-auto"
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              <span>Start Now</span>
              <ArrowRight className="w-5 h-5" />
            </motion.button>
          </div>
        </motion.section>

        {/* Footer */}
        <footer className="bg-gray-900 text-white py-12">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="text-center">
              <div className="flex items-center justify-center space-x-3 mb-4">
                <img 
                  src="https://mimitmalout.ac.in/NIELIT.png" 
                  alt="NIELIT Logo"
                  className="w-8 h-8 filter brightness-0 invert"
                />
                <span className="text-xl font-bold">NIELIT Tezpur EC</span>
              </div>
              <p className="text-gray-400">
                Professional online examination system for educational excellence
              </p>
              <p className="text-gray-500 text-sm mt-4">
                ¬© 2024 NIELIT Tezpur EC. All rights reserved.
              </p>
              </div>
          </div>
        </footer>
      </div>
    </>
  );
};

export default Home; -e [1;34m===== ./pages/test/responses-test.js =====[0m
import { useState, useEffect } from 'react';
import { databases } from '../../utils/appwrite';
import { ID, Query } from 'appwrite';

const ResponsesTestPage = () => {
  const [responses, setResponses] = useState([]);
  const [students, setStudents] = useState([]);
  const [exams, setExams] = useState([]);
  const [questions, setQuestions] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [formData, setFormData] = useState({
    response_id: '',
    student_id: '',
    exam_id: '',
    question_id: '',
    selected_option: 0
  });
  const [editingId, setEditingId] = useState(null);

  const databaseId = '67a5a946002e8a51f8fe';
  const collectionId = 'responses';

  // Collection attributes
  const collectionAttributes = [
    { name: 'response_id', type: 'string', description: 'Unique identifier for the response', size: 36, required: true },
    { name: 'student_id', type: 'relationship', description: 'Reference to the student document', relationType: 'manyToOne', relatedCollection: 'students' },
    { name: 'exam_id', type: 'relationship', description: 'Reference to the exam document', relationType: 'manyToOne', relatedCollection: 'exams' },
    { name: 'question_id', type: 'relationship', description: 'Reference to the question document', relationType: 'manyToOne', relatedCollection: 'questions' },
    { name: 'selected_option', type: 'integer', description: 'Option selected by student (0-3)', min: 0, max: 3, required: true },
    { name: '$id', type: 'string', description: 'Document ID' },
    { name: '$createdAt', type: 'datetime', description: 'Creation timestamp' },
    { name: '$updatedAt', type: 'datetime', description: 'Last update timestamp' },
    { name: '$permissions', type: 'array', description: 'Permission settings for the document' },
    { name: '$databaseId', type: 'string', description: 'Database ID' },
    { name: '$collectionId', type: 'string', description: 'Collection ID' }
  ];

  const fetchAllData = async () => {
    setLoading(true);
    try {
      const [responsesRes, studentsRes, examsRes, questionsRes] = await Promise.all([
        databases.listDocuments(databaseId, collectionId, [Query.limit(100), Query.orderDesc('$createdAt')]),
        databases.listDocuments(databaseId, 'students', [Query.limit(100)]),
        databases.listDocuments(databaseId, 'exams', [Query.limit(100)]),
        databases.listDocuments(databaseId, 'questions', [Query.limit(100)])
      ]);

      setResponses(responsesRes.documents);
      setStudents(studentsRes.documents);
      setExams(examsRes.documents);
      setQuestions(questionsRes.documents);
    } catch (err) {
      setError(err.message);
      console.error('Fetch error:', err);
    } finally {
      setLoading(false);
    }
  };

  const resolveRelationshipId = (field) => {
    if (!field) return null;
    if (typeof field === 'object' && field.$id) return field.$id;
    if (Array.isArray(field) && field.length > 0) return field[0]?.$id || field[0];
    return field;
  };

  const getStudentName = (studentId) => {
    const resolvedId = resolveRelationshipId(studentId);
    const student = students.find(s => s.$id === resolvedId || s.student_id === resolvedId);
    return student ? `${student.name} (${student.student_id})` : 'Unknown Student';
  };

  const getExamName = (examId) => {
    const resolvedId = resolveRelationshipId(examId);
    const exam = exams.find(e => e.$id === resolvedId || e.exam_id === resolvedId);
    return exam ? `${exam.name} (${exam.exam_id})` : 'Unknown Exam';
  };

  const getQuestionText = (questionId) => {
    const resolvedId = resolveRelationshipId(questionId);
    const question = questions.find(q => q.$id === resolvedId || q.question_id === resolvedId);
    return question?.text?.substring(0, 50) || `Question ${question?.question_id || 'Unknown'}`;
  };

  const formatDate = (timestamp) => {
    if (!timestamp) return 'N/A';
    const date = new Date(timestamp);
    return date.toLocaleString();
  };

  const formatRelationship = (relationship) => {
    if (!relationship) return 'N/A';
    if (Array.isArray(relationship)) {
      return relationship.map(r => r.$id || r).join(', ');
    }
    if (typeof relationship === 'object') {
      return relationship.$id || 'Object';
    }
    return relationship;
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ 
      ...prev, 
      [name]: value 
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      const data = {
        response_id: formData.response_id || ID.unique(),
        student_id: formData.student_id,
        exam_id: formData.exam_id,
        question_id: formData.question_id,
        selected_option: parseInt(formData.selected_option)
      };

      if (editingId) {
        await databases.updateDocument(databaseId, collectionId, editingId, data);
      } else {
        await databases.createDocument(databaseId, collectionId, ID.unique(), data);
      }

      await fetchAllData();
      resetForm();
    } catch (err) {
      setError(err.message);
      console.error('Submission error:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleEdit = (response) => {
    setFormData({
      response_id: response.response_id,
      student_id: resolveRelationshipId(response.student_id) || '',
      exam_id: resolveRelationshipId(response.exam_id) || '',
      question_id: resolveRelationshipId(response.question_id) || '',
      selected_option: response.selected_option
    });
    setEditingId(response.$id);
  };

  const handleDelete = async (id) => {
    if (window.confirm('Are you sure you want to delete this response?')) {
      try {
        await databases.deleteDocument(databaseId, collectionId, id);
        await fetchAllData();
        if (editingId === id) resetForm();
      } catch (err) {
        setError(err.message);
      }
    }
  };

  const resetForm = () => {
    setFormData({
      response_id: '',
      student_id: '',
      exam_id: '',
      question_id: '',
      selected_option: 0
    });
    setEditingId(null);
  };

  useEffect(() => {
    fetchAllData();
  }, []);

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-6">Exam Responses Management</h1>

      {error && (
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4">
          <p>{error}</p>
        </div>
      )}

      {/* Collection Attributes Section */}
      <div className="bg-white p-6 rounded-lg shadow mb-6">
        <h2 className="text-xl font-semibold mb-4">Responses Collection Attributes</h2>
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Attribute</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Details</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {collectionAttributes.map((attr, index) => (
                <tr key={index}>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{attr.name}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{attr.type}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {attr.size && `Size: ${attr.size}`}
                    {attr.relationType && `Relation: ${attr.relationType}`}
                    {attr.relatedCollection && `Related: ${attr.relatedCollection}`}
                    {attr.min !== undefined && `Min: ${attr.min}`}
                    {attr.max !== undefined && `Max: ${attr.max}`}
                    {attr.required && 'Required'}
                  </td>
                  <td className="px-6 py-4 text-sm text-gray-500">{attr.description}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        {/* Form Section */}
        <div className="bg-white p-6 rounded-lg shadow">
          <h2 className="text-xl font-semibold mb-4">
            {editingId ? 'Edit Response' : 'Add New Response'}
          </h2>
          <form onSubmit={handleSubmit} className="space-y-4">
            {!editingId && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Response ID</label>
                <input
                  type="text"
                  name="response_id"
                  value={formData.response_id}
                  onChange={handleChange}
                  className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
                  placeholder="Leave empty to auto-generate"
                  disabled={loading}
                  maxLength={36}
                />
              </div>
            )}

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Student</label>
              <select
                name="student_id"
                value={formData.student_id}
                onChange={handleChange}
                className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
                required
                disabled={loading}
              >
                <option value="">Select Student</option>
                {students.map((student) => (
                  <option key={student.$id} value={student.$id}>
                    {student.name} ({student.student_id})
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Exam</label>
              <select
                name="exam_id"
                value={formData.exam_id}
                onChange={handleChange}
                className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
                required
                disabled={loading}
              >
                <option value="">Select Exam</option>
                {exams.map((exam) => (
                  <option key={exam.$id} value={exam.$id}>
                    {exam.name} ({exam.exam_id})
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Question</label>
              <select
                name="question_id"
                value={formData.question_id}
                onChange={handleChange}
                className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
                required
                disabled={loading}
              >
                <option value="">Select Question</option>
                {questions.map((question) => (
                  <option key={question.$id} value={question.$id}>
                    {question.text?.substring(0, 50) || `Question ${question.question_id}`}
                    {question.text?.length > 50 ? '...' : ''}
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Selected Option</label>
              <select
                name="selected_option"
                value={formData.selected_option}
                onChange={handleChange}
                className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
                required
                disabled={loading}
              >
                <option value="0">Option 0</option>
                <option value="1">Option 1</option>
                <option value="2">Option 2</option>
                <option value="3">Option 3</option>
              </select>
            </div>

            <div className="flex space-x-2">
              <button
                type="submit"
                disabled={loading}
                className={`px-4 py-2 rounded-md text-white ${loading ? 'bg-blue-400' : 'bg-blue-600 hover:bg-blue-700'}`}
              >
                {loading ? (editingId ? 'Updating...' : 'Adding...') : (editingId ? 'Update' : 'Add')}
              </button>
              {editingId && (
                <button
                  type="button"
                  onClick={resetForm}
                  className="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600"
                >
                  Cancel
                </button>
              )}
            </div>
          </form>
        </div>

        {/* List Section */}
        <div className="bg-white p-6 rounded-lg shadow">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold">Responses List</h2>
            <button
              onClick={fetchAllData}
              disabled={loading}
              className="text-sm bg-gray-100 hover:bg-gray-200 px-3 py-1 rounded"
            >
              Refresh
            </button>
          </div>

          {loading && responses.length === 0 ? (
            <div className="text-center py-8">
              <p>Loading responses...</p>
            </div>
          ) : responses.length === 0 ? (
            <div className="text-center py-8">
              <p>No responses found</p>
            </div>
          ) : (
            <div className="space-y-4">
              {responses.map((response) => (
                <div key={response.$id} className="border border-gray-200 rounded-lg p-4 hover:bg-gray-50">
                  <div className="flex justify-between items-start">
                    <div>
                      <h3 className="font-medium">Response {response.response_id}</h3>
                      <p className="text-sm text-gray-600">
                        {getStudentName(response.student_id)} - {getExamName(response.exam_id)}
                      </p>
                      <p className="text-sm text-gray-600 mt-1">
                        {getQuestionText(response.question_id)}
                      </p>
                      <div className="mt-2 grid grid-cols-2 gap-2 text-xs">
                        <div>
                          <span className="font-semibold">Selected Option:</span> {response.selected_option}
                        </div>
                        <div>
                          <span className="font-semibold">Student ID:</span> {formatRelationship(response.student_id)}
                        </div>
                        <div>
                          <span className="font-semibold">Exam ID:</span> {formatRelationship(response.exam_id)}
                        </div>
                        <div>
                          <span className="font-semibold">Question ID:</span> {formatRelationship(response.question_id)}
                        </div>
                        <div>
                          <span className="font-semibold">Created:</span> {formatDate(response.$createdAt)}
                        </div>
                        <div>
                          <span className="font-semibold">Updated:</span> {formatDate(response.$updatedAt)}
                        </div>
                      </div>
                    </div>
                    <div className="flex flex-col items-end space-y-1">
                      <span className="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs">
                        Option: {response.selected_option}
                      </span>
                      <span className="px-2 py-1 bg-purple-100 text-purple-800 rounded-full text-xs">
                        Response ID: {response.response_id}
                      </span>
                      <span className="px-2 py-1 bg-yellow-100 text-yellow-800 rounded-full text-xs">
                        Database: {response.$databaseId}
                      </span>
                      <span className="px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs">
                        Collection: {response.$collectionId}
                      </span>
                    </div>
                  </div>

                  <div className="mt-3 flex space-x-2">
                    <button
                      onClick={() => handleEdit(response)}
                      className="text-sm text-blue-600 hover:text-blue-800 px-2 py-1 rounded hover:bg-blue-50"
                    >
                      Edit
                    </button>
                    <button
                      onClick={() => handleDelete(response.$id)}
                      className="text-sm text-red-600 hover:text-red-800 px-2 py-1 rounded hover:bg-red-50"
                    >
                      Delete
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ResponsesTestPage;-e [1;34m===== ./pages/test/questions-test.js =====[0m
// pages/test/questions-test.js
import { useState, useEffect, useCallback } from 'react';
import { databases, storage } from '../../utils/appwrite';
import { ID } from 'appwrite';
import { Query } from 'appwrite';

const QuestionsTestPage = () => {
  const [questions, setQuestions] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [formData, setFormData] = useState({
    question_id: '',
    text: '',
    image_id: '',
    options_text: ['', '', '', ''],
    options_image: ['', '', '', ''],
    correct_answer: 0,
    difficulty: 'easy',
    tags: [],
    created_by: 'test-user'
  });
  const [newTag, setNewTag] = useState('');
  const [optionImageFiles, setOptionImageFiles] = useState([null, null, null, null]);
  const [questionImageFile, setQuestionImageFile] = useState(null);
  const [editingId, setEditingId] = useState(null);
  const [questionImagePreview, setQuestionImagePreview] = useState(null);
  const [optionImagePreviews, setOptionImagePreviews] = useState([null, null, null, null]);

  const BUCKET_ID = 'questions';
  const databaseId = '67a5a946002e8a51f8fe';
  const collectionId = 'questions';

  const fetchQuestions = useCallback(async () => {
    setLoading(true);
    try {
      // const response = await databases.listDocuments(databaseId, collectionId);
      const response = await databases.listDocuments(databaseId, collectionId, [
        Query.limit(100) // Increase this number as needed
      ]);
      
      const questionsWithImages = await Promise.all(
        response.documents.map(async (question) => {
          const imageUrl = question.image_id ? await getFileUrl(question.image_id) : null;
          const optionsImageUrls = await Promise.all(
            question.options_image.map(async (imgId) => 
              imgId ? await getFileUrl(imgId) : null
            )
          );
          
          return {
            ...question,
            imageUrl,
            optionsImageUrls
          };
        })
      );
      
      setQuestions(questionsWithImages);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  }, []);

  const getFileUrl = async (fileId) => {
    try {
      return storage.getFileView(BUCKET_ID, fileId);
    } catch (err) {
      console.error("Error fetching image:", err.message);
      return null;
    }
  };

  useEffect(() => {
    fetchQuestions();
  }, [fetchQuestions]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    
    try {
      // Handle image uploads
      let questionImageId = formData.image_id;
      if (questionImageFile) {
        // Delete old image if editing
        if (editingId && formData.image_id) {
          try {
            await storage.deleteFile(BUCKET_ID, formData.image_id);
          } catch (err) {
            console.error("Error deleting old image:", err.message);
          }
        }
        const uploadResponse = await storage.createFile(BUCKET_ID, ID.unique(), questionImageFile);
        questionImageId = uploadResponse.$id;
      }

      // Handle option images
      const uploadedOptionImages = await Promise.all(
        optionImageFiles.map(async (file, index) => {
          if (file) {
            // Delete old image if editing
            if (editingId && formData.options_image[index]) {
              try {
                await storage.deleteFile(BUCKET_ID, formData.options_image[index]);
              } catch (err) {
                console.error("Error deleting old option image:", err.message);
              }
            }
            const uploadResponse = await storage.createFile(BUCKET_ID, ID.unique(), file);
            return uploadResponse.$id;
          }
          return formData.options_image[index] || '';
        })
      );

      // Create or update document
      if (editingId) {
        await databases.updateDocument(
          databaseId, 
          collectionId,
          editingId,
          {
            ...formData,
            image_id: questionImageId,
            options_text: formData.options_text.filter(opt => opt.trim() !== ''),
            options_image: uploadedOptionImages,
            tags: formData.tags
          }
        );
      } else {
        await databases.createDocument(
          databaseId, 
          collectionId,
          ID.unique(),
          {
            ...formData,
            image_id: questionImageId,
            options_text: formData.options_text.filter(opt => opt.trim() !== ''),
            options_image: uploadedOptionImages,
            tags: formData.tags
          }
        );
      }
      
      await fetchQuestions();
      resetForm();
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleEdit = (question) => {
    setEditingId(question.$id);
    setFormData({
      question_id: question.question_id,
      text: question.text,
      image_id: question.image_id,
      options_text: question.options_text || ['', '', '', ''],
      options_image: question.options_image || ['', '', '', ''],
      correct_answer: question.correct_answer || 0,
      difficulty: question.difficulty || 'easy',
      tags: question.tags || [],
      created_by: question.created_by || 'test-user'
    });
    setQuestionImagePreview(question.imageUrl || null);
    setOptionImagePreviews(question.optionsImageUrls || [null, null, null, null]);
  };

  const deleteQuestion = async (questionId) => {
    if (!window.confirm("Are you sure you want to delete this question?")) return;
    
    setLoading(true);
    try {
      // First get the question to delete its images
      const questionToDelete = questions.find(q => q.$id === questionId);
      
      // Delete question image if exists
      if (questionToDelete.image_id) {
        try {
          await storage.deleteFile(BUCKET_ID, questionToDelete.image_id);
        } catch (err) {
          console.error("Error deleting question image:", err.message);
        }
      }
      
      // Delete option images if exist
      await Promise.all(
        questionToDelete.options_image.map(async (imgId) => {
          if (imgId) {
            try {
              await storage.deleteFile(BUCKET_ID, imgId);
            } catch (err) {
              console.error("Error deleting option image:", err.message);
            }
          }
        })
      );
      
      // Delete the document
      await databases.deleteDocument(databaseId, collectionId, questionId);
      await fetchQuestions();
      
      // Reset form if editing the deleted question
      if (editingId === questionId) {
        resetForm();
      }
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const resetForm = () => {
    setFormData({
      question_id: '',
      text: '',
      image_id: '',
      options_text: ['', '', '', ''],
      options_image: ['', '', '', ''],
      correct_answer: 0,
      difficulty: 'easy',
      tags: [],
      created_by: 'test-user'
    });
    setOptionImageFiles([null, null, null, null]);
    setQuestionImageFile(null);
    setNewTag('');
    setEditingId(null);
    setQuestionImagePreview(null);
    setOptionImagePreviews([null, null, null, null]);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleOptionChange = (index, value) => {
    const newOptions = [...formData.options_text];
    newOptions[index] = value;
    setFormData(prev => ({ ...prev, options_text: newOptions }));
  };

  const handleQuestionImageChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setQuestionImageFile(file);
      setQuestionImagePreview(URL.createObjectURL(file));
    }
  };

  const handleOptionImageChange = (index, e) => {
    const file = e.target.files[0];
    if (file) {
      const newOptionFiles = [...optionImageFiles];
      newOptionFiles[index] = file;
      setOptionImageFiles(newOptionFiles);
      
      const newPreviews = [...optionImagePreviews];
      newPreviews[index] = URL.createObjectURL(file);
      setOptionImagePreviews(newPreviews);
    }
  };

  const handleAddTag = () => {
    if (newTag.trim() && !formData.tags.includes(newTag.trim())) {
      setFormData(prev => ({ ...prev, tags: [...prev.tags, newTag.trim()] }));
      setNewTag('');
    }
  };

  const handleRemoveTag = (tagToRemove) => {
    setFormData(prev => ({
      ...prev,
      tags: prev.tags.filter(tag => tag !== tagToRemove)
    }));
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-6">Questions Management</h1>
      
      {error && (
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4 rounded">
          <p>{error}</p>
        </div>
      )}
      
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* Form */}
        <div className="bg-white p-6 rounded-lg shadow">
          <h2 className="text-xl font-semibold mb-4">
            {editingId ? 'Edit Question' : 'Add New Question'}
          </h2>
          <form onSubmit={handleSubmit}>
            <div className="mb-4">
              <label className="block mb-2">Question ID</label>
              <input
                type="text"
                name="question_id"
                value={formData.question_id}
                onChange={handleChange}
                className="w-full p-2 border rounded"
                required
                disabled={editingId}
              />
            </div>
            
            <div className="mb-4">
              <label className="block mb-2">Question Text</label>
              <textarea
                name="text"
                value={formData.text}
                onChange={handleChange}
                className="w-full p-2 border rounded"
                rows="3"
                required
              />
            </div>
            
            <div className="mb-4">
              <label className="block mb-2">Question Image</label>
              <input
                type="file"
                onChange={handleQuestionImageChange}
                className="w-full p-2 border rounded"
                accept="image/*"
              />
              {questionImagePreview && (
                <div className="mt-2">
                  <img 
                    src={questionImagePreview} 
                    alt="Preview" 
                    className="max-h-40 w-auto rounded border"
                  />
                  <p className="text-sm text-gray-500 mt-1">Image preview</p>
                </div>
              )}
            </div>
            
            <div className="mb-4">
              <label className="block mb-2">Options</label>
              {formData.options_text.map((option, index) => (
                <div key={index} className="mb-4 p-3 border rounded-lg">
                  <div className="mb-2">
                    <label className="block text-sm text-gray-600 mb-1">Option {index + 1} Text</label>
                    <input
                      type="text"
                      value={option}
                      onChange={(e) => handleOptionChange(index, e.target.value)}
                      className="w-full p-2 border rounded"
                      placeholder={`Option ${index + 1}`}
                      required
                    />
                  </div>
                  
                  <div className="mb-2">
                    <label className="block text-sm text-gray-600 mb-1">Option {index + 1} Image</label>
                    <input
                      type="file"
                      onChange={(e) => handleOptionImageChange(index, e)}
                      className="w-full p-2 border rounded"
                      accept="image/*"
                    />
                    {optionImagePreviews[index] && (
                      <div className="mt-2">
                        <img 
                          src={optionImagePreviews[index]} 
                          alt={`Option ${index + 1} preview`} 
                          className="max-h-20 w-auto rounded border"
                        />
                        <p className="text-sm text-gray-500">Image preview</p>
                      </div>
                    )}
                  </div>
                  
                  <label className="inline-flex items-center mt-2">
                    <input
                      type="radio"
                      name="correct_answer"
                      checked={formData.correct_answer === index}
                      onChange={() => setFormData(prev => ({ ...prev, correct_answer: index }))}
                      className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                    />
                    <span className="ml-2 text-sm text-gray-700">Correct Answer</span>
                  </label>
                </div>
              ))}
            </div>
            
            <div className="mb-4">
              <label className="block mb-2">Difficulty</label>
              <select
                name="difficulty"
                value={formData.difficulty}
                onChange={handleChange}
                className="w-full p-2 border rounded"
              >
                <option value="easy">Easy</option>
                <option value="medium">Medium</option>
                <option value="hard">Hard</option>
              </select>
            </div>
            
            <div className="mb-4">
              <label className="block mb-2">Tags</label>
              <div className="flex mb-2">
                <input
                  type="text"
                  value={newTag}
                  onChange={(e) => setNewTag(e.target.value)}
                  className="flex-1 p-2 border rounded-l"
                  placeholder="Add tag"
                />
                <button
                  type="button"
                  onClick={handleAddTag}
                  className="bg-gray-200 px-4 rounded-r hover:bg-gray-300"
                >
                  Add
                </button>
              </div>
              <div className="flex flex-wrap gap-2">
                {formData.tags.map(tag => (
                  <span key={tag} className="bg-gray-100 px-3 py-1 rounded-full text-sm flex items-center">
                    {tag}
                    <button
                      type="button"
                      onClick={() => handleRemoveTag(tag)}
                      className="ml-2 text-gray-500 hover:text-gray-700"
                    >
                      √ó
                    </button>
                  </span>
                ))}
              </div>
            </div>
            
            <div className="flex space-x-2">
              <button
                type="submit"
                disabled={loading}
                className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 flex-1"
              >
                {loading ? 'Saving...' : editingId ? 'Update Question' : 'Add Question'}
              </button>
              {editingId && (
                <button
                  type="button"
                  onClick={resetForm}
                  className="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600"
                >
                  Cancel
                </button>
              )}
            </div>
          </form>
        </div>
        
        {/* Data Display */}
        <div className="bg-white p-6 rounded-lg shadow">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold">Questions List</h2>
            <button 
              onClick={fetchQuestions}
              disabled={loading}
              className="text-sm bg-gray-100 hover:bg-gray-200 px-3 py-1 rounded"
            >
              Refresh
            </button>
          </div>
          {loading ? (
            <p>Loading questions...</p>
          ) : questions.length === 0 ? (
            <p>No questions found</p>
          ) : (
            <div className="space-y-4">
              {questions.map(question => (
                <div 
                  key={question.$id} 
                  className="border p-4 rounded-lg hover:bg-gray-50 cursor-pointer"
                  onClick={() => handleEdit(question)}
                >
                  <div className="flex justify-between items-start">
                    <div>
                      <h3 className="font-medium">{question.question_id}</h3>
                      <div className="flex items-center gap-2 mt-1">
                        <span className={`px-2 py-0.5 rounded-full text-xs ${
                          question.difficulty === 'easy' ? 'bg-green-100 text-green-800' :
                          question.difficulty === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                          'bg-red-100 text-red-800'
                        }`}>
                          {question.difficulty}
                        </span>
                        <button
                          onClick={(e) => {
                            e.stopPropagation();
                            deleteQuestion(question.$id);
                          }}
                          className="text-red-500 hover:text-red-700 text-sm"
                          disabled={loading}
                        >
                          Delete
                        </button>
                      </div>
                    </div>
                    <span className="text-sm text-gray-500">
                      {new Date(question.$createdAt).toLocaleDateString()}
                    </span>
                  </div>
                  
                  <div className="mt-3">
                    {question.text && (
                      <p className="text-gray-700 mb-3">{question.text}</p>
                    )}
                    
                    {question.imageUrl && (
                      <div className="mb-3">
                        <img 
                          src={question.imageUrl} 
                          alt="Question" 
                          className="max-h-40 w-auto rounded border"
                        />
                      </div>
                    )}
                    
                    <div className="space-y-2">
                      {question.options_text?.map((option, index) => (
                        <div 
                          key={index} 
                          className={`p-2 rounded text-sm ${
                            question.correct_answer === index ? 
                            'bg-green-100 text-green-800 border border-green-300' : 
                            'bg-gray-100 text-gray-800'
                          }`}
                        >
                          <div className="flex items-start gap-3">
                            <div className="flex-1">
                              <p>Option {index + 1}: {option || "N/A"}</p>
                            </div>
                            {question.optionsImageUrls[index] && (
                              <div className="w-16 h-16 flex-shrink-0">
                                <img 
                                  src={question.optionsImageUrls[index]} 
                                  alt={`Option ${index + 1}`} 
                                  className="w-full h-full object-contain"
                                />
                              </div>
                            )}
                          </div>
                        </div>
                      ))}
                    </div>
                    
                    {question.tags && question.tags.length > 0 && (
                      <div className="mt-3 flex flex-wrap gap-1">
                        {question.tags.map(tag => (
                          <span key={tag} className="bg-gray-100 px-2 py-0.5 rounded-full text-xs">
                            {tag}
                          </span>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default QuestionsTestPage;-e [1;34m===== ./pages/test/exam/exams.jsx =====[0m
// pages/admin/exams/index.js
import React, { useState, useEffect, useCallback } from "react";
import AdminLayout from "../../../components/AdminLayout";
import Modal from "../../../components/Modal";
import { databases, ID, Query, Permission, Role } from "../../../utils/appwrite";
import { account } from "../../../utils/appwrite";

const ExamsPage = () => {
  const [exams, setExams] = useState([]);
  const [filteredExams, setFilteredExams] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isQuestionModalOpen, setIsQuestionModalOpen] = useState(false);
  const [isViewQuestionsModalOpen, setIsViewQuestionsModalOpen] = useState(false);
  const [selectedExam, setSelectedExam] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [selectedExamDetail, setSelectedExamDetail] = useState(null);
  const [questions, setQuestions] = useState([]);
  const [filteredQuestions, setFilteredQuestions] = useState([]);
  const [selectedQuestions, setSelectedQuestions] = useState([]);
  const [questionMarks, setQuestionMarks] = useState({});
  const [searchTerm, setSearchTerm] = useState("");
  const [difficultyFilter, setDifficultyFilter] = useState("all");
  const [tagFilter, setTagFilter] = useState("all");
  const [availableTags, setAvailableTags] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const questionsPerPage = 10;

  const initialFormData = {
    exam_id: "",
    name: "",
    description: "",
    exam_date: "",
    duration: "",
    status: "active",
  };

  const [formData, setFormData] = useState(initialFormData);

  // Environment variables
  const databaseId = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;
  const examsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_EXAMS_COLLECTION_ID;
  const questionsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_QUESTIONS_COLLECTION_ID;
  const examQuestionsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_EXAM_QUESTIONS_COLLECTION_ID;

  // Fetch exams with all columns
  const fetchExams = useCallback(async () => {
    setIsLoading(true);
    try {
      const response = await databases.listDocuments(databaseId, examsCollectionId);
      const examsWithDates = response.documents.map(exam => ({
        ...exam,
        exam_date_obj: new Date(exam.exam_date),
        created_at_obj: new Date(exam.created_at),
        modified_at_obj: exam.modified_at ? new Date(exam.modified_at) : null
      }));
      
      const sortedExams = examsWithDates.sort((a, b) => {
        const now = new Date();
        const aIsExpired = a.exam_date_obj < now;
        const bIsExpired = b.exam_date_obj < now;
        
        if (aIsExpired && !bIsExpired) return 1;
        if (!aIsExpired && bIsExpired) return -1;
        return a.exam_date_obj - b.exam_date_obj;
      });

      setExams(sortedExams);
      setFilteredExams(sortedExams);
    } catch (err) {
      console.error("Error fetching exams:", err);
      setError("Failed to load exams. Please try again.");
    } finally {
      setIsLoading(false);
    }
  }, [databaseId, examsCollectionId]);

  // Fetch all questions with all columns
  const fetchQuestions = useCallback(async () => {
    try {
      const response = await databases.listDocuments(databaseId, questionsCollectionId);
      setQuestions(response.documents);
      setFilteredQuestions(response.documents);
      
      const tags = new Set();
      response.documents.forEach(question => {
        if (question.tags && Array.isArray(question.tags)) {
          question.tags.forEach(tag => tags.add(tag));
        }
      });
      setAvailableTags(Array.from(tags).sort());
    } catch (err) {
      console.error("Error fetching questions:", err);
      setError("Failed to load questions");
    }
  }, [databaseId, questionsCollectionId]);

  // Fetch questions for a specific exam with all columns
  const fetchExamQuestions = useCallback(async (examId) => {
    try {
      const response = await databases.listDocuments(
        databaseId,
        examQuestionsCollectionId,
        [Query.equal("exam_id", examId)]
      );

      const marksMap = {};
      const questionIds = [];
      response.documents.forEach(q => {
        marksMap[q.question_id] = q.marks;
        questionIds.push(q.question_id);
      });

      setQuestionMarks(marksMap);
      return { documents: response.documents, questionIds };
    } catch (err) {
      console.error("Error fetching exam questions:", err);
      setError("Failed to load exam questions. Please try again.");
      return { documents: [], questionIds: [] };
    }
  }, [databaseId, examQuestionsCollectionId]);

  // Fetch full question details for an exam with all columns
  const fetchQuestionsForExam = useCallback(async (examId) => {
    try {
      const examQuestions = await databases.listDocuments(
        databaseId,
        examQuestionsCollectionId,
        [Query.equal("exam_id", examId)]
      );

      if (examQuestions.documents.length > 0) {
        const questionIds = examQuestions.documents.map(q => q.question_id);
        const questionsResponse = await databases.listDocuments(
          databaseId,
          questionsCollectionId,
          [Query.equal("$id", questionIds)]
        );

        const marksMap = {};
        examQuestions.documents.forEach(q => {
          marksMap[q.question_id] = q.marks;
        });

        return {
          questions: questionsResponse.documents,
          marks: marksMap,
          examQuestions: examQuestions.documents
        };
      }

      return { questions: [], marks: {}, examQuestions: [] };
    } catch (err) {
      console.error("Error fetching questions for exam:", err);
      setError("Failed to load exam questions");
      return { questions: [], marks: {}, examQuestions: [] };
    }
  }, [databaseId, questionsCollectionId, examQuestionsCollectionId]);

  useEffect(() => {
    fetchExams();
    fetchQuestions();
  }, [fetchExams, fetchQuestions]);

  // Filter questions
  useEffect(() => {
    let results = questions;
    
    if (searchTerm) {
      results = results.filter(question => 
        question.text?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        question.question_id?.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }
    
    if (difficultyFilter !== "all") {
      results = results.filter(question => 
        question.difficulty === difficultyFilter
      );
    }
    
    if (tagFilter !== "all") {
      results = results.filter(question => 
        question.tags && question.tags.includes(tagFilter)
      );
    }
    
    setFilteredQuestions(results);
    setCurrentPage(1);
  }, [searchTerm, difficultyFilter, tagFilter, questions]);

  // Modal handlers
  const openModal = (exam = null) => {
    setSelectedExam(exam);
    setFormData(
      exam ? {
        exam_id: exam.exam_id || "",
        name: exam.name || "",
        description: exam.description || "",
        exam_date: exam.exam_date ? new Date(exam.exam_date).toISOString().slice(0, 16) : "",
        duration: exam.duration?.toString() || "",
        status: exam.status || "active",
      } : initialFormData
    );
    setIsModalOpen(true);
  };

  const openQuestionModal = async (exam) => {
    setSelectedExam(exam);
    setIsLoading(true);
    try {
      const { questionIds, documents } = await fetchExamQuestions(exam.$id);
      setSelectedQuestions(questionIds);
      
      const marksMap = {};
      documents.forEach(q => {
        marksMap[q.question_id] = q.marks;
      });
      setQuestionMarks(marksMap);
      
      setIsQuestionModalOpen(true);
    } catch (err) {
      setError("Failed to load exam questions");
    } finally {
      setIsLoading(false);
    }
  };

  const openViewQuestionsModal = async (exam) => {
    setSelectedExam(exam);
    setIsLoading(true);
    try {
      const { questions: examQuestions } = await fetchQuestionsForExam(exam.$id);
      setFilteredQuestions(examQuestions);
      setIsViewQuestionsModalOpen(true);
    } catch (err) {
      setError("Failed to load exam questions");
    } finally {
      setIsLoading(false);
    }
  };

  // Close modal handlers
  const closeModal = () => {
    setIsModalOpen(false);
    setSelectedExam(null);
    setFormData(initialFormData);
    setError(null);
  };

  const closeQuestionModal = () => {
    setIsQuestionModalOpen(false);
    setSelectedExam(null);
    setSelectedQuestions([]);
    setQuestionMarks({});
    setSearchTerm("");
    setDifficultyFilter("all");
    setTagFilter("all");
  };

  const closeViewQuestionsModal = () => {
    setIsViewQuestionsModalOpen(false);
    setSelectedExam(null);
    setFilteredQuestions(questions);
  };

  // Other handlers
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleQuestionSelect = (questionId) => {
    setSelectedQuestions(prev => {
      if (prev.includes(questionId)) {
        const newMarks = {...questionMarks};
        delete newMarks[questionId];
        setQuestionMarks(newMarks);
        return prev.filter(id => id !== questionId);
      } else {
        return [...prev, questionId];
      }
    });
  };

  const handleMarksChange = (questionId, value) => {
    setQuestionMarks(prev => ({
      ...prev,
      [questionId]: parseInt(value) || 1
    }));
  };

  // Form validation
  const validateForm = (data) => {
    if (!data.exam_id.trim()) return "Exam ID is required";
    if (!data.name.trim()) return "Exam name is required";
    if (!data.exam_date) return "Exam date is required";
    if (!data.duration || isNaN(parseInt(data.duration))) return "Duration must be a valid number";
    return null;
  };

  // Save exam with all columns
  const handleSave = async (data) => {
    const validationError = validateForm(data);
    if (validationError) {
      setError(validationError);
      return;
    }

    setIsLoading(true);
    setError(null);

    try {
      const user = await account.get();
      if (!user) throw new Error("Authentication required");

      const durationInt = parseInt(data.duration, 10);
      const timestamp = new Date().toISOString();

      if (selectedExam) {
        await databases.updateDocument(
          databaseId,
          examsCollectionId,
          selectedExam.$id,
          { 
            ...data, 
            duration: durationInt, 
            modified_at: timestamp 
          }
        );
      } else {
        await databases.createDocument(
          databaseId,
          examsCollectionId,
          ID.unique(),
          {
            ...data,
            duration: durationInt,
            created_by: user.$id,
            created_at: timestamp,
            modified_at: timestamp,
          },
          [
            Permission.read(Role.any()),
            Permission.update(Role.user(user.$id)),
            Permission.delete(Role.user(user.$id))
          ]
        );
      }

      closeModal();
      await fetchExams();
    } catch (err) {
      console.error("Error saving exam:", err);
      setError(err.message || "Failed to save exam");
    } finally {
      setIsLoading(false);
    }
  };

  // Save exam questions with all columns
  const handleSaveQuestions = async () => {
    if (!selectedExam) return;

    setIsLoading(true);
    setError(null);

    try {
      const user = await account.get();
      if (!user) throw new Error("Authentication required");

      const existingQuestions = await fetchExamQuestions(selectedExam.$id);
      
      // Delete removed questions
      const questionsToDelete = existingQuestions.documents.filter(
        q => !selectedQuestions.includes(q.question_id)
      );
      
      await Promise.all(
        questionsToDelete.map(q => 
          databases.deleteDocument(databaseId, examQuestionsCollectionId, q.$id)
        )
      );

      // Add/update questions
      await Promise.all(
        selectedQuestions.map(async (questionId, index) => {
          const existing = existingQuestions.documents.find(
            q => q.question_id === questionId
          );
          
          if (existing) {
            await databases.updateDocument(
              databaseId,
              examQuestionsCollectionId,
              existing.$id,
              { 
                order: index + 1, 
                marks: questionMarks[questionId] || 1 
              }
            );
          } else {
            await databases.createDocument(
              databaseId,
              examQuestionsCollectionId,
              ID.unique(),
              {
                exam_id: selectedExam.$id,
                question_id: questionId,
                order: index + 1,
                marks: questionMarks[questionId] || 1
              },
              [
                Permission.read(Role.any()),
                Permission.update(Role.user(user.$id)),
                Permission.delete(Role.user(user.$id))
              ]
            );
          }
        })
      );

      closeQuestionModal();
    } catch (err) {
      console.error("Error saving exam questions:", err);
      setError(err.message || "Failed to save exam questions");
    } finally {
      setIsLoading(false);
    }
  };

  // Delete exam
  const deleteExam = async (examId) => {
    if (!confirm("Are you sure you want to delete this exam?")) return;

    setIsLoading(true);
    try {
      const user = await account.get();
      if (!user) throw new Error("Authentication required");

      const examQuestions = await fetchExamQuestions(examId);
      await Promise.all(
        examQuestions.documents.map(q => 
          databases.deleteDocument(databaseId, examQuestionsCollectionId, q.$id)
        )
      );

      await databases.deleteDocument(databaseId, examsCollectionId, examId);
      await fetchExams();
      closeExamDetails();
    } catch (err) {
      console.error("Error deleting exam:", err);
      setError(err.message || "Failed to delete exam");
    } finally {
      setIsLoading(false);
    }
  };

  // Helper functions
  const formatDate = (dateString) => {
    if (!dateString) return "N/A";
    const options = { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric', 
      hour: '2-digit', 
      minute: '2-digit' 
    };
    return new Date(dateString).toLocaleDateString(undefined, options);
  };

  const getExamStatus = (examDate) => {
    if (!examDate) return "Unknown";
    const now = new Date();
    const examDateObj = new Date(examDate);
    return examDateObj < now ? "Expired" : "Upcoming";
  };

  // Pagination
  const indexOfLastQuestion = currentPage * questionsPerPage;
  const indexOfFirstQuestion = indexOfLastQuestion - questionsPerPage;
  const currentQuestions = filteredQuestions.slice(indexOfFirstQuestion, indexOfLastQuestion);
  const totalPages = Math.ceil(filteredQuestions.length / questionsPerPage);

  // View components
  const viewExamDetails = (exam) => {
    setSelectedExamDetail(exam);
  };

  const closeExamDetails = () => {
    setSelectedExamDetail(null);
  };

  // Render
  return (
    <AdminLayout>
      <div className="container mx-auto px-4 py-6">
        {/* Header and Add Exam button */}
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-2xl font-bold text-gray-800">Manage Exams</h2>
          <button
            onClick={() => openModal()}
            className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition-colors"
          >
            + Add Exam
          </button>
        </div>

        {/* Error display */}
        {error && (
          <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4">
            <p>{error}</p>
          </div>
        )}

        {/* Loading state */}
        {isLoading && !exams.length ? (
          <div className="flex justify-center items-center h-64">
            <p className="text-gray-500">Loading exams...</p>
          </div>
        ) : (
          <div className="space-y-4">
            {filteredExams.map((exam) => (
              <div 
                key={exam.$id}
                onClick={() => viewExamDetails(exam)}
                className={`p-4 border rounded-lg cursor-pointer transition-all hover:shadow-md ${
                  getExamStatus(exam.exam_date) === "Expired" 
                    ? "bg-gray-50 border-gray-200" 
                    : "bg-white border-blue-100"
                }`}
              >
                <div className="flex justify-between items-start">
                  <div>
                    <h3 className="text-lg font-semibold text-gray-800">{exam.name}</h3>
                    <p className="text-sm text-gray-600">ID: {exam.exam_id}</p>
                    <p className="text-sm text-gray-600">Created by: {exam.created_by}</p>
                  </div>
                  <div className="flex items-center space-x-2">
                    <span className={`px-2 py-1 rounded-full text-xs ${
                      exam.status === "active" 
                        ? "bg-green-100 text-green-800" 
                        : exam.status === "completed" 
                          ? "bg-blue-100 text-blue-800" 
                          : "bg-gray-100 text-gray-800"
                    }`}>
                      {exam.status}
                    </span>
                    <span className={`px-2 py-1 rounded-full text-xs ${
                      getExamStatus(exam.exam_date) === "Expired" 
                        ? "bg-red-100 text-red-800" 
                        : "bg-green-100 text-green-800"
                    }`}>
                      {getExamStatus(exam.exam_date)}
                    </span>
                  </div>
                </div>
                <div className="mt-2 text-sm text-gray-600">
                  <p>Date: {formatDate(exam.exam_date)} ‚Ä¢ Duration: {exam.duration} minutes</p>
                  <p>Created: {formatDate(exam.created_at)} ‚Ä¢ Modified: {exam.modified_at ? formatDate(exam.modified_at) : "Never"}</p>
                  {exam.description && (
                    <p className="mt-1 line-clamp-2">{exam.description}</p>
                  )}
                </div>
                <div className="mt-3 flex space-x-2">
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      openQuestionModal(exam);
                    }}
                    className="text-sm bg-purple-600 hover:bg-purple-700 text-white px-3 py-1 rounded"
                  >
                    Manage Questions
                  </button>
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      openViewQuestionsModal(exam);
                    }}
                    className="text-sm bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded"
                  >
                    View Questions
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}

        {/* Exam Modal */}
        {isModalOpen && (
          <Modal
            isOpen={isModalOpen}
            title={selectedExam ? "Edit Exam" : "Add Exam"}
            onClose={closeModal}
            onSave={handleSave}
            initialData={formData}
            fields={[
              { name: "exam_id", label: "Exam ID", type: "text", required: true },
              { name: "name", label: "Exam Name", type: "text", required: true },
              { name: "description", label: "Description", type: "textarea" },
              { name: "exam_date", label: "Exam Date", type: "datetime-local", required: true },
              { name: "duration", label: "Duration (minutes)", type: "number", required: true },
              {
                name: "status",
                label: "Status",
                type: "select",
                options: ["active", "inactive", "completed"],
                required: true,
              },
            ]}
            onChange={handleInputChange}
            isLoading={isLoading}
            error={error}
          />
        )}

        {/* Question Management Modal */}
        {isQuestionModalOpen && selectedExam && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] overflow-y-auto">
              <div className="p-6">
                <div className="flex justify-between items-start mb-4">
                  <div>
                    <h3 className="text-xl font-bold text-gray-800">
                      Manage Questions for {selectedExam.name}
                    </h3>
                    <p className="text-sm text-gray-600">
                      {selectedQuestions.length} question(s) selected
                    </p>
                  </div>
                  <button
                    onClick={closeQuestionModal}
                    className="text-gray-500 hover:text-gray-700"
                  >
                    <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>

                {error && (
                  <div className="mb-4 p-3 bg-red-100 border-l-4 border-red-500 text-red-700">
                    <p>{error}</p>
                  </div>
                )}

                <div className="mb-4 grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div>
                    <label htmlFor="search" className="block text-sm font-medium text-gray-700 mb-1">
                      Search Questions
                    </label>
                    <input
                      type="text"
                      id="search"
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      placeholder="Search by text or ID..."
                      className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                  <div>
                    <label htmlFor="difficulty" className="block text-sm font-medium text-gray-700 mb-1">
                      Filter by Difficulty
                    </label>
                    <select
                      id="difficulty"
                      value={difficultyFilter}
                      onChange={(e) => setDifficultyFilter(e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                    >
                      <option value="all">All Difficulties</option>
                      <option value="easy">Easy</option>
                      <option value="medium">Medium</option>
                      <option value="hard">Hard</option>
                    </select>
                  </div>
                  <div>
                    <label htmlFor="tags" className="block text-sm font-medium text-gray-700 mb-1">
                      Filter by Tag
                    </label>
                    <div className="relative">
                      <select
                        id="tags"
                        value={tagFilter}
                        onChange={(e) => setTagFilter(e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                      >
                        <option value="all">All Tags</option>
                        {availableTags.map(tag => (
                          <option key={tag} value={tag}>{tag}</option>
                        ))}
                      </select>
                    </div>
                  </div>
                </div>

                <div className="space-y-3">
                  {currentQuestions.length > 0 ? (
                    currentQuestions.map((question) => (
                      <div 
                        key={question.$id} 
                        className={`p-4 border rounded-lg transition-colors ${
                          selectedQuestions.includes(question.$id) 
                            ? "bg-blue-50 border-blue-200" 
                            : "bg-white border-gray-200 hover:bg-gray-50"
                        }`}
                      >
                        <div className="flex items-start space-x-3">
                          <input
                            type="checkbox"
                            checked={selectedQuestions.includes(question.$id)}
                            onChange={() => handleQuestionSelect(question.$id)}
                            className="mt-1 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                          />
                          <div className="flex-1">
                            <div className="flex justify-between items-start">
                              <h4 className="font-medium text-gray-800">
                                {question.text || "Question"}
                              </h4>
                              <span className={`px-2 py-1 text-xs rounded-full ${
                                question.difficulty === "easy" 
                                  ? "bg-green-100 text-green-800" 
                                  : question.difficulty === "medium" 
                                    ? "bg-yellow-100 text-yellow-800" 
                                    : "bg-red-100 text-red-800"
                              }`}>
                                {question.difficulty}
                              </span>
                            </div>
                            <div className="mt-1 text-sm text-gray-600">
                              <span className="mr-2">ID: {question.question_id}</span>
                              <span>Type: {question.type}</span>
                              <span>Created by: {question.created_by}</span>
                              {question.tags && question.tags.length > 0 && (
                                <div className="mt-1 flex flex-wrap gap-1">
                                  {question.tags.map(tag => (
                                    <span key={tag} className="px-2 py-0.5 bg-gray-100 text-gray-700 rounded-full text-xs">
                                      {tag}
                                    </span>
                                  ))}
                                </div>
                              )}
                            </div>
                            
                            {selectedQuestions.includes(question.$id) && (
                              <div className="mt-3 flex items-center">
                                <label htmlFor={`marks-${question.$id}`} className="mr-2 text-sm text-gray-700">
                                  Marks:
                                </label>
                                <input
                                  type="number"
                                  id={`marks-${question.$id}`}
                                  min="1"
                                  max="10"
                                  value={questionMarks[question.$id] || 1}
                                  onChange={(e) => handleMarksChange(question.$id, e.target.value)}
                                  className="w-20 px-2 py-1 border border-gray-300 rounded-md text-sm"
                                />
                              </div>
                            )}
                            
                            {question.options_text && (
                              <div className="mt-2 grid grid-cols-1 md:grid-cols-2 gap-2">
                                {question.options_text.map((option, index) => (
                                  <div 
                                    key={index} 
                                    className={`text-sm p-2 rounded ${
                                      question.correct_answer === index 
                                        ? "bg-green-100 text-green-800" 
                                        : "bg-gray-100 text-gray-800"
                                    }`}
                                  >
                                    {option}
                                  </div>
                                ))}
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    ))
                  ) : (
                    <div className="text-center py-8 text-gray-500">
                      No questions found matching your criteria
                    </div>
                  )}
                </div>

                {/* Pagination */}
                {filteredQuestions.length > questionsPerPage && (
                  <div className="mt-6 flex justify-between items-center">
                    <button
                      onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
                      disabled={currentPage === 1}
                      className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors disabled:opacity-50"
                    >
                      Previous
                    </button>
                    <span className="text-sm text-gray-700">
                      Page {currentPage} of {totalPages}
                    </span>
                    <button
                      onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}
                      disabled={currentPage === totalPages}
                      className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors disabled:opacity-50"
                    >
                      Next
                    </button>
                  </div>
                )}

                <div className="mt-6 flex justify-end space-x-3">
                  <button
                    onClick={closeQuestionModal}
                    className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors"
                    disabled={isLoading}
                  >
                    Cancel
                  </button>
                  <button
                    onClick={handleSaveQuestions}
                    className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors disabled:opacity-50"
                    disabled={isLoading}
                  >
                    {isLoading ? 'Saving...' : 'Save Questions'}
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* View Questions Modal */}
        {isViewQuestionsModalOpen && selectedExam && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] overflow-y-auto">
              <div className="p-6">
                <div className="flex justify-between items-start mb-4">
                  <div>
                    <h3 className="text-xl font-bold text-gray-800">
                      Questions for {selectedExam.name}
                    </h3>
                    <p className="text-sm text-gray-600">
                      {filteredQuestions.length} question(s)
                    </p>
                  </div>
                  <button
                    onClick={closeViewQuestionsModal}
                    className="text-gray-500 hover:text-gray-700"
                  >
                    <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>

                {error && (
                  <div className="mb-4 p-3 bg-red-100 border-l-4 border-red-500 text-red-700">
                    <p>{error}</p>
                  </div>
                )}

                <div className="space-y-4">
                  {filteredQuestions.length > 0 ? (
                    filteredQuestions.map((question) => (
                      <div key={question.$id} className="p-4 border border-gray-200 rounded-lg bg-white">
                        <div className="flex justify-between items-start">
                          <h4 className="font-medium text-gray-800">
                            {question.text || "Question"}
                          </h4>
                          <div className="flex items-center space-x-2">
                            <span className={`px-2 py-1 rounded-full text-xs ${
                              question.difficulty === "easy" 
                                ? "bg-green-100 text-green-800" 
                                : question.difficulty === "medium" 
                                  ? "bg-yellow-100 text-yellow-800" 
                                  : "bg-red-100 text-red-800"
                            }`}>
                              {question.difficulty}
                            </span>
                            <span className="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs">
                              Marks: {questionMarks[question.$id] || 1}
                            </span>
                          </div>
                        </div>
                        <div className="mt-1 text-sm text-gray-600">
                          <span className="mr-2">ID: {question.question_id}</span>
                          <span>Type: {question.type}</span>
                          <span>Created by: {question.created_by}</span>
                          {question.tags && question.tags.length > 0 && (
                            <div className="mt-1 flex flex-wrap gap-1">
                              {question.tags.map(tag => (
                                <span key={tag} className="px-2 py-0.5 bg-gray-100 text-gray-700 rounded-full text-xs">
                                  {tag}
                                </span>
                              ))}
                            </div>
                          )}
                        </div>
                        
                        {question.options_text && (
                          <div className="mt-3 grid grid-cols-1 md:grid-cols-2 gap-2">
                            {question.options_text.map((option, index) => (
                              <div 
                                key={index} 
                                className={`text-sm p-2 rounded ${
                                  question.correct_answer === index 
                                    ? "bg-green-100 text-green-800" 
                                    : "bg-gray-100 text-gray-800"
                                }`}
                              >
                                {option}
                              </div>
                            ))}
                          </div>
                        )}
                      </div>
                    ))
                  ) : (
                    <div className="text-center py-8 text-gray-500">
                      No questions found for this exam
                    </div>
                  )}
                </div>

                <div className="mt-6 flex justify-end">
                  <button
                    onClick={closeViewQuestionsModal}
                    className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors"
                  >
                    Close
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Exam Details Modal */}
        {selectedExamDetail && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] overflow-y-auto">
              <div className="p-6">
                <div className="flex justify-between items-start mb-4">
                  <div>
                    <h3 className="text-xl font-bold text-gray-800">{selectedExamDetail.name}</h3>
                    <p className="text-sm text-gray-600">ID: {selectedExamDetail.exam_id}</p>
                  </div>
                  <div className="flex items-center space-x-3">
                    <span className={`px-3 py-1 rounded-full text-xs ${
                      selectedExamDetail.status === "active" 
                        ? "bg-green-100 text-green-800" 
                        : selectedExamDetail.status === "completed" 
                          ? "bg-blue-100 text-blue-800" 
                          : "bg-gray-100 text-gray-800"
                    }`}>
                      {selectedExamDetail.status}
                    </span>
                    <span className={`px-3 py-1 rounded-full text-xs ${
                      getExamStatus(selectedExamDetail.exam_date) === "Expired" 
                        ? "bg-red-100 text-red-800" 
                        : "bg-green-100 text-green-800"
                    }`}>
                      {getExamStatus(selectedExamDetail.exam_date)}
                    </span>
                    <button
                      onClick={closeExamDetails}
                      className="text-gray-500 hover:text-gray-700"
                    >
                      <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                      </svg>
                    </button>
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">
                  <div>
                    <h4 className="text-sm font-medium text-gray-500">Exam Date</h4>
                    <p className="mt-1 text-gray-800">{formatDate(selectedExamDetail.exam_date)}</p>
                  </div>
                  <div>
                    <h4 className="text-sm font-medium text-gray-500">Duration</h4>
                    <p className="mt-1 text-gray-800">{selectedExamDetail.duration} minutes</p>
                  </div>
                  <div>
                    <h4 className="text-sm font-medium text-gray-500">Created By</h4>
                    <p className="mt-1 text-gray-800">{selectedExamDetail.created_by}</p>
                  </div>
                  <div>
                    <h4 className="text-sm font-medium text-gray-500">Created At</h4>
                    <p className="mt-1 text-gray-800">{new Date(selectedExamDetail.created_at).toLocaleString()}</p>
                  </div>
                  <div>
                    <h4 className="text-sm font-medium text-gray-500">Last Modified</h4>
                    <p className="mt-1 text-gray-800">
                      {selectedExamDetail.modified_at 
                        ? new Date(selectedExamDetail.modified_at).toLocaleString() 
                        : "Never"}
                    </p>
                  </div>
                </div>

                <div className="mt-8 flex justify-end space-x-3">
                  <button
                    onClick={() => openModal(selectedExamDetail)}
                    className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
                  >
                    Edit Exam
                  </button>
                  <button
                    onClick={() => deleteExam(selectedExamDetail.$id)}
                    className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors"
                  >
                    Delete Exam
                  </button>
                  <button
                    onClick={() => openViewQuestionsModal(selectedExamDetail)}
                    className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors"
                  >
                    View Questions
                  </button>
                  <button
                    onClick={closeExamDetails}
                    className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors"
                  >
                    Close
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </AdminLayout>
  );
};

export default ExamsPage;-e [1;34m===== ./pages/test/exam/update-data.js =====[0m
// pages/test/update-data.js
import { useState, useEffect } from "react";
import { databases } from "../../../utils/appwrite";

const UpdateDataTest = () => {
  const [documents, setDocuments] = useState([]);
  const [selectedDoc, setSelectedDoc] = useState(null);
  const [formData, setFormData] = useState({
    name: "",
    description: "",
    status: "active",
  });
  const [loading, setLoading] = useState(false);
  const [success, setSuccess] = useState(false);
  const [error, setError] = useState(null);

  const databaseId = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;
  const collectionId = process.env.NEXT_PUBLIC_APPWRITE_EXAMS_COLLECTION_ID;

  const fetchDocuments = async () => {
    setLoading(true);
    try {
      const response = await databases.listDocuments(databaseId, collectionId);
      setDocuments(response.documents);
    } catch (err) {
      console.error("Error fetching documents:", err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchDocuments();
  }, []);

  const handleSelect = (doc) => {
    setSelectedDoc(doc);
    setFormData({
      name: doc.name,
      description: doc.description,
      status: doc.status,
    });
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!selectedDoc) return;

    setLoading(true);
    setError(null);
    setSuccess(false);

    try {
      await databases.updateDocument(
        databaseId,
        collectionId,
        selectedDoc.$id,
        formData
      );
      setSuccess(true);
      fetchDocuments();
    } catch (err) {
      console.error("Error updating document:", err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">Data Update Test</h1>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <h2 className="text-xl font-semibold mb-2">Select Document</h2>
          {loading && !documents.length ? (
            <p>Loading documents...</p>
          ) : (
            <div className="space-y-2">
              {documents.map((doc) => (
                <div
                  key={doc.$id}
                  onClick={() => handleSelect(doc)}
                  className={`p-3 border rounded cursor-pointer ${
                    selectedDoc?.$id === doc.$id
                      ? "bg-blue-100 border-blue-300"
                      : "bg-white hover:bg-gray-50"
                  }`}
                >
                  <h3 className="font-medium">{doc.name}</h3>
                  <p className="text-sm text-gray-600">{doc.exam_id}</p>
                </div>
              ))}
            </div>
          )}
        </div>

        <div>
          {selectedDoc ? (
            <form onSubmit={handleSubmit}>
              <h2 className="text-xl font-semibold mb-2">Edit Document</h2>
              <div className="mb-4">
                <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="name">
                  Name
                </label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  value={formData.name}
                  onChange={handleChange}
                  className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                  required
                />
              </div>

              <div className="mb-4">
                <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="description">
                  Description
                </label>
                <textarea
                  id="description"
                  name="description"
                  value={formData.description}
                  onChange={handleChange}
                  className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                />
              </div>

              <div className="mb-4">
                <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="status">
                  Status
                </label>
                <select
                  id="status"
                  name="status"
                  value={formData.status}
                  onChange={handleChange}
                  className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                >
                  <option value="active">Active</option>
                  <option value="inactive">Inactive</option>
                  <option value="completed">Completed</option>
                </select>
              </div>

              {error && (
                <div className="mb-4 bg-red-100 border-l-4 border-red-500 text-red-700 p-4">
                  <p>{error}</p>
                </div>
              )}

              {success && (
                <div className="mb-4 bg-green-100 border-l-4 border-green-500 text-green-700 p-4">
                  <p>Document updated successfully!</p>
                </div>
              )}

              <button
                type="submit"
                className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
                disabled={loading}
              >
                {loading ? "Updating..." : "Update Document"}
              </button>
            </form>
          ) : (
            <div className="bg-gray-100 p-4 rounded">
              <p>Select a document to edit</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default UpdateDataTest;-e [1;34m===== ./pages/test/exam/delete-data.js =====[0m
// pages/test/delete-data.js
import { useState, useEffect } from "react";
import { databases } from "../../../utils/appwrite";

const DeleteDataTest = () => {
  const [documents, setDocuments] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(false);
  const [selectedDoc, setSelectedDoc] = useState(null);

  const databaseId = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;
  const collectionId = process.env.NEXT_PUBLIC_APPWRITE_EXAMS_COLLECTION_ID;

  const fetchDocuments = async () => {
    setLoading(true);
    try {
      const response = await databases.listDocuments(databaseId, collectionId);
      setDocuments(response.documents);
    } catch (err) {
      console.error("Error fetching documents:", err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchDocuments();
  }, []);

  const handleDelete = async () => {
    if (!selectedDoc) return;
    if (!confirm(`Are you sure you want to delete "${selectedDoc.name}"?`)) return;

    setLoading(true);
    setError(null);
    setSuccess(false);

    try {
      await databases.deleteDocument(databaseId, collectionId, selectedDoc.$id);
      setSuccess(true);
      setSelectedDoc(null);
      fetchDocuments();
    } catch (err) {
      console.error("Error deleting document:", err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">Data Deletion Test</h1>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <h2 className="text-xl font-semibold mb-2">Documents</h2>
          {loading && !documents.length ? (
            <p>Loading documents...</p>
          ) : (
            <div className="space-y-2">
              {documents.map((doc) => (
                <div
                  key={doc.$id}
                  onClick={() => setSelectedDoc(doc)}
                  className={`p-3 border rounded cursor-pointer ${
                    selectedDoc?.$id === doc.$id
                      ? "bg-red-100 border-red-300"
                      : "bg-white hover:bg-gray-50"
                  }`}
                >
                  <h3 className="font-medium">{doc.name}</h3>
                  <p className="text-sm text-gray-600">{doc.exam_id}</p>
                </div>
              ))}
            </div>
          )}
        </div>

        <div>
          {selectedDoc ? (
            <div>
              <h2 className="text-xl font-semibold mb-2">Delete Document</h2>
              <div className="bg-white p-4 rounded shadow">
                <h3 className="text-lg font-medium mb-2">{selectedDoc.name}</h3>
                <p className="text-gray-600 mb-2">ID: {selectedDoc.exam_id}</p>
                <p className="text-gray-600 mb-4">
                  Created: {new Date(selectedDoc.$createdAt).toLocaleString()}
                </p>
                <p className="mb-4">{selectedDoc.description}</p>

                {error && (
                  <div className="mb-4 bg-red-100 border-l-4 border-red-500 text-red-700 p-4">
                    <p>{error}</p>
                  </div>
                )}

                {success && (
                  <div className="mb-4 bg-green-100 border-l-4 border-green-500 text-green-700 p-4">
                    <p>Document deleted successfully!</p>
                  </div>
                )}

                <button
                  onClick={handleDelete}
                  className="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
                  disabled={loading}
                >
                  {loading ? "Deleting..." : "Delete Document"}
                </button>
              </div>
            </div>
          ) : (
            <div className="bg-gray-100 p-4 rounded">
              <p>Select a document to delete</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default DeleteDataTest;-e [1;34m===== ./pages/test/exam/relationships.js =====[0m
// pages/test/relationships.js
import { useState, useEffect } from "react";
import { databases, Query } from "../../../utils/appwrite";

const RelationshipsTest = () => {
  const [exams, setExams] = useState([]);
  const [questions, setQuestions] = useState([]);
  const [examQuestions, setExamQuestions] = useState([]);
  const [selectedExam, setSelectedExam] = useState(null);
  const [selectedQuestions, setSelectedQuestions] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(false);

  const databaseId = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;
  const examsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_EXAMS_COLLECTION_ID;
  const questionsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_QUESTIONS_COLLECTION_ID;
  const examQuestionsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_EXAM_QUESTIONS_COLLECTION_ID;

  const fetchExams = async () => {
    setLoading(true);
    try {
      const response = await databases.listDocuments(databaseId, examsCollectionId);
      setExams(response.documents);
    } catch (err) {
      console.error("Error fetching exams:", err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const fetchQuestions = async () => {
    try {
      const response = await databases.listDocuments(databaseId, questionsCollectionId);
      setQuestions(response.documents);
    } catch (err) {
      console.error("Error fetching questions:", err);
      setError(err.message);
    }
  };

  const fetchExamQuestions = async (examId) => {
    try {
      const response = await databases.listDocuments(
        databaseId,
        examQuestionsCollectionId,
        [Query.equal("exam_id", examId)]
      );
      setExamQuestions(response.documents);
      return response.documents.map(q => q.question_id);
    } catch (err) {
      console.error("Error fetching exam questions:", err);
      setError(err.message);
      return [];
    }
  };

  useEffect(() => {
    fetchExams();
    fetchQuestions();
  }, []);

  const handleSelectExam = async (exam) => {
    setSelectedExam(exam);
    setLoading(true);
    try {
      const questionIds = await fetchExamQuestions(exam.$id);
      setSelectedQuestions(questionIds);
    } catch (err) {
      console.error("Error:", err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleQuestionToggle = (questionId) => {
    setSelectedQuestions(prev => 
      prev.includes(questionId)
        ? prev.filter(id => id !== questionId)
        : [...prev, questionId]
    );
  };

  const saveRelationships = async () => {
    if (!selectedExam) return;

    setLoading(true);
    setError(null);
    setSuccess(false);

    try {
      // First delete existing relationships
      await Promise.all(
        examQuestions.map(q => 
          databases.deleteDocument(databaseId, examQuestionsCollectionId, q.$id)
        )
      );

      // Then create new relationships
      await Promise.all(
        selectedQuestions.map((questionId, index) => 
          databases.createDocument(
            databaseId,
            examQuestionsCollectionId,
            ID.unique(),
            {
              exam_id: selectedExam.$id,
              question_id: questionId,
              order: index + 1,
              marks: 1 // Default marks
            }
          )
        )
      );

      setSuccess(true);
      fetchExamQuestions(selectedExam.$id);
    } catch (err) {
      console.error("Error saving relationships:", err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">Relationship Management Test</h1>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="md:col-span-1">
          <h2 className="text-xl font-semibold mb-2">Exams</h2>
          {loading && !exams.length ? (
            <p>Loading exams...</p>
          ) : (
            <div className="space-y-2">
              {exams.map((exam) => (
                <div
                  key={exam.$id}
                  onClick={() => handleSelectExam(exam)}
                  className={`p-3 border rounded cursor-pointer ${
                    selectedExam?.$id === exam.$id
                      ? "bg-blue-100 border-blue-300"
                      : "bg-white hover:bg-gray-50"
                  }`}
                >
                  <h3 className="font-medium">{exam.name}</h3>
                  <p className="text-sm text-gray-600">{exam.exam_id}</p>
                </div>
              ))}
            </div>
          )}
        </div>

        <div className="md:col-span-1">
          <h2 className="text-xl font-semibold mb-2">All Questions</h2>
          {loading && !questions.length ? (
            <p>Loading questions...</p>
          ) : (
            <div className="space-y-2 max-h-96 overflow-y-auto">
              {questions.map((question) => (
                <div
                  key={question.$id}
                  className={`p-3 border rounded ${
                    selectedQuestions.includes(question.$id)
                      ? "bg-green-100 border-green-300"
                      : "bg-white"
                  }`}
                >
                  <div className="flex items-start space-x-2">
                    <input
                      type="checkbox"
                      checked={selectedQuestions.includes(question.$id)}
                      onChange={() => handleQuestionToggle(question.$id)}
                      className="mt-1"
                    />
                    <div>
                      <h3 className="font-medium">{question.text || "Question"}</h3>
                      <p className="text-sm text-gray-600">ID: {question.question_id}</p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>

        <div className="md:col-span-1">
          <h2 className="text-xl font-semibold mb-2">Current Exam Questions</h2>
          {selectedExam ? (
            <div className="space-y-2">
              {loading ? (
                <p>Loading exam questions...</p>
              ) : examQuestions.length > 0 ? (
                examQuestions.map((eq) => {
                  const question = questions.find(q => q.$id === eq.question_id);
                  return (
                    <div key={eq.$id} className="p-3 border rounded bg-gray-50">
                      {question ? (
                        <>
                          <h3 className="font-medium">{question.text || "Question"}</h3>
                          <p className="text-sm text-gray-600">ID: {question.question_id}</p>
                          <p className="text-sm">Order: {eq.order}</p>
                        </>
                      ) : (
                        <p>Question not found</p>
                      )}
                    </div>
                  );
                })
              ) : (
                <p>No questions assigned to this exam</p>
              )}

              {error && (
                <div className="mt-4 bg-red-100 border-l-4 border-red-500 text-red-700 p-4">
                  <p>{error}</p>
                </div>
              )}

              {success && (
                <div className="mt-4 bg-green-100 border-l-4 border-green-500 text-green-700 p-4">
                  <p>Relationships updated successfully!</p>
                </div>
              )}

              <button
                onClick={saveRelationships}
                className="mt-4 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
                disabled={loading || !selectedExam}
              >
                {loading ? "Saving..." : "Save Relationships"}
              </button>
            </div>
          ) : (
            <div className="bg-gray-100 p-4 rounded">
              <p>Select an exam to view its questions</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default RelationshipsTest;-e [1;34m===== ./pages/test/exam/querying.js =====[0m
// pages/test/querying.js
import { useState, useEffect } from "react";
import { databases, Query } from "../../../utils/appwrite";

const QueryingTest = () => {
  const [questions, setQuestions] = useState([]);
  const [filteredQuestions, setFilteredQuestions] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [difficultyFilter, setDifficultyFilter] = useState("all");
  const [tagFilter, setTagFilter] = useState("all");
  const [availableTags, setAvailableTags] = useState([]);

  const databaseId = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;
  const collectionId = process.env.NEXT_PUBLIC_APPWRITE_QUESTIONS_COLLECTION_ID;

  const fetchQuestions = async () => {
    setLoading(true);
    try {
      const response = await databases.listDocuments(databaseId, collectionId);
      setQuestions(response.documents);
      setFilteredQuestions(response.documents);

      // Extract unique tags
      const tags = new Set();
      response.documents.forEach(question => {
        if (question.tags && Array.isArray(question.tags)) {
          question.tags.forEach(tag => tags.add(tag));
        }
      });
      setAvailableTags(Array.from(tags).sort());
    } catch (err) {
      console.error("Error fetching questions:", err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchQuestions();
  }, []);

  useEffect(() => {
    let results = questions;
    
    if (searchTerm) {
      results = results.filter(question => 
        question.text?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        question.question_id?.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }
    
    if (difficultyFilter !== "all") {
      results = results.filter(question => 
        question.difficulty === difficultyFilter
      );
    }
    
    if (tagFilter !== "all") {
      results = results.filter(question => 
        question.tags && question.tags.includes(tagFilter)
      );
    }
    
    setFilteredQuestions(results);
  }, [searchTerm, difficultyFilter, tagFilter, questions]);

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">Querying Test</h1>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <div>
          <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="search">
            Search
          </label>
          <input
            type="text"
            id="search"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            placeholder="Search questions..."
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
          />
        </div>

        <div>
          <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="difficulty">
            Difficulty
          </label>
          <select
            id="difficulty"
            value={difficultyFilter}
            onChange={(e) => setDifficultyFilter(e.target.value)}
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
          >
            <option value="all">All Difficulties</option>
            <option value="easy">Easy</option>
            <option value="medium">Medium</option>
            <option value="hard">Hard</option>
          </select>
        </div>

        <div>
          <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="tags">
            Tags
          </label>
          <select
            id="tags"
            value={tagFilter}
            onChange={(e) => setTagFilter(e.target.value)}
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
          >
            <option value="all">All Tags</option>
            {availableTags.map(tag => (
              <option key={tag} value={tag}>{tag}</option>
            ))}
          </select>
        </div>
      </div>

      {error && (
        <div className="mb-4 bg-red-100 border-l-4 border-red-500 text-red-700 p-4">
          <p>{error}</p>
        </div>
      )}

      <div className="bg-white shadow rounded-lg overflow-hidden">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                ID
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Question
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Difficulty
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Tags
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {loading && !questions.length ? (
              <tr>
                <td colSpan="4" className="px-6 py-4 text-center">
                  Loading questions...
                </td>
              </tr>
            ) : filteredQuestions.length > 0 ? (
              filteredQuestions.map((question) => (
                <tr key={question.$id}>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {question.question_id}
                  </td>
                  <td className="px-6 py-4 text-sm text-gray-900">
                    {question.text || "No text provided"}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm">
                    <span className={`px-2 py-1 rounded-full text-xs ${
                      question.difficulty === "easy" 
                        ? "bg-green-100 text-green-800" 
                        : question.difficulty === "medium" 
                          ? "bg-yellow-100 text-yellow-800" 
                          : "bg-red-100 text-red-800"
                    }`}>
                      {question.difficulty}
                    </span>
                  </td>
                  <td className="px-6 py-4 text-sm text-gray-500">
                    {question.tags && question.tags.length > 0 ? (
                      <div className="flex flex-wrap gap-1">
                        {question.tags.map(tag => (
                          <span key={tag} className="px-2 py-0.5 bg-gray-100 text-gray-700 rounded-full text-xs">
                            {tag}
                          </span>
                        ))}
                      </div>
                    ) : (
                      "No tags"
                    )}
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan="4" className="px-6 py-4 text-center">
                  No questions found matching your criteria
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      <div className="mt-4">
        <p className="text-sm text-gray-600">
          Showing {filteredQuestions.length} of {questions.length} questions
        </p>
      </div>
    </div>
  );
};

export default QueryingTest;-e [1;34m===== ./pages/test/exam/fetch-data.js =====[0m
// pages/test/fetch-data.js
import { useState, useEffect } from "react";
import { databases } from "../../../utils/appwrite";

const FetchDataTest = () => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const databaseId = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;
  const collectionId = process.env.NEXT_PUBLIC_APPWRITE_EXAMS_COLLECTION_ID;

  const fetchData = async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await databases.listDocuments(databaseId, collectionId);
      setData(response.documents);
    } catch (err) {
      console.error("Error fetching data:", err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">Data Fetching Test</h1>
      
      <div className="mb-4">
        <button
          onClick={fetchData}
          className="bg-blue-500 text-white px-4 py-2 rounded"
          disabled={loading}
        >
          {loading ? "Loading..." : "Refresh Data"}
        </button>
      </div>

      {error && (
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4">
          <p>{error}</p>
        </div>
      )}

      <div className="bg-white shadow rounded-lg overflow-hidden">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                ID
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Name
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Date
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {data.map((item) => (
              <tr key={item.$id}>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {item.exam_id}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                  {item.name}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {new Date(item.exam_date).toLocaleString()}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default FetchDataTest;-e [1;34m===== ./pages/test/exam/create-data.js =====[0m
// pages/test/create-data.js
import { useState } from "react";
import { databases, ID } from "../../../utils/appwrite";

const CreateDataTest = () => {
  const [formData, setFormData] = useState({
    exam_id: "",
    name: "",
    description: "",
    exam_date: "",
    duration: "",
  });
  const [loading, setLoading] = useState(false);
  const [success, setSuccess] = useState(false);
  const [error, setError] = useState(null);

  const databaseId = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;
  const collectionId = process.env.NEXT_PUBLIC_APPWRITE_EXAMS_COLLECTION_ID;

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    setSuccess(false);

    try {
      await databases.createDocument(
        databaseId,
        collectionId,
        ID.unique(),
        {
          ...formData,
          duration: parseInt(formData.duration),
          status: "active",
        }
      );
      setSuccess(true);
      setFormData({
        exam_id: "",
        name: "",
        description: "",
        exam_date: "",
        duration: "",
      });
    } catch (err) {
      console.error("Error creating document:", err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">Data Creation Test</h1>
      
      <form onSubmit={handleSubmit} className="max-w-md mx-auto">
        <div className="mb-4">
          <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="exam_id">
            Exam ID
          </label>
          <input
            type="text"
            id="exam_id"
            name="exam_id"
            value={formData.exam_id}
            onChange={handleChange}
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            required
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="name">
            Exam Name
          </label>
          <input
            type="text"
            id="name"
            name="name"
            value={formData.name}
            onChange={handleChange}
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            required
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="description">
            Description
          </label>
          <textarea
            id="description"
            name="description"
            value={formData.description}
            onChange={handleChange}
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="exam_date">
            Exam Date
          </label>
          <input
            type="datetime-local"
            id="exam_date"
            name="exam_date"
            value={formData.exam_date}
            onChange={handleChange}
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            required
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="duration">
            Duration (minutes)
          </label>
          <input
            type="number"
            id="duration"
            name="duration"
            value={formData.duration}
            onChange={handleChange}
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            required
            min="1"
          />
        </div>

        {error && (
          <div className="mb-4 bg-red-100 border-l-4 border-red-500 text-red-700 p-4">
            <p>{error}</p>
          </div>
        )}

        {success && (
          <div className="mb-4 bg-green-100 border-l-4 border-green-500 text-green-700 p-4">
            <p>Document created successfully!</p>
          </div>
        )}

        <button
          type="submit"
          className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
          disabled={loading}
        >
          {loading ? "Creating..." : "Create Document"}
        </button>
      </form>
    </div>
  );
};

export default CreateDataTest;-e [1;34m===== ./pages/test/students-test.js =====[0m
// pages/students-test.js
import { useState, useEffect } from 'react';
import { databases } from '../../utils/appwrite';
import { ID } from 'appwrite';

const StudentsTestPage = () => {
  const [students, setStudents] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [formData, setFormData] = useState({
    student_id: '',
    name: '',
    email: '',
    password: '',
    status: 'active',
    registered_at: new Date().toISOString(),
    registered_by: 'test-user'
  });
  const [editingId, setEditingId] = useState(null);

  const databaseId = '67a5a946002e8a51f8fe';
  const collectionId = 'students';

  const fetchStudents = async () => {
    setLoading(true);
    try {
      const response = await databases.listDocuments(databaseId, collectionId);
      setStudents(response.documents);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      if (editingId) {
        // Update existing student
        await databases.updateDocument(
          databaseId,
          collectionId,
          editingId,
          {
            ...formData,
            // Don't update password unless it's changed (you might want to add password change logic)
            password: formData.password || students.find(s => s.$id === editingId).password
          }
        );
      } else {
        // Create new student
        await databases.createDocument(
          databaseId, 
          collectionId,
          ID.unique(),
          formData
        );
      }
      await fetchStudents();
      resetForm();
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleEdit = (student) => {
    setFormData({
      student_id: student.student_id,
      name: student.name,
      email: student.email,
      password: '', // Don't show password when editing (or you could show a placeholder)
      status: student.status,
      registered_at: student.registered_at,
      registered_by: student.registered_by
    });
    setEditingId(student.$id);
  };

  const handleDelete = async (id) => {
    if (!window.confirm('Are you sure you want to delete this student?')) return;
    
    setLoading(true);
    try {
      await databases.deleteDocument(databaseId, collectionId, id);
      await fetchStudents();
      if (editingId === id) {
        resetForm();
      }
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const resetForm = () => {
    setFormData({
      student_id: '',
      name: '',
      email: '',
      password: '',
      status: 'active',
      registered_at: new Date().toISOString(),
      registered_by: 'test-user'
    });
    setEditingId(null);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  useEffect(() => {
    fetchStudents();
  }, []);

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-6">Students Management</h1>
      
      {error && (
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4 rounded">
          <p>{error}</p>
        </div>
      )}
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        {/* Form */}
        <div className="bg-white p-6 rounded-lg shadow">
          <h2 className="text-xl font-semibold mb-4">
            {editingId ? 'Edit Student' : 'Add New Student'}
          </h2>
          <form onSubmit={handleSubmit}>
            <div className="mb-4">
              <label className="block mb-2">Student ID</label>
              <input
                type="text"
                name="student_id"
                value={formData.student_id}
                onChange={handleChange}
                className="w-full p-2 border rounded"
                required
                disabled={editingId} // Disable editing of student_id
              />
            </div>
            <div className="mb-4">
              <label className="block mb-2">Name</label>
              <input
                type="text"
                name="name"
                value={formData.name}
                onChange={handleChange}
                className="w-full p-2 border rounded"
                required
              />
            </div>
            <div className="mb-4">
              <label className="block mb-2">Email</label>
              <input
                type="email"
                name="email"
                value={formData.email}
                onChange={handleChange}
                className="w-full p-2 border rounded"
                required
              />
            </div>
            <div className="mb-4">
              <label className="block mb-2">Password</label>
              <input
                type="password"
                name="password"
                value={formData.password}
                onChange={handleChange}
                className="w-full p-2 border rounded"
                placeholder={editingId ? "Leave blank to keep current" : ""}
                required={!editingId}
              />
            </div>
            <div className="mb-4">
              <label className="block mb-2">Status</label>
              <select
                name="status"
                value={formData.status}
                onChange={handleChange}
                className="w-full p-2 border rounded"
              >
                <option value="active">Active</option>
                <option value="inactive">Inactive</option>
              </select>
            </div>
            <div className="flex space-x-2">
              <button
                type="submit"
                disabled={loading}
                className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 flex-1"
              >
                {loading ? 'Saving...' : editingId ? 'Update Student' : 'Add Student'}
              </button>
              {editingId && (
                <button
                  type="button"
                  onClick={resetForm}
                  className="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600"
                >
                  Cancel
                </button>
              )}
            </div>
          </form>
        </div>
        
        {/* Data Display */}
        <div className="bg-white p-6 rounded-lg shadow">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold">Students List</h2>
            <button 
              onClick={fetchStudents}
              disabled={loading}
              className="text-sm bg-gray-100 hover:bg-gray-200 px-3 py-1 rounded"
            >
              Refresh
            </button>
          </div>
          {loading ? (
            <p>Loading students...</p>
          ) : students.length === 0 ? (
            <p>No students found</p>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full">
                <thead>
                  <tr className="border-b">
                    <th className="text-left p-2">ID</th>
                    <th className="text-left p-2">Name</th>
                    <th className="text-left p-2">Email</th>
                    <th className="text-left p-2">Status</th>
                    <th className="text-left p-2">Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {students.map(student => (
                    <tr key={student.$id} className="border-t hover:bg-gray-50">
                      <td className="p-2">{student.student_id}</td>
                      <td className="p-2">{student.name}</td>
                      <td className="p-2">{student.email}</td>
                      <td className="p-2">
                        <span className={`px-2 py-1 rounded-full text-xs ${
                          student.status === 'active' ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
                        }`}>
                          {student.status}
                        </span>
                      </td>
                      <td className="p-2">
                        <div className="flex space-x-2">
                          <button
                            onClick={() => handleEdit(student)}
                            className="text-blue-600 hover:text-blue-800 text-sm"
                          >
                            Edit
                          </button>
                          <button
                            onClick={() => handleDelete(student.$id)}
                            className="text-red-600 hover:text-red-800 text-sm"
                          >
                            Delete
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default StudentsTestPage;-e [1;34m===== ./pages/test/exam-questions-test.js =====[0m
import { useState, useEffect } from 'react';
import { databases } from '../../utils/appwrite';
import { ID, Query } from 'appwrite';

const ExamQuestionsTestPage = () => {
  const [examQuestions, setExamQuestions] = useState([]);
  const [exams, setExams] = useState([]);
  const [questions, setQuestions] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [formData, setFormData] = useState({
    exam_id: '',
    question_id: '',
    order: 1,
    marks: 1
  });
  const [editingId, setEditingId] = useState(null);

  const databaseId = '67a5a946002e8a51f8fe';
  const collectionId = 'exam_questions';

  // Collection attributes
  const collectionAttributes = [
    { name: 'exam_id', type: 'relationship', description: 'Reference to the exam document' },
    { name: 'question_id', type: 'relationship', description: 'Reference to the question document' },
    { name: 'order', type: 'integer', description: 'Order of the question in the exam' },
    { name: 'marks', type: 'integer', description: 'Marks allocated for this question' },
    { name: '$id', type: 'string', description: 'Document ID' },
    { name: '$createdAt', type: 'datetime', description: 'Creation timestamp' },
    { name: '$updatedAt', type: 'datetime', description: 'Last update timestamp' },
    { name: '$permissions', type: 'array', description: 'Permission settings for the document' },
    { name: '$databaseId', type: 'string', description: 'Database ID' },
    { name: '$collectionId', type: 'string', description: 'Collection ID' }
  ];

  const fetchAllData = async () => {
    setLoading(true);
    try {
      const [examQuestionsRes, examsRes, questionsRes] = await Promise.all([
        databases.listDocuments(databaseId, collectionId, [Query.limit(100), Query.orderAsc('order')]),
        databases.listDocuments(databaseId, 'exams', [Query.limit(100)]),
        databases.listDocuments(databaseId, 'questions', [Query.limit(100)])
      ]);

      setExamQuestions(examQuestionsRes.documents);
      setExams(examsRes.documents);
      setQuestions(questionsRes.documents);
    } catch (err) {
      setError(err.message);
      console.error('Fetch error:', err);
    } finally {
      setLoading(false);
    }
  };

  const resolveRelationshipId = (field) => {
    if (!field) return null;
    if (typeof field === 'object' && field.$id) return field.$id;
    if (Array.isArray(field) && field.length > 0) return field[0]?.$id || field[0];
    return field;
  };

  const getExamName = (examId) => {
    const resolvedId = resolveRelationshipId(examId);
    const exam = exams.find(e => e.$id === resolvedId || e.exam_id === resolvedId);
    if (exam) {
      return `${exam.name} (${exam.exam_id})`;
    }
    return 'Unknown Exam';
  };

  const getQuestionText = (questionId) => {
    const resolvedId = resolveRelationshipId(questionId);
    const question = questions.find(q => q.$id === resolvedId || q.question_id === resolvedId);
    return question?.text?.substring(0, 50) || `Question ${question?.question_id || 'Unknown'}`;
  };

  const getQuestionDifficulty = (questionId) => {
    const resolvedId = resolveRelationshipId(questionId);
    const question = questions.find(q => q.$id === resolvedId || q.question_id === resolvedId);
    return question?.difficulty ? `(${question.difficulty})` : '';
  };

  const formatDate = (timestamp) => {
    if (!timestamp) return 'N/A';
    const date = new Date(timestamp);
    return date.toLocaleString();
  };

  const formatRelationship = (relationship) => {
    if (!relationship) return 'N/A';
    if (Array.isArray(relationship)) {
      return relationship.map(r => r.$id || r).join(', ');
    }
    if (typeof relationship === 'object') {
      return relationship.$id || 'Object';
    }
    return relationship;
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      const data = {
        exam_id: [formData.exam_id],
        question_id: [formData.question_id],
        order: parseInt(formData.order),
        marks: parseInt(formData.marks)
      };

      if (editingId) {
        await databases.updateDocument(databaseId, collectionId, editingId, data);
      } else {
        await databases.createDocument(databaseId, collectionId, ID.unique(), data);
      }

      await fetchAllData();
      resetForm();
    } catch (err) {
      setError(err.message);
      console.error('Submission error:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleEdit = (examQuestion) => {
    setFormData({
      exam_id: resolveRelationshipId(examQuestion.exam_id) || '',
      question_id: resolveRelationshipId(examQuestion.question_id) || '',
      order: examQuestion.order,
      marks: examQuestion.marks
    });
    setEditingId(examQuestion.$id);
  };

  const handleDelete = async (id) => {
    if (window.confirm('Are you sure you want to delete this exam question?')) {
      try {
        await databases.deleteDocument(databaseId, collectionId, id);
        await fetchAllData();
        if (editingId === id) resetForm();
      } catch (err) {
        setError(err.message);
      }
    }
  };

  const resetForm = () => {
    setFormData({
      exam_id: '',
      question_id: '',
      order: 1,
      marks: 1
    });
    setEditingId(null);
  };

  useEffect(() => {
    fetchAllData();
  }, []);

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-6">Exam Questions Management</h1>

      {error && (
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4">
          <p>{error}</p>
        </div>
      )}

      {/* Collection Attributes Section */}
      <div className="bg-white p-6 rounded-lg shadow mb-6">
        <h2 className="text-xl font-semibold mb-4">Exam Questions Collection Attributes</h2>
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Attribute</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {collectionAttributes.map((attr, index) => (
                <tr key={index}>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{attr.name}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{attr.type}</td>
                  <td className="px-6 py-4 text-sm text-gray-500">{attr.description}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        {/* Form Section */}
        <div className="bg-white p-6 rounded-lg shadow">
          <h2 className="text-xl font-semibold mb-4">
            {editingId ? 'Edit Exam Question' : 'Add New Exam Question'}
          </h2>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Exam</label>
              <select
                name="exam_id"
                value={formData.exam_id}
                onChange={handleChange}
                className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
                required
                disabled={loading}
              >
                <option value="">Select Exam</option>
                {exams.map((exam) => (
                  <option key={exam.$id} value={exam.$id}>
                    {exam.name} ({exam.exam_id})
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Question</label>
              <select
                name="question_id"
                value={formData.question_id}
                onChange={handleChange}
                className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
                required
                disabled={loading}
              >
                <option value="">Select Question</option>
                {questions.map((question) => (
                  <option key={question.$id} value={question.$id}>
                    {question.text?.substring(0, 50) || `Question ${question.question_id}`}
                    {question.text?.length > 50 ? '...' : ''}
                  </option>
                ))}
              </select>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Order</label>
                <input
                  type="number"
                  name="order"
                  value={formData.order}
                  onChange={handleChange}
                  className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
                  min="1"
                  required
                  disabled={loading}
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Marks</label>
                <input
                  type="number"
                  name="marks"
                  value={formData.marks}
                  onChange={handleChange}
                  className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
                  min="-10"
                  max="10"
                  required
                  disabled={loading}
                />
              </div>
            </div>

            <div className="flex space-x-2">
              <button
                type="submit"
                disabled={loading}
                className={`px-4 py-2 rounded-md text-white ${loading ? 'bg-blue-400' : 'bg-blue-600 hover:bg-blue-700'}`}
              >
                {loading ? (editingId ? 'Updating...' : 'Adding...') : (editingId ? 'Update' : 'Add')}
              </button>
              {editingId && (
                <button
                  type="button"
                  onClick={resetForm}
                  className="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600"
                >
                  Cancel
                </button>
              )}
            </div>
          </form>
        </div>

        {/* List Section */}
        <div className="bg-white p-6 rounded-lg shadow">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold">Exam Questions List</h2>
            <button
              onClick={fetchAllData}
              disabled={loading}
              className="text-sm bg-gray-100 hover:bg-gray-200 px-3 py-1 rounded"
            >
              Refresh
            </button>
          </div>

          {loading && examQuestions.length === 0 ? (
            <div className="text-center py-8">
              <p>Loading exam questions...</p>
            </div>
          ) : examQuestions.length === 0 ? (
            <div className="text-center py-8">
              <p>No exam questions found</p>
            </div>
          ) : (
            <div className="space-y-4">
              {examQuestions.map((eq) => (
                <div key={eq.$id} className="border border-gray-200 rounded-lg p-4 hover:bg-gray-50">
                  <div className="flex justify-between items-start">
                    <div>
                      <h3 className="font-medium">{getExamName(eq.exam_id)}</h3>
                      <p className="text-sm text-gray-600">
                        {getQuestionText(eq.question_id)} {getQuestionDifficulty(eq.question_id)}
                      </p>
                      <div className="mt-2 grid grid-cols-2 gap-2 text-xs">
                        <div>
                          <span className="font-semibold">Exam ID:</span> {formatRelationship(eq.exam_id)}
                        </div>
                        <div>
                          <span className="font-semibold">Question ID:</span> {formatRelationship(eq.question_id)}
                        </div>
                        <div>
                          <span className="font-semibold">ID:</span> {eq.$id}
                        </div>
                        <div>
                          <span className="font-semibold">Created:</span> {formatDate(eq.$createdAt)}
                        </div>
                        <div>
                          <span className="font-semibold">Updated:</span> {formatDate(eq.$updatedAt)}
                        </div>
                        <div>
                          <span className="font-semibold">Permissions:</span> {eq.$permissions?.join(', ') || 'N/A'}
                        </div>
                      </div>
                    </div>
                    <div className="flex flex-col items-end space-y-1">
                      <span className="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs">
                        Order: {eq.order}
                      </span>
                      <span className="px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs">
                        Marks: {eq.marks}
                      </span>
                      <span className="px-2 py-1 bg-purple-100 text-purple-800 rounded-full text-xs">
                        Database: {eq.$databaseId}
                      </span>
                      <span className="px-2 py-1 bg-yellow-100 text-yellow-800 rounded-full text-xs">
                        Collection: {eq.$collectionId}
                      </span>
                    </div>
                  </div>

                  <div className="mt-3 flex space-x-2">
                    <button
                      onClick={() => handleEdit(eq)}
                      className="text-sm text-blue-600 hover:text-blue-800 px-2 py-1 rounded hover:bg-blue-50"
                    >
                      Edit
                    </button>
                    <button
                      onClick={() => handleDelete(eq.$id)}
                      className="text-sm text-red-600 hover:text-red-800 px-2 py-1 rounded hover:bg-red-50"
                    >
                      Delete
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ExamQuestionsTestPage;-e [1;34m===== ./pages/test/results-test.js =====[0m
import { useState, useEffect } from 'react';
import { databases } from '../../utils/appwrite';
import { ID } from 'appwrite';

const ResultsTestPage = () => {
  const [results, setResults] = useState([]);
  const [students, setStudents] = useState([]);
  const [exams, setExams] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [formData, setFormData] = useState({
    student_id: '',
    exam_id: '',
    score: 0,
    total_marks: 100,
    percentage: 0,
    status: 'passed',
    time_taken: 60,
    attempted_at: new Date().toISOString().substring(0, 16),
    completed_at: new Date().toISOString(),
    created_at: new Date().toISOString()
  });

  const databaseId = '67a5a946002e8a51f8fe';
  const collectionId = 'results';

  const generateResultId = (examId, studentId) => {
    const shortExamId = examId.substring(0, 10);
    const shortStudentId = studentId.substring(0, 10);
    const timestamp = Date.now().toString(36).substring(0, 6);
    const random = Math.random().toString(36).substring(2, 6);
    return `res_${shortExamId}_${shortStudentId}_${timestamp}_${random}`.substring(0, 36);
  };

  const fetchAllData = async () => {
    setLoading(true);
    try {
      const [resultsResponse, studentsResponse, examsResponse] = await Promise.all([
        databases.listDocuments(databaseId, collectionId),
        databases.listDocuments(databaseId, 'students'),
        databases.listDocuments(databaseId, 'exams')
      ]);
      
      setResults(resultsResponse.documents);
      setStudents(studentsResponse.documents);
      setExams(examsResponse.documents);
      
    } catch (err) {
      setError(err.message);
      console.error('Fetch error:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    try {
      if (!students.some(s => s.$id === formData.student_id)) {
        throw new Error('Selected student does not exist');
      }
      
      if (!exams.some(e => e.$id === formData.exam_id)) {
        throw new Error('Selected exam does not exist');
      }

      const percentage = (formData.score / formData.total_marks) * 100;
      const status = percentage >= 30 ? 'passed' : 'failed';
      const attemptedAt = new Date(formData.attempted_at);
      const completedAt = new Date(attemptedAt.getTime() + formData.time_taken * 60000);
      const resultId = generateResultId(formData.exam_id, formData.student_id);

      await databases.createDocument(
        databaseId,
        collectionId,
        ID.unique(),
        {
          result_id: resultId,
          student_id: formData.student_id,
          exam_id: formData.exam_id,
          score: parseInt(formData.score),
          total_marks: parseInt(formData.total_marks),
          percentage,
          status,
          time_taken: parseInt(formData.time_taken),
          attempted_at: attemptedAt.toISOString(),
          completed_at: completedAt.toISOString(),
          created_at: new Date().toISOString()
        }
      );

      await fetchAllData();
      setFormData({
        student_id: '',
        exam_id: '',
        score: 0,
        total_marks: 100,
        percentage: 0,
        status: 'passed',
        time_taken: 60,
        attempted_at: new Date().toISOString().substring(0, 16),
        completed_at: new Date().toISOString(),
        created_at: new Date().toISOString()
      });
    } catch (err) {
      setError(err.message);
      console.error('Submission error:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const resolveStudentReference = (studentRef) => {
    if (!studentRef) return null;
    
    // Handle direct ID reference
    if (typeof studentRef === 'string') return studentRef;
    
    // Handle relationship object (either single or array)
    if (Array.isArray(studentRef)) {
      return studentRef[0]?.$id || studentRef[0];
    } else if (typeof studentRef === 'object') {
      return studentRef.$id;
    }
    
    return null;
  };

  const resolveExamReference = (examRef) => {
    if (!examRef) return null;
    
    // Handle direct ID reference
    if (typeof examRef === 'string') return examRef;
    
    // Handle relationship object (either single or array)
    if (Array.isArray(examRef)) {
      return examRef[0]?.$id || examRef[0];
    } else if (typeof examRef === 'object') {
      return examRef.$id;
    }
    
    return null;
  };

  const getStudentName = (studentRef) => {
    const studentId = resolveStudentReference(studentRef);
    if (!studentId || !students.length) return 'Unknown Student';
    
    const student = students.find(s => s.$id === studentId);
    if (!student) {
      console.warn('Student not found for ID:', studentId);
      return 'Unknown Student';
    }
    return `${student.name} (${student.email})`;
  };

  const getExamName = (examRef) => {
    const examId = resolveExamReference(examRef);
    if (!examId || !exams.length) return 'Unknown Exam';
    
    const exam = exams.find(e => e.$id === examId);
    if (!exam) {
      console.warn('Exam not found for ID:', examId);
      return 'Unknown Exam';
    }
    return exam.name;
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleString();
  };

  useEffect(() => {
    fetchAllData();
  }, []);

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-6">Results Management</h1>
      
      {error && (
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4">
          <p>{error}</p>
        </div>
      )}
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        {/* Add Result Form */}
        <div className="bg-white p-6 rounded-lg shadow">
          <h2 className="text-xl font-semibold mb-4">Add New Result</h2>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Student</label>
              <select
                name="student_id"
                value={formData.student_id}
                onChange={handleChange}
                className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
                required
                disabled={loading}
              >
                <option value="">Select Student</option>
                {students.map(student => (
                  <option key={student.$id} value={student.$id}>
                    {student.name} ({student.email})
                  </option>
                ))}
              </select>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Exam</label>
              <select
                name="exam_id"
                value={formData.exam_id}
                onChange={handleChange}
                className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
                required
                disabled={loading}
              >
                <option value="">Select Exam</option>
                {exams.map(exam => (
                  <option key={exam.$id} value={exam.$id}>
                    {exam.name}
                  </option>
                ))}
              </select>
            </div>
            
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Score</label>
                <input
                  type="number"
                  name="score"
                  value={formData.score}
                  onChange={handleChange}
                  className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
                  min="0"
                  required
                  disabled={loading}
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Total Marks</label>
                <input
                  type="number"
                  name="total_marks"
                  value={formData.total_marks}
                  onChange={handleChange}
                  className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
                  min="1"
                  required
                  disabled={loading}
                />
              </div>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Time Taken (minutes)</label>
              <input
                type="number"
                name="time_taken"
                value={formData.time_taken}
                onChange={handleChange}
                className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
                min="1"
                required
                disabled={loading}
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Attempted At</label>
              <input
                type="datetime-local"
                name="attempted_at"
                value={formData.attempted_at}
                onChange={handleChange}
                className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
                required
                disabled={loading}
              />
            </div>
            
            <button
              type="submit"
              disabled={loading}
              className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50"
            >
              {loading ? 'Processing...' : 'Add Result'}
            </button>
          </form>
        </div>
        
        {/* Results List - Showing all attributes */}
        <div className="bg-white p-6 rounded-lg shadow">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold">Results (All Attributes)</h2>
            <button 
              onClick={fetchAllData}
              disabled={loading}
              className="text-sm bg-gray-100 hover:bg-gray-200 px-3 py-1 rounded"
            >
              Refresh
            </button>
          </div>
          
          {loading && results.length === 0 ? (
            <div className="text-center py-8">
              <p>Loading results...</p>
            </div>
          ) : results.length === 0 ? (
            <div className="text-center py-8">
              <p>No results found</p>
            </div>
          ) : (
            <div className="space-y-4">
              {results.map(result => (
                <div key={result.$id} className="border border-gray-200 rounded-lg p-4 hover:bg-gray-50">
                  <div className="flex justify-between items-start">
                    <h3 className="font-medium text-lg">
                      {getStudentName(result.student_id)}
                    </h3>
                    <span className={`px-2 py-1 rounded-full text-xs font-semibold ${
                      result.status === 'passed' 
                        ? 'bg-green-100 text-green-800' 
                        : 'bg-red-100 text-red-800'
                    }`}>
                      {result.status.toUpperCase()}
                    </span>
                  </div>
                  
                  <div className="mt-3 space-y-1 text-sm text-gray-600">
                    <p><strong>Exam:</strong> {getExamName(result.exam_id)}</p>
                    <p><strong>Result ID:</strong> {result.result_id}</p>
                    <p><strong>Score:</strong> {result.score}/{result.total_marks} ({result.percentage?.toFixed(1)}%)</p>
                    <p><strong>Status:</strong> {result.status}</p>
                    <p><strong>Time Taken:</strong> {result.time_taken} minutes</p>
                    <p><strong>Attempted At:</strong> {formatDate(result.attempted_at)}</p>
                    <p><strong>Completed At:</strong> {formatDate(result.completed_at)}</p>
                    <p><strong>Created At:</strong> {formatDate(result.created_at)}</p>
                    <p><strong>Document ID:</strong> {result.$id}</p>
                    <p><strong>Created At (Doc):</strong> {formatDate(result.$createdAt)}</p>
                    <p><strong>Updated At:</strong> {formatDate(result.$updatedAt)}</p>
                    <p><strong>Permissions:</strong> {result.$permissions?.join(', ') || 'None'}</p>
                    <p><strong>Database ID:</strong> {result.$databaseId}</p>
                    <p><strong>Collection ID:</strong> {result.$collectionId}</p>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ResultsTestPage;-e [1;34m===== ./pages/test/exam-enrollments-test.jsx =====[0m
import { useState, useEffect } from 'react';
import { databases } from '../../utils/appwrite';
import { ID, Query } from 'appwrite';

const ExamEnrollmentsTestPage = () => {
  const [enrollments, setEnrollments] = useState([]);
  const [exams, setExams] = useState([]);
  const [students, setStudents] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [formData, setFormData] = useState({
    enrollment_id: ID.unique(),
    student_id: '',
    exam_id: '',
    enrolled_at: new Date().toISOString()
  });
  const [editingId, setEditingId] = useState(null);
  const [showRawData, setShowRawData] = useState(false);

  const databaseId = '67a5a946002e8a51f8fe';
  const collectionId = 'exam_enrollments';

  const fetchAllData = async () => {
    setLoading(true);
    try {
      const [enrollmentsRes, examsRes, studentsRes] = await Promise.all([
        databases.listDocuments(databaseId, collectionId, [Query.limit(100), Query.orderDesc('enrolled_at')]),
        databases.listDocuments(databaseId, 'exams', [Query.limit(100)]),
        databases.listDocuments(databaseId, 'students', [Query.limit(100)])
      ]);

      setEnrollments(enrollmentsRes.documents);
      setExams(examsRes.documents);
      setStudents(studentsRes.documents);
    } catch (err) {
      setError(err.message);
      console.error('Fetch error:', err);
    } finally {
      setLoading(false);
    }
  };

  const resolveRelationshipId = (field) => {
    if (!field) return null;
    if (typeof field === 'object' && field.$id) return field.$id;
    if (Array.isArray(field) && field.length > 0) return field[0]?.$id || field[0];
    return field;
  };

  const getExamName = (examId) => {
    const resolvedId = resolveRelationshipId(examId);
    const exam = exams.find(e => e.$id === resolvedId || e.exam_id === resolvedId);
    if (exam) {
      return `${exam.name} (${exam.exam_id})`;
    }
    return 'Unknown Exam';
  };

  const getStudentName = (studentId) => {
    const resolvedId = resolveRelationshipId(studentId);
    const student = students.find(s => s.$id === resolvedId || s.student_id === resolvedId);
    if (student) {
      return `${student.name} (${student.email})`;
    }
    return 'Unknown Student';
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    const date = new Date(dateString);
    return date.toLocaleString();
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      const data = {
        enrollment_id: formData.enrollment_id,
        student_id: [formData.student_id],
        exam_id: [formData.exam_id],
        enrolled_at: formData.enrolled_at
      };

      if (editingId) {
        await databases.updateDocument(databaseId, collectionId, editingId, data);
      } else {
        await databases.createDocument(databaseId, collectionId, ID.unique(), {
          ...data,
          enrollment_id: ID.unique() // Generate new ID for new records
        });
      }

      await fetchAllData();
      resetForm();
    } catch (err) {
      setError(err.message);
      console.error('Submission error:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleEdit = (enrollment) => {
    setFormData({
      enrollment_id: enrollment.enrollment_id || ID.unique(),
      student_id: resolveRelationshipId(enrollment.student_id) || '',
      exam_id: resolveRelationshipId(enrollment.exam_id) || '',
      enrolled_at: enrollment.enrolled_at || new Date().toISOString()
    });
    setEditingId(enrollment.$id);
  };

  const handleDelete = async (id) => {
    if (window.confirm('Are you sure you want to delete this enrollment?')) {
      try {
        await databases.deleteDocument(databaseId, collectionId, id);
        await fetchAllData();
        if (editingId === id) resetForm();
      } catch (err) {
        setError(err.message);
      }
    }
  };

  const resetForm = () => {
    setFormData({
      enrollment_id: ID.unique(),
      student_id: '',
      exam_id: '',
      enrolled_at: new Date().toISOString()
    });
    setEditingId(null);
  };

  useEffect(() => {
    fetchAllData();
  }, []);

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-6">Exam Enrollments Management</h1>

      {error && (
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4">
          <p>{error}</p>
        </div>
      )}

      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        {/* Form Section */}
        <div className="bg-white p-6 rounded-lg shadow">
          <h2 className="text-xl font-semibold mb-4">
            {editingId ? 'Edit Enrollment' : 'Add New Enrollment'}
          </h2>
          <form onSubmit={handleSubmit} className="space-y-4">
            {editingId && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Enrollment ID</label>
                <input
                  type="text"
                  name="enrollment_id"
                  value={formData.enrollment_id}
                  readOnly
                  className="w-full p-2 border border-gray-300 rounded-md shadow-sm bg-gray-100"
                />
              </div>
            )}

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Student</label>
              <select
                name="student_id"
                value={formData.student_id}
                onChange={handleChange}
                className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
                required
                disabled={loading}
              >
                <option value="">Select Student</option>
                {students.map((student) => (
                  <option key={student.$id} value={student.$id}>
                    {student.name} ({student.email})
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Exam</label>
              <select
                name="exam_id"
                value={formData.exam_id}
                onChange={handleChange}
                className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
                required
                disabled={loading}
              >
                <option value="">Select Exam</option>
                {exams.map((exam) => (
                  <option key={exam.$id} value={exam.$id}>
                    {exam.name} ({exam.exam_id})
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Enrollment Date</label>
              <input
                type="datetime-local"
                name="enrolled_at"
                value={formData.enrolled_at ? formData.enrolled_at.substring(0, 16) : ''}
                onChange={handleChange}
                className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
                required
                disabled={loading}
              />
            </div>

            <div className="flex space-x-2">
              <button
                type="submit"
                disabled={loading}
                className={`px-4 py-2 rounded-md text-white ${loading ? 'bg-blue-400' : 'bg-blue-600 hover:bg-blue-700'}`}
              >
                {loading ? (editingId ? 'Updating...' : 'Adding...') : (editingId ? 'Update' : 'Add')}
              </button>
              {editingId && (
                <button
                  type="button"
                  onClick={resetForm}
                  className="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600"
                >
                  Cancel
                </button>
              )}
            </div>
          </form>
        </div>

        {/* List Section */}
        <div className="bg-white p-6 rounded-lg shadow">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold">Exam Enrollments List</h2>
            <div className="flex space-x-2">
              <button
                onClick={fetchAllData}
                disabled={loading}
                className="text-sm bg-gray-100 hover:bg-gray-200 px-3 py-1 rounded"
              >
                Refresh
              </button>
              <button
                onClick={() => setShowRawData(!showRawData)}
                className="text-sm bg-gray-100 hover:bg-gray-200 px-3 py-1 rounded"
              >
                {showRawData ? 'Hide Raw Data' : 'Show Raw Data'}
              </button>
            </div>
          </div>

          {loading && enrollments.length === 0 ? (
            <div className="text-center py-8">
              <p>Loading enrollments...</p>
            </div>
          ) : enrollments.length === 0 ? (
            <div className="text-center py-8">
              <p>No enrollments found</p>
            </div>
          ) : (
            <div className="space-y-4">
              {enrollments.map((enrollment) => (
                <div key={enrollment.$id} className="border border-gray-200 rounded-lg p-4 hover:bg-gray-50">
                  <div className="flex justify-between items-start">
                    <div>
                      <h3 className="font-medium">{getStudentName(enrollment.student_id)}</h3>
                      <p className="text-sm text-gray-600">
                        Enrolled in: {getExamName(enrollment.exam_id)}
                      </p>
                      <p className="text-xs text-gray-500 mt-1">
                        Enrollment ID: {enrollment.enrollment_id}
                      </p>
                      <p className="text-xs text-gray-500">
                        Enrolled at: {formatDate(enrollment.enrolled_at)}
                      </p>
                    </div>
                    <div className="text-sm text-gray-500">
                      {formatDate(enrollment.enrolled_at)}
                    </div>
                  </div>

                  {showRawData && (
                    <div className="mt-3 p-2 bg-gray-50 rounded text-xs overflow-x-auto">
                      <pre>{JSON.stringify(enrollment, null, 2)}</pre>
                    </div>
                  )}

                  <div className="mt-3 flex space-x-2">
                    <button
                      onClick={() => handleEdit(enrollment)}
                      className="text-sm text-blue-600 hover:text-blue-800 px-2 py-1 rounded hover:bg-blue-50"
                    >
                      Edit
                    </button>
                    <button
                      onClick={() => handleDelete(enrollment.$id)}
                      className="text-sm text-red-600 hover:text-red-800 px-2 py-1 rounded hover:bg-red-50"
                    >
                      Delete
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ExamEnrollmentsTestPage;-e [1;34m===== ./pages/test/exams-test.js =====[0m
// pages/exams-test.js
import { useState, useEffect } from 'react';
import { databases } from '../../utils/appwrite';
import { ID } from 'appwrite';

const ExamsTestPage = () => {
  const [exams, setExams] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [formData, setFormData] = useState({
    exam_id: '',
    name: '',
    description: '',
    exam_date: '',
    duration: 60,
    status: 'active',
    created_by: 'test-user'
  });
  const [editingId, setEditingId] = useState(null);

  const databaseId = '67a5a946002e8a51f8fe';
  const collectionId = 'exams';

  const fetchExams = async () => {
    setLoading(true);
    try {
      const response = await databases.listDocuments(databaseId, collectionId);
      setExams(response.documents);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      if (editingId) {
        // Update existing exam
        await databases.updateDocument(
          databaseId,
          collectionId,
          editingId,
          {
            ...formData,
            duration: parseInt(formData.duration),
            modified_at: new Date().toISOString()
          }
        );
      } else {
        // Create new exam
        await databases.createDocument(
          databaseId, 
          collectionId,
          ID.unique(),
          {
            ...formData,
            duration: parseInt(formData.duration),
            created_at: new Date().toISOString(),
            modified_at: new Date().toISOString()
          }
        );
      }
      await fetchExams();
      resetForm();
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleEdit = (exam) => {
    setFormData({
      exam_id: exam.exam_id,
      name: exam.name,
      description: exam.description,
      exam_date: exam.exam_date.substring(0, 16), // Format for datetime-local input
      duration: exam.duration,
      status: exam.status,
      created_by: exam.created_by
    });
    setEditingId(exam.$id);
  };

  const handleDelete = async (id) => {
    if (!window.confirm('Are you sure you want to delete this exam?')) return;
    
    setLoading(true);
    try {
      await databases.deleteDocument(databaseId, collectionId, id);
      await fetchExams();
      if (editingId === id) {
        resetForm();
      }
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const resetForm = () => {
    setFormData({
      exam_id: '',
      name: '',
      description: '',
      exam_date: '',
      duration: 60,
      status: 'active',
      created_by: 'test-user'
    });
    setEditingId(null);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleString();
  };

  useEffect(() => {
    fetchExams();
  }, []);

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-6">Exams Management</h1>
      
      {error && (
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4 rounded">
          <p>{error}</p>
        </div>
      )}
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        {/* Form */}
        <div className="bg-white p-6 rounded-lg shadow">
          <h2 className="text-xl font-semibold mb-4">
            {editingId ? 'Edit Exam' : 'Add New Exam'}
          </h2>
          <form onSubmit={handleSubmit}>
            <div className="mb-4">
              <label className="block mb-2">Exam ID</label>
              <input
                type="text"
                name="exam_id"
                value={formData.exam_id}
                onChange={handleChange}
                className="w-full p-2 border rounded"
                required
                disabled={editingId} // Disable editing of exam_id
              />
            </div>
            <div className="mb-4">
              <label className="block mb-2">Exam Name</label>
              <input
                type="text"
                name="name"
                value={formData.name}
                onChange={handleChange}
                className="w-full p-2 border rounded"
                required
              />
            </div>
            <div className="mb-4">
              <label className="block mb-2">Description</label>
              <textarea
                name="description"
                value={formData.description}
                onChange={handleChange}
                className="w-full p-2 border rounded"
                rows="3"
              />
            </div>
            <div className="mb-4">
              <label className="block mb-2">Exam Date</label>
              <input
                type="datetime-local"
                name="exam_date"
                value={formData.exam_date}
                onChange={handleChange}
                className="w-full p-2 border rounded"
                required
              />
            </div>
            <div className="mb-4">
              <label className="block mb-2">Duration (minutes)</label>
              <input
                type="number"
                name="duration"
                value={formData.duration}
                onChange={handleChange}
                className="w-full p-2 border rounded"
                min="1"
                required
              />
            </div>
            <div className="mb-4">
              <label className="block mb-2">Status</label>
              <select
                name="status"
                value={formData.status}
                onChange={handleChange}
                className="w-full p-2 border rounded"
              >
                <option value="active">Active</option>
                <option value="inactive">Inactive</option>
                <option value="completed">Completed</option>
              </select>
            </div>
            <div className="flex space-x-2">
              <button
                type="submit"
                disabled={loading}
                className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 flex-1"
              >
                {loading ? 'Saving...' : editingId ? 'Update Exam' : 'Add Exam'}
              </button>
              {editingId && (
                <button
                  type="button"
                  onClick={resetForm}
                  disabled={loading}
                  className="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600"
                >
                  Cancel
                </button>
              )}
            </div>
          </form>
        </div>
        
        {/* Data Display */}
        <div className="bg-white p-6 rounded-lg shadow">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold">Exams List</h2>
            <button 
              onClick={fetchExams}
              disabled={loading}
              className="text-sm bg-gray-100 hover:bg-gray-200 px-3 py-1 rounded"
            >
              Refresh
            </button>
          </div>
          {loading ? (
            <p>Loading exams...</p>
          ) : exams.length === 0 ? (
            <p>No exams found</p>
          ) : (
            <div className="space-y-4">
              {exams.map(exam => (
                <div key={exam.$id} className="border p-4 rounded hover:bg-gray-50">
                  <div className="flex justify-between items-start">
                    <div>
                      <h3 className="font-medium">{exam.name}</h3>
                      <p className="text-sm text-gray-600">ID: {exam.exam_id}</p>
                    </div>
                    <div className="flex space-x-2">
                      <button
                        onClick={() => handleEdit(exam)}
                        className="text-blue-600 hover:text-blue-800 text-sm"
                      >
                        Edit
                      </button>
                      <button
                        onClick={() => handleDelete(exam.$id)}
                        className="text-red-600 hover:text-red-800 text-sm"
                      >
                        Delete
                      </button>
                    </div>
                  </div>
                  
                  <div className="mt-3 grid grid-cols-2 gap-2 text-xs">
                    <div>
                      <span className="font-semibold">Document ID:</span> {exam.$id}
                    </div>
                    <div>
                      <span className="font-semibold">Created:</span> {formatDate(exam.$createdAt)}
                    </div>
                    <div>
                      <span className="font-semibold">Updated:</span> {formatDate(exam.$updatedAt)}
                    </div>
                    <div>
                      <span className="font-semibold">Permissions:</span> {exam.$permissions?.join(', ') || 'N/A'}
                    </div>
                    <div>
                      <span className="font-semibold">Database:</span> {exam.$databaseId}
                    </div>
                    <div>
                      <span className="font-semibold">Collection:</span> {exam.$collectionId}
                    </div>
                  </div>
                  
                  <div className="mt-3 grid grid-cols-2 gap-2">
                    <div>
                      <p className="text-sm">
                        <span className="font-semibold">Date:</span> {formatDate(exam.exam_date)}
                      </p>
                      <p className="text-sm">
                        <span className="font-semibold">Duration:</span> {exam.duration} minutes
                      </p>
                    </div>
                    <div>
                      <span className={`inline-block px-2 py-1 rounded-full text-xs ${
                        exam.status === 'active' ? 'bg-green-100 text-green-800' :
                        exam.status === 'completed' ? 'bg-blue-100 text-blue-800' :
                        'bg-gray-100 text-gray-800'
                      }`}>
                        Status: {exam.status}
                      </span>
                      <p className="text-sm mt-1">
                        <span className="font-semibold">Created by:</span> {exam.created_by}
                      </p>
                    </div>
                  </div>
                  
                  {exam.description && (
                    <div className="mt-2 p-2 bg-gray-50 rounded">
                      <p className="text-sm text-gray-700">
                        <span className="font-semibold">Description:</span> {exam.description}
                      </p>
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ExamsTestPage;-e [1;34m===== ./pages/test/exam_question_viewer-test.js =====[0m
import { useState, useEffect } from 'react';
import { databases } from '../../utils/appwrite';
import { Query } from 'appwrite';

const ExamQuestionsViewerPage = () => {
  const [exams, setExams] = useState([]);
  const [selectedExamId, setSelectedExamId] = useState('');
  const [examQuestions, setExamQuestions] = useState([]);
  const [questions, setQuestions] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const databaseId = '67a5a946002e8a51f8fe';
  const examQuestionsCollectionId = 'exam_questions';
  const questionsCollectionId = 'questions';
  const examsCollectionId = 'exams';

  const fetchExams = async () => {
    setLoading(true);
    try {
      const response = await databases.listDocuments(databaseId, examsCollectionId, [Query.limit(100)]);
      setExams(response.documents);
    } catch (err) {
      setError(err.message);
      console.error('Error fetching exams:', err);
    } finally {
      setLoading(false);
    }
  };

  const fetchQuestionsForExam = async (examId) => {
    if (!examId) return;
    
    setLoading(true);
    try {
      // First, get all exam_question documents
      const examQuestionsResponse = await databases.listDocuments(
        databaseId, 
        examQuestionsCollectionId,
        [Query.orderAsc('order')]
      );
      
      // Filter locally for this exam
      const filteredExamQuestions = examQuestionsResponse.documents.filter(doc => {
        // Handle both array and direct reference formats
        const examRef = doc.exam_id;
        if (Array.isArray(examRef)) {
          return examRef.some(ref => ref.$id === examId || ref === examId);
        } else if (typeof examRef === 'object') {
          return examRef.$id === examId;
        }
        return examRef === examId;
      });

      setExamQuestions(filteredExamQuestions);

      // Get all the questions referenced in these mappings
      const questionIds = filteredExamQuestions.map(eq => {
        const questionRef = eq.question_id;
        if (Array.isArray(questionRef)) {
          return questionRef[0]?.$id || questionRef[0];
        } else if (typeof questionRef === 'object') {
          return questionRef.$id;
        }
        return questionRef;
      }).filter(id => id);

      if (questionIds.length > 0) {
        // Fetch all questions at once
        const questionsResponse = await databases.listDocuments(
          databaseId,
          questionsCollectionId,
          [Query.limit(100)]
        );
        
        // Filter questions locally to match our questionIds
        const filteredQuestions = questionsResponse.documents.filter(q => 
          questionIds.includes(q.$id) || questionIds.includes(q.question_id)
        );
        setQuestions(filteredQuestions);
      } else {
        setQuestions([]);
      }
    } catch (err) {
      setError(err.message);
      console.error('Error fetching questions for exam:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleExamChange = (e) => {
    const examId = e.target.value;
    setSelectedExamId(examId);
    fetchQuestionsForExam(examId);
  };

  const getQuestionById = (questionId) => {
    return questions.find(q => q.$id === questionId) || 
           questions.find(q => q.question_id === questionId);
  };

  const getQuestionOrder = (questionId) => {
    const mapping = examQuestions.find(eq => {
      const qRef = eq.question_id;
      const refId = Array.isArray(qRef) ? qRef[0]?.$id || qRef[0] : 
                   (typeof qRef === 'object' ? qRef.$id : qRef);
      return refId === questionId;
    });
    return mapping?.order || 'N/A';
  };

  const getQuestionMarks = (questionId) => {
    const mapping = examQuestions.find(eq => {
      const qRef = eq.question_id;
      const refId = Array.isArray(qRef) ? qRef[0]?.$id || qRef[0] : 
                   (typeof qRef === 'object' ? qRef.$id : qRef);
      return refId === questionId;
    });
    return mapping?.marks || 'N/A';
  };

  useEffect(() => {
    fetchExams();
  }, []);

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-6">Exam Questions Viewer</h1>

      {error && (
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4">
          <p>{error}</p>
        </div>
      )}

      <div className="bg-white p-6 rounded-lg shadow mb-6">
        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-700 mb-1">Select Exam</label>
          <select
            value={selectedExamId}
            onChange={handleExamChange}
            className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
            disabled={loading}
          >
            <option value="">Choose an exam</option>
            {exams.map((exam) => (
              <option key={exam.$id} value={exam.$id}>
                {exam.name} ({exam.exam_id})
              </option>
            ))}
          </select>
        </div>

        {selectedExamId && (
          <div className="mt-4">
            <h2 className="text-xl font-semibold mb-2">
              Questions for {exams.find(e => e.$id === selectedExamId)?.name || 'Selected Exam'}
            </h2>
            <p className="text-sm text-gray-600 mb-4">
              Exam ID: {selectedExamId}
            </p>

            {loading && questions.length === 0 ? (
              <div className="text-center py-8">
                <p>Loading questions...</p>
              </div>
            ) : questions.length === 0 ? (
              <div className="text-center py-8">
                <p>No questions found for this exam</p>
              </div>
            ) : (
              <div className="space-y-4">
                {questions.map((question) => (
                  <div key={question.$id} className="border border-gray-200 rounded-lg p-4 hover:bg-gray-50">
                    <div className="flex justify-between items-start">
                      <div>
                        <h3 className="font-medium">
                          Question {getQuestionOrder(question.$id)} (Marks: {getQuestionMarks(question.$id)})
                        </h3>
                        <p className="text-gray-700 mt-1">{question.text}</p>
                        <div className="mt-2 flex flex-wrap gap-2">
                          {question.difficulty && (
                            <span className="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs">
                              Difficulty: {question.difficulty}
                            </span>
                          )}
                          {question.topic && (
                            <span className="px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs">
                              Topic: {question.topic}
                            </span>
                          )}
                          {question.type && (
                            <span className="px-2 py-1 bg-purple-100 text-purple-800 rounded-full text-xs">
                              Type: {question.type}
                            </span>
                          )}
                        </div>
                      </div>
                      <div className="flex flex-col items-end space-y-1">
                        <span className="px-2 py-1 bg-gray-100 text-gray-800 rounded-full text-xs">
                          ID: {question.$id}
                        </span>
                        {question.question_id && (
                          <span className="px-2 py-1 bg-yellow-100 text-yellow-800 rounded-full text-xs">
                            Question ID: {question.question_id}
                          </span>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default ExamQuestionsViewerPage;-e [1;34m===== ./pages/test/student_response_viewer-test.js =====[0m
import { useState, useEffect } from 'react';
import { databases } from '../../utils/appwrite';
import { Query } from 'appwrite';

const StudentResponsesViewerPage = () => {
  const [exams, setExams] = useState([]);
  const [students, setStudents] = useState([]);
  const [selectedExamId, setSelectedExamId] = useState('');
  const [selectedStudentId, setSelectedStudentId] = useState('');
  const [responses, setResponses] = useState([]);
  const [questions, setQuestions] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const databaseId = '67a5a946002e8a51f8fe';
  const responsesCollectionId = 'responses';
  const questionsCollectionId = 'questions';
  const examsCollectionId = 'exams';
  const studentsCollectionId = 'students';

  const fetchExams = async () => {
    setLoading(true);
    try {
      console.log('Fetching exams...');
      const response = await databases.listDocuments(databaseId, examsCollectionId, [
        Query.limit(100),
        Query.orderDesc('exam_date')
      ]);
      console.log('Exams fetched:', response);
      setExams(response.documents);
    } catch (err) {
      console.error('Error fetching exams:', err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const fetchStudents = async () => {
    setLoading(true);
    try {
      console.log('Fetching students...');
      const response = await databases.listDocuments(databaseId, studentsCollectionId, [
        Query.limit(100),
        Query.orderAsc('name')
      ]);
      console.log('Students fetched:', response);
      setStudents(response.documents);
    } catch (err) {
      console.error('Error fetching students:', err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const fetchResponses = async (examId, studentId) => {
    if (!examId || !studentId) return;
    
    setLoading(true);
    try {
      console.log(`Fetching responses for exam ${examId} and student ${studentId}...`);
      
      // First, get all responses for this student and exam
      const responsesResponse = await databases.listDocuments(
        databaseId, 
        responsesCollectionId,
        [
          Query.equal('exam_id', examId),
          Query.equal('student_id', studentId)
        ]
      );
      console.log('Responses fetched:', responsesResponse);
      
      setResponses(responsesResponse.documents);

      // Get all the questions referenced in these responses
      const questionIds = responsesResponse.documents.map(res => {
        const questionRef = res.question_id;
        if (Array.isArray(questionRef)) {
          return questionRef[0]?.$id || questionRef[0];
        } else if (typeof questionRef === 'object') {
          return questionRef.$id;
        }
        return questionRef;
      }).filter(id => id);

      console.log('Question IDs from responses:', questionIds);

      if (questionIds.length > 0) {
        console.log('Fetching questions for these IDs...');
        // Fetch all questions at once
        const questionsResponse = await databases.listDocuments(
          databaseId,
          questionsCollectionId,
          [Query.limit(100)]
        );
        console.log('Questions fetched:', questionsResponse);
        
        // Filter questions locally to match our questionIds
        const filteredQuestions = questionsResponse.documents.filter(q => 
          questionIds.includes(q.$id) || questionIds.includes(q.question_id)
        );
        console.log('Filtered questions:', filteredQuestions);
        setQuestions(filteredQuestions);
      } else {
        console.log('No question IDs found in responses');
        setQuestions([]);
      }
    } catch (err) {
      console.error('Error fetching responses:', err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleExamChange = (e) => {
    const examId = e.target.value;
    console.log('Exam changed to:', examId);
    setSelectedExamId(examId);
    if (selectedStudentId) {
      fetchResponses(examId, selectedStudentId);
    }
  };

  const handleStudentChange = (e) => {
    const studentId = e.target.value;
    console.log('Student changed to:', studentId);
    setSelectedStudentId(studentId);
    if (selectedExamId) {
      fetchResponses(selectedExamId, studentId);
    }
  };

  const getQuestionById = (questionId) => {
    return questions.find(q => q.$id === questionId) || 
           questions.find(q => q.question_id === questionId);
  };

  const getResponseForQuestion = (questionId) => {
    return responses.find(res => {
      const qRef = res.question_id;
      const refId = Array.isArray(qRef) ? qRef[0]?.$id || qRef[0] : 
                   (typeof qRef === 'object' ? qRef.$id : qRef);
      return refId === questionId;
    });
  };

  const getOptionText = (question, optionIndex) => {
    if (!question) return '';
    if (question.options_text && question.options_text[optionIndex]) {
      return question.options_text[optionIndex];
    }
    return `Option ${optionIndex + 1}`;
  };

  useEffect(() => {
    console.log('Component mounted, fetching initial data...');
    fetchExams();
    fetchStudents();
  }, []);

  useEffect(() => {
    console.log('Responses updated:', responses);
    console.log('Questions updated:', questions);
  }, [responses, questions]);

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-6">Student Responses Viewer</h1>

      {error && (
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4">
          <p>{error}</p>
        </div>
      )}

      <div className="bg-white p-6 rounded-lg shadow mb-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Select Exam</label>
            <select
              value={selectedExamId}
              onChange={handleExamChange}
              className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
              disabled={loading}
            >
              <option value="">Choose an exam</option>
              {exams.map((exam) => (
                <option key={exam.$id} value={exam.$id}>
                  {exam.name} ({new Date(exam.exam_date).toLocaleDateString()})
                </option>
              ))}
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Select Student</label>
            <select
              value={selectedStudentId}
              onChange={handleStudentChange}
              className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
              disabled={loading}
            >
              <option value="">Choose a student</option>
              {students.map((student) => (
                <option key={student.$id} value={student.$id}>
                  {student.name} ({student.email})
                </option>
              ))}
            </select>
          </div>
        </div>

        {selectedExamId && selectedStudentId && (
          <div className="mt-4">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-semibold">
                Responses for {students.find(s => s.$id === selectedStudentId)?.name || 'Student'}
              </h2>
              <p className="text-sm text-gray-600">
                Exam: {exams.find(e => e.$id === selectedExamId)?.name || 'Selected Exam'}
              </p>
            </div>

            {loading && questions.length === 0 ? (
              <div className="text-center py-8">
                <p>Loading responses...</p>
              </div>
            ) : questions.length === 0 ? (
              <div className="text-center py-8">
                <p>No responses found for this student and exam</p>
                <div className="mt-4 text-left bg-gray-50 p-4 rounded">
                  <h3 className="font-medium mb-2">Debug Information:</h3>
                  <p>Selected Exam ID: {selectedExamId}</p>
                  <p>Selected Student ID: {selectedStudentId}</p>
                  <p>Total responses found: {responses.length}</p>
                  <p>Total questions found: {questions.length}</p>
                </div>
              </div>
            ) : (
              <div className="space-y-6">
                {questions.map((question) => {
                  const response = getResponseForQuestion(question.$id);
                  const selectedOption = response?.selected_option;
                  const correctAnswer = question.correct_answer;
                  const isCorrect = selectedOption === correctAnswer;

                  return (
                    <div 
                      key={question.$id} 
                      className={`border rounded-lg p-4 ${isCorrect ? 'bg-green-50 border-green-200' : 'bg-red-50 border-red-200'}`}
                    >
                      <div className="flex justify-between items-start">
                        <div className="flex-1">
                          <h3 className="font-medium">
                            {question.text}
                          </h3>
                          
                          <div className="mt-3 space-y-2">
                            {[0, 1, 2, 3].map((index) => (
                              <div 
                                key={index}
                                className={`p-2 rounded border ${selectedOption === index ? 
                                  (isCorrect ? 'bg-green-100 border-green-300' : 'bg-red-100 border-red-300') : 
                                  'bg-white border-gray-200'}`}
                              >
                                {getOptionText(question, index)}
                              </div>
                            ))}
                          </div>

                          <div className="mt-3 flex flex-wrap gap-2">
                            <span className={`px-2 py-1 rounded-full text-xs ${isCorrect ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                              {isCorrect ? 'Correct' : 'Incorrect'}
                            </span>
                            <span className="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs">
                              Selected: {selectedOption !== undefined ? selectedOption + 1 : 'Not answered'}
                            </span>
                            <span className="px-2 py-1 bg-purple-100 text-purple-800 rounded-full text-xs">
                              Correct: {correctAnswer + 1}
                            </span>
                            {question.difficulty && (
                              <span className="px-2 py-1 bg-yellow-100 text-yellow-800 rounded-full text-xs">
                                Difficulty: {question.difficulty}
                              </span>
                            )}
                          </div>
                        </div>
                        <div className="flex flex-col items-end space-y-1 ml-4">
                          <span className="px-2 py-1 bg-gray-100 text-gray-800 rounded-full text-xs">
                            QID: {question.question_id || question.$id}
                          </span>
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default StudentResponsesViewerPage;-e [1;34m===== ./pages/404.js =====[0m
import React from 'react';
import { useRouter } from 'next/router'; // For navigation
import { motion } from 'framer-motion';
import { Home, ArrowLeft } from 'lucide-react'; // Icons for navigation

const NotFound = () => {
  const router = useRouter();

  // Get the user role from the query parameter (e.g., ?role=admin or ?role=student)
  const { role } = router.query;

  // Handle redirection based on the user's role
  const handleGoHome = () => {
    if (role === 'admin') {
      router.push('/admin/dashboard'); // Redirect to admin dashboard
    } else if (role === 'student') {
      router.push('/student/dashboard'); // Redirect to student dashboard
    } else {
      router.push('/'); // Default fallback to home
    }
  };

  const handleGoBack = () => router.back(); // Go back to the previous page

  return (
    <motion.div
      className="min-h-screen flex flex-col items-center justify-center p-6 bg-gray-50"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
    >
      <motion.div
        className="bg-white rounded-xl p-8 shadow-lg text-center max-w-md w-full"
        initial={{ y: -20, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ duration: 0.5, delay: 0.2 }}
      >
        <h1 className="text-4xl font-bold text-gray-800 mb-4">404</h1>
        <p className="text-gray-600 mb-6">
          Oops! The page you're looking for doesn't exist.
        </p>

        <div className="flex flex-col gap-4">
          <motion.button
            onClick={handleGoHome}
            className="flex items-center justify-center gap-2 bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors w-full"
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            <Home size={18} />
            Go to Dashboard
          </motion.button>

          <motion.button
            onClick={handleGoBack}
            className="flex items-center justify-center gap-2 bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 transition-colors w-full"
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            <ArrowLeft size={18} />
            Go Back
          </motion.button>
        </div>
      </motion.div>
    </motion.div>
  );
};

export default NotFound;-e [1;34m===== ./hooks/useAuth.js =====[0m
import { useState, useEffect, createContext, useContext } from 'react';
import { useRouter } from 'next/router';
import { account } from '../utils/appwrite';
import { getCurrentStudentSession, logoutStudent } from '../utils/auth';

const AuthContext = createContext();

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [userType, setUserType] = useState(null); // 'admin' or 'student'
  const router = useRouter();

  useEffect(() => {
    const checkAuth = async () => {
      try {
        // Check if it's an admin route
        if (router.pathname.startsWith('/admin')) {
          const adminUser = await account.get();
          setUser(adminUser);
          setUserType('admin');
        } else if (router.pathname.startsWith('/student')) {
          // Check for student session
          const studentSession = getCurrentStudentSession();
          if (studentSession) {
            setUser(studentSession);
            setUserType('student');
          } else {
            // Redirect to login if no session
            router.push('/login');
          }
        }
      } catch (error) {
        console.error('Auth check failed:', error);
        if (router.pathname.startsWith('/admin')) {
          router.push('/login');
        }
      } finally {
        setLoading(false);
      }
    };

    checkAuth();
  }, [router.pathname]);

  const logout = async () => {
    try {
      if (userType === 'admin') {
        await account.deleteSession('current');
      } else {
        logoutStudent();
      }
      setUser(null);
      setUserType(null);
      router.push('/login');
    } catch (error) {
      console.error('Logout failed:', error);
    }
  };

  const value = {
    user,
    userType,
    loading,
    logout,
    isAuthenticated: !!user,
    isAdmin: userType === 'admin',
    isStudent: userType === 'student'
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}; -e [1;34m===== ./components/LoadingSpinner.jsx =====[0m
import React from 'react';
import { motion } from 'framer-motion';

const LoadingSpinner = ({ 
  size = 'md', 
  color = 'blue', 
  text = 'Loading...',
  fullScreen = false,
  variant = 'spinner' // 'spinner' or 'dots' or 'pulse'
}) => {
  const sizeClasses = {
    sm: 'h-4 w-4',
    md: 'h-8 w-8',
    lg: 'h-12 w-12',
    xl: 'h-16 w-16'
  };

  const colorClasses = {
    blue: 'border-blue-500',
    green: 'border-green-500',
    red: 'border-red-500',
    gray: 'border-gray-500',
    purple: 'border-purple-500'
  };

  const gradientClasses = {
    blue: 'from-blue-500 to-purple-600',
    green: 'from-green-500 to-emerald-600',
    red: 'from-red-500 to-pink-600',
    gray: 'from-gray-500 to-gray-600',
    purple: 'from-purple-500 to-indigo-600'
  };

  const renderSpinner = () => {
    switch (variant) {
      case 'dots':
        return (
          <div className="flex space-x-1">
            {[0, 1, 2].map((i) => (
              <motion.div
                key={i}
                className={`w-2 h-2 bg-gradient-to-r ${gradientClasses[color]} rounded-full`}
                animate={{
                  scale: [1, 1.5, 1],
                  opacity: [0.5, 1, 0.5]
                }}
                transition={{
                  duration: 1,
                  repeat: Infinity,
                  delay: i * 0.2
                }}
              />
            ))}
          </div>
        );
      
      case 'pulse':
        return (
          <motion.div
            className={`w-full h-full bg-gradient-to-r ${gradientClasses[color]} rounded-full`}
            animate={{
              scale: [1, 1.2, 1],
              opacity: [0.7, 1, 0.7]
            }}
            transition={{
              duration: 1.5,
              repeat: Infinity,
              ease: "easeInOut"
            }}
          />
        );
      
      default: // spinner
        return (
          <motion.div
            className={`${sizeClasses[size]} border-2 border-gray-200 ${colorClasses[color]} rounded-full`}
            style={{ borderTopColor: 'transparent' }}
            animate={{ rotate: 360 }}
            transition={{ 
              duration: 1, 
              repeat: Infinity, 
              ease: 'linear' 
            }}
          />
        );
    }
  };

  const content = (
    <div className="flex flex-col items-center justify-center">
      {renderSpinner()}
      {text && (
        <motion.p
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.2 }}
          className="mt-3 text-sm text-gray-600 font-medium"
        >
          {text}
        </motion.p>
      )}
    </div>
  );

  if (fullScreen) {
    return (
      <motion.div 
        className="min-h-screen flex items-center justify-center bg-gradient-to-br from-gray-50 to-gray-100"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.3 }}
      >
        <motion.div
          initial={{ scale: 0.8, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          transition={{ duration: 0.5 }}
          className="bg-white rounded-2xl shadow-xl p-8 border border-gray-100"
        >
          {content}
        </motion.div>
      </motion.div>
    );
  }

  return content;
};

export default LoadingSpinner; -e [1;34m===== ./components/Modal.jsx =====[0m
import React, { useState, useEffect } from "react";

const Modal = ({
  title,
  onClose,
  onSave,
  initialData = {},
  fields = [],
  isLoading = false,
  error = null,
  onChange,
  modalWidthClass = "w-full max-w-md", // Default for centered modals
  customPosition = null // New prop for custom positioning e.g., { top: '10vh', left: '35vw', right: '25vw', bottom: '10vh' }
}) => {
  const [formData, setFormData] = useState({});
  const [localError, setLocalError] = useState(null);

  useEffect(() => {
    setFormData(initialData || {});
  }, [initialData]);

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    const newValue = type === "checkbox" ? checked : value;
    setFormData((prevData) => ({
      ...prevData,
      [name]: newValue,
    }));
    if (onChange) {
      onChange(e);
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    setLocalError(null);
    const missingFields = fields
      .filter(field => field.required)
      .filter(field => !formData[field.name] && formData[field.name] !== 0 && formData[field.name] !== false)
      .map(field => field.label);

    if (missingFields.length > 0) {
      setLocalError(`Please fill in: ${missingFields.join(", ")}`);
      return;
    }
    onSave(formData);
  };

  const isCustomPositioned = customPosition && Object.keys(customPosition).length > 0;

  const overlayClasses = `fixed inset-0 z-50 bg-gray-900 bg-opacity-50 p-4 overflow-y-auto ${
    !isCustomPositioned ? 'flex items-center justify-center' : ''
  }`;

  let dialogStyle = {};
  if (isCustomPositioned) {
    dialogStyle = {
      position: 'absolute',
      top: customPosition.top,
      left: customPosition.left,
      right: customPosition.right,
      bottom: customPosition.bottom,
      // Width and height are implicitly defined by top/bottom/left/right
    };
  }

  const dialogBaseClasses = "bg-white rounded-lg shadow-xl flex flex-col"; // Added flex flex-col
  const dialogSizingClasses = isCustomPositioned 
    ? "" // Sizing is handled by inline styles from customPosition
    : modalWidthClass; // Use modalWidthClass for centered modals
  const dialogMaxHeightClass = isCustomPositioned ? "" : "max-h-[90vh]"; // Apply max-h only if not custom positioned with bottom

  return (
    <div className={overlayClasses}>
      <div 
        className={`${dialogBaseClasses} ${dialogSizingClasses} ${dialogMaxHeightClass}`}
        style={isCustomPositioned ? dialogStyle : {}}
      >
        <div className="p-6 border-b border-gray-200"> {/* Header part */}
          <div className="flex justify-between items-center">
            <h3 className="text-xl font-semibold text-gray-800">{title}</h3>
            <button
              onClick={onClose}
              className="text-gray-500 hover:text-gray-700"
              disabled={isLoading}
            >
              <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </div>

        <div className="p-6 overflow-y-auto flex-grow"> {/* Content part, flex-grow for scroll */}
          {(error || localError) && (
            <div className="mb-4 p-3 bg-red-100 border-l-4 border-red-500 text-red-700">
              <p>{error || localError}</p>
            </div>
          )}

          <form onSubmit={handleSubmit}>
            <div className="space-y-4">
              {fields.length > 0 ? (
                fields.map((field) => (
                  <div key={field.name} className="space-y-1">
                    <label className="block text-sm font-medium text-gray-700">
                      {field.label}
                      {field.required && <span className="text-red-500"> *</span>}
                    </label>
                    
                    {field.type === "select" ? (
                      <select
                        name={field.name}
                        value={formData[field.name] || ""}
                        onChange={handleChange}
                        className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
                        disabled={isLoading || field.disabled}
                        required={field.required}
                      >
                        {field.placeholder && <option value="">{field.placeholder}</option>}
                        {field.options.map((option) => (
                          <option key={option.value || option} value={option.value || option}>
                            {option.label || option}
                          </option>
                        ))}
                      </select>
                    ) : field.type === "textarea" ? (
                      <textarea
                        name={field.name}
                        value={formData[field.name] || ""}
                        onChange={handleChange}
                        className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
                        rows={field.rows || 3}
                        disabled={isLoading || field.disabled}
                        required={field.required}
                        placeholder={field.placeholder || ""}
                      />
                    ) : (
                      <input
                        type={field.type}
                        name={field.name}
                        value={formData[field.name] || (field.type === "number" ? "" : "")}
                        onChange={handleChange}
                        className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
                        disabled={isLoading || field.disabled}
                        required={field.required}
                        placeholder={field.placeholder || ""}
                        min={field.min}
                        max={field.max}
                        step={field.step}
                      />
                    )}
                  </div>
                ))
              ) : (
                <p className="text-gray-500">No fields provided.</p>
              )}
            </div>

            <div className="mt-6 flex justify-end space-x-3 pt-4 border-t border-gray-200"> {/* Footer part, added pt-4 and border-t */}
              <button
                type="button"
                onClick={onClose}
                className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors"
                disabled={isLoading}
              >
                Cancel
              </button>
              <button
                type="submit"
                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors disabled:opacity-50"
                disabled={isLoading}
              >
                {isLoading ? 'Saving...' : 'Save'}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default Modal;-e [1;34m===== ./components/Table.jsx =====[0m
import React from "react";

const Table = ({ data = [] }) => {
  // Ensure data is always an array
  if (!Array.isArray(data) || data.length === 0) {
    return <p className="text-gray-500">No data available</p>;
  }

  // Extract column headers dynamically from data keys
  const columns = Object.keys(data[0] || {});

  return (
    <table className="w-full border-collapse border border-gray-300">
      <thead>
        <tr className="bg-gray-100">
          {columns.map((col) => (
            <th key={col} className="px-4 py-2 text-left border border-gray-300">
              {col}
            </th>
          ))}
        </tr>
      </thead>
      <tbody>
        {data.map((row, index) => (
          <tr key={index} className="border border-gray-300">
            {columns.map((col) => (
              <td key={col} className="px-4 py-2 border border-gray-300">
                {row[col]}
              </td>
            ))}
          </tr>
        ))}
      </tbody>
    </table>
  );
};

export default Table;
-e [1;34m===== ./components/StudentHeader.jsx =====[0m
import React, { useEffect, useState } from "react";
import { getCurrentStudentSession, logoutStudent } from "../utils/auth";
import { databases } from "../utils/appwrite"; // Import databases

// Define necessary environment variables
const DATABASE_ID = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;
const SESSIONS_COLLECTION_ID = process.env.NEXT_PUBLIC_APPWRITE_STUDENT_SESSIONS_COLLECTION_ID;

const StudentHeader = () => {
  const [student, setStudent] = useState(null);

  useEffect(() => {
    const currentStudent = getCurrentStudentSession();
    setStudent(currentStudent);

    // --- Session Heartbeat Logic ---
    if (currentStudent && currentStudent.sessionId) {
      const sendHeartbeat = async () => {
        try {
          // Update the timestamp to show the user is still active
          await databases.updateDocument(
            DATABASE_ID,
            SESSIONS_COLLECTION_ID,
            currentStudent.sessionId,
            { last_active_timestamp: new Date().toISOString() }
          );
        } catch (err) {
          console.error("Heartbeat failed:", err);
          // This could mean the session was cleaned up on the server; consider logging out.
        }
      };

      // Send an initial heartbeat immediately when the header loads
      sendHeartbeat();

      // Then, send a heartbeat every 30 seconds
      const heartbeatInterval = setInterval(sendHeartbeat, 30000);

      // Clean up the interval when the component unmounts
      return () => clearInterval(heartbeatInterval);
    }
  }, []);

  const handleLogout = async () => {
    await logoutStudent();
    window.location.href = "/login";
  };

  return (
    <header className="w-full bg-white border-b border-gray-200 px-6 py-3 flex items-center justify-between shadow-sm">
      <div>
        {student ? (
          <>
            <span className="font-semibold text-gray-800">{student.name}</span>
            <span className="ml-3 text-gray-500">{student.email}</span>
          </>
        ) : (
          <span className="text-gray-500">Not logged in</span>
        )}
      </div>
      <button
        onClick={handleLogout}
        className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors text-sm font-medium"
      >
        Logout
      </button>
    </header>
  );
};

export default StudentHeader;
-e [1;34m===== ./components/ErrorBoundary.jsx =====[0m
import React from 'react';
import { motion } from 'framer-motion';
import { AlertTriangle, RefreshCw } from 'lucide-react';

class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false, error: null, errorInfo: null };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true };
  }

  componentDidCatch(error, errorInfo) {
    this.setState({
      error: error,
      errorInfo: errorInfo
    });
    
    // Log error to console in development
    if (process.env.NODE_ENV === 'development') {
      console.error('Error caught by boundary:', error, errorInfo);
    }
  }

  handleRetry = () => {
    this.setState({ hasError: false, error: null, errorInfo: null });
    window.location.reload();
  };

  render() {
    if (this.state.hasError) {
      return (
        <div className="min-h-screen flex items-center justify-center bg-gray-50 p-4">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="bg-white rounded-lg shadow-lg p-8 max-w-md w-full text-center"
          >
            <div className="flex justify-center mb-4">
              <AlertTriangle className="h-12 w-12 text-red-500" />
            </div>
            
            <h2 className="text-xl font-semibold text-gray-800 mb-2">
              Something went wrong
            </h2>
            
            <p className="text-gray-600 mb-6">
              We encountered an unexpected error. Please try refreshing the page.
            </p>

            <motion.button
              onClick={this.handleRetry}
              className="flex items-center justify-center gap-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors w-full"
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
            >
              <RefreshCw className="h-4 w-4" />
              Refresh Page
            </motion.button>

            {process.env.NODE_ENV === 'development' && this.state.error && (
              <details className="mt-4 text-left">
                <summary className="cursor-pointer text-sm text-gray-500 hover:text-gray-700">
                  Error Details (Development)
                </summary>
                <pre className="mt-2 text-xs text-red-600 bg-red-50 p-2 rounded overflow-auto">
                  {this.state.error && this.state.error.toString()}
                  {this.state.errorInfo && this.state.errorInfo.componentStack}
                </pre>
              </details>
            )}
          </motion.div>
        </div>
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary; -e [1;34m===== ./components/Navbar.jsx =====[0m
import React, { useState, useEffect, useCallback, useMemo } from "react";
import { useRouter } from "next/router";
import { Bell, User, ChevronDown, LogOut, Menu, X, RefreshCw } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";
import { account, databases } from "../utils/appwrite";
import { Query } from "appwrite";
import Head from "next/head";
import dashboardCache, { CACHE_KEYS } from "../utils/cache";
import performanceMonitor, { PERFORMANCE_OPS } from "../utils/performance";

const Navbar = ({ isAdmin = false, toggleSidebar }) => {
  const router = useRouter();
  const [user, setUser] = useState(null);

  // Debug logging
  console.log('Navbar props:', { isAdmin, toggleSidebar: typeof toggleSidebar });
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const [isNotifOpen, setIsNotifOpen] = useState(false);
  const [notifications, setNotifications] = useState([]);
  const [loadingNotifications, setLoadingNotifications] = useState(false);
  const [isRefreshing, setIsRefreshing] = useState(false);

  // Memoize user data fetching
  const fetchUserData = useCallback(async () => {
    try {
    if (isAdmin) {
        const userData = await account.get();
        setUser(userData);
    } else {
      const studentSession = localStorage.getItem("studentSession");
        if (studentSession) {
          setUser(JSON.parse(studentSession));
        }
      }
    } catch (error) {
      console.error("Error fetching user data:", error);
      if (isAdmin) {
        router.push("/login");
      }
    }
  }, [isAdmin, router]);

  // Fetch user data on mount
  useEffect(() => {
    fetchUserData();
  }, [fetchUserData]);

  // Click outside to close dropdowns
  useEffect(() => {
    const handleClickOutside = (e) => {
      if (isDropdownOpen && !e.target.closest(".user-dropdown")) {
        setIsDropdownOpen(false);
      }
      if (isNotifOpen && !e.target.closest(".notification-dropdown")) {
        setIsNotifOpen(false);
      }
    };
    
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, [isDropdownOpen, isNotifOpen]);

  // Optimized notification fetching with caching
  const fetchNotifications = useCallback(async () => {
    setLoadingNotifications(true);
    performanceMonitor.startTimer(PERFORMANCE_OPS.DATA_FETCH);
    
    try {
      // Check cache first
      const cacheKey = isAdmin ? 'admin_notifications' : 'student_notifications';
      const cachedNotifications = dashboardCache.get(cacheKey);
      
      if (cachedNotifications) {
        setNotifications(cachedNotifications);
        setLoadingNotifications(false);
        return;
      }

      const collectionId = isAdmin
        ? process.env.NEXT_PUBLIC_APPWRITE_ADMIN_NOTIFICATIONS_COLLECTION_ID
        : process.env.NEXT_PUBLIC_APPWRITE_STUDENT_NOTIFICATIONS_COLLECTION_ID;
      
      const response = await databases.listDocuments(
        process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
        collectionId,
        [Query.orderDesc("$createdAt"), Query.limit(10)] // Limit to 10 notifications
      );
      
      // Cache notifications for 2 minutes
      dashboardCache.set(cacheKey, response.documents, 2 * 60 * 1000);
      setNotifications(response.documents);
    } catch (error) {
      console.error("Failed to fetch notifications:", error);
      setNotifications([]);
    } finally {
    setLoadingNotifications(false);
      performanceMonitor.endTimer(PERFORMANCE_OPS.DATA_FETCH);
    }
  }, [isAdmin]);

  const handleNotificationClick = useCallback(() => {
    if (!isNotifOpen) {
      fetchNotifications();
    }
    setIsNotifOpen(!isNotifOpen);
  }, [isNotifOpen, fetchNotifications]);

  const handleLogout = useCallback(async () => {
    try {
      if (isAdmin) {
        await account.deleteSession("current");
      }
    localStorage.removeItem("studentSession");
      dashboardCache.clear(); // Clear cache on logout
      router.push("/login");
    } catch (error) {
      console.error("Logout error:", error);
    router.push("/login");
    }
  }, [isAdmin, router]);

  const handleRefresh = useCallback(async () => {
    setIsRefreshing(true);
    try {
      // Clear cache and refetch data
      dashboardCache.clear();
      await fetchUserData();
      if (isNotifOpen) {
        await fetchNotifications();
      }
    } finally {
      setIsRefreshing(false);
    }
  }, [fetchUserData, fetchNotifications, isNotifOpen]);

  // Memoize notification count
  const notificationCount = useMemo(() => {
    return notifications.filter(notif => !notif.read).length;
  }, [notifications]);

  // Memoize formatted notifications
  const formattedNotifications = useMemo(() => {
    return notifications.map(notif => ({
      ...notif,
      formattedTime: new Date(notif.$createdAt).toLocaleDateString('en-US', {
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      })
    }));
  }, [notifications]);

  return (
    <>
      <Head>
        <title>Online Exam Portal - Nielit Tezpur EC</title>
        <link rel="icon" href="https://mimitmalout.ac.in/NIELIT.png" />
      </Head>

      {/* Enhanced Premium Light Navbar */}
      <nav className="fixed top-0 w-full h-16 bg-white/95 backdrop-blur-sm border-b border-gray-200 px-4 sm:px-6 flex items-center justify-between z-50 shadow-sm">
        {/* Left Side - Logo & Menu */}
        <div className="flex items-center space-x-4">
          {/* Menu Button - Visible on all screen sizes */}
          <button
            onClick={toggleSidebar}
            className="p-2 rounded-lg hover:bg-gray-100 transition-colors duration-150"
            title="Toggle sidebar"
          >
            <Menu size={20} className="text-gray-600" />
          </button>

        {/* Logo & Title */}
        <div 
          className="flex items-center space-x-3 cursor-pointer hover:scale-105 transition-transform duration-150"
          onClick={() => router.push("/")}
        >
          <img 
            src="https://mimitmalout.ac.in/NIELIT.png" 
            alt="Logo"
            className="h-8 w-8"
              loading="lazy"
          />
            <span className="text-lg font-semibold text-gray-800 hidden sm:inline">
            Online Exam Portal - Nielit Tezpur EC
          </span>
        </div>
        </div>

        {/* Right Side Controls */}
        <div className="flex items-center space-x-2 sm:space-x-4">
          {/* Refresh Button */}
          <motion.button
            onClick={handleRefresh}
            disabled={isRefreshing}
            className="p-2 rounded-lg hover:bg-gray-100 transition-colors disabled:opacity-50"
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            title="Refresh data"
          >
            <RefreshCw 
              size={18} 
              className={`text-gray-600 ${isRefreshing ? 'animate-spin' : ''}`} 
            />
          </motion.button>

          {/* Notification Bell */}
          <motion.div 
            className="relative notification-dropdown"
            whileHover={{ scale: 1.05 }}
          >
            <button
              onClick={handleNotificationClick}
              className="p-2 rounded-lg hover:bg-gray-100 transition-colors relative"
              title="Notifications"
            >
              <Bell size={20} className="text-gray-600" />
              {notificationCount > 0 && (
                <motion.span
                  initial={{ scale: 0 }}
                  animate={{ scale: 1 }}
                  transition={{ type: "spring", stiffness: 500, damping: 10 }}
                  className="absolute -top-1 -right-1 w-5 h-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center font-medium"
                >
                  {notificationCount > 9 ? '9+' : notificationCount}
                </motion.span>
              )}
            </button>

            {/* Enhanced Notification Dropdown */}
            <AnimatePresence>
              {isNotifOpen && (
                <motion.div
                  initial={{ opacity: 0, y: -10, scale: 0.95 }}
                  animate={{ opacity: 1, y: 0, scale: 1 }}
                  exit={{ opacity: 0, y: -10, scale: 0.95 }}
                  className="absolute right-0 top-12 w-80 bg-white rounded-xl shadow-lg border border-gray-200 z-50 overflow-hidden"
                >
                  <div className="p-4 border-b border-gray-100 bg-gray-50">
                    <div className="flex items-center justify-between">
                      <h3 className="font-semibold text-gray-800">Notifications</h3>
                      {notificationCount > 0 && (
                        <span className="text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded-full">
                          {notificationCount} new
                        </span>
                      )}
                    </div>
                  </div>
                  <div className="max-h-80 overflow-y-auto">
                    {loadingNotifications ? (
                      <div className="p-6 text-center">
                        <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-500 mx-auto mb-2"></div>
                        <p className="text-gray-500 text-sm">Loading notifications...</p>
                      </div>
                    ) : formattedNotifications.length === 0 ? (
                      <div className="p-6 text-center">
                        <Bell className="w-8 h-8 text-gray-300 mx-auto mb-2" />
                        <p className="text-gray-500 text-sm">No notifications</p>
                      </div>
                    ) : (
                      formattedNotifications.map((notif, index) => (
                        <motion.div
                          key={notif.$id}
                          initial={{ opacity: 0, x: -20 }}
                          animate={{ opacity: 1, x: 0 }}
                          transition={{ delay: index * 0.05 }}
                          className="p-4 border-b border-gray-100 hover:bg-gray-50 transition-colors cursor-pointer"
                        >
                          <div className="flex items-start space-x-3">
                            <div className="w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0"></div>
                            <div className="flex-1 min-w-0">
                              <p className="font-medium text-gray-800 text-sm mb-1">{notif.title}</p>
                              <p className="text-gray-600 text-xs leading-relaxed">{notif.content}</p>
                              <p className="text-gray-400 text-xs mt-2">{notif.formattedTime}</p>
                            </div>
                        </div>
                        </motion.div>
                      ))
                    )}
                  </div>
                </motion.div>
              )}
            </AnimatePresence>
          </motion.div>

          {/* Enhanced User Dropdown */}
          <motion.div className="relative user-dropdown">
            <motion.button
              onClick={() => setIsDropdownOpen(!isDropdownOpen)}
              whileHover={{ scale: 1.05 }}
              className="flex items-center space-x-2 hover:bg-gray-100 rounded-lg p-2 transition-colors"
            >
              <div className="w-8 h-8 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center">
                <User size={16} className="text-white" />
              </div>
              <span className="hidden sm:block text-sm font-medium text-gray-700">
                {user?.name || "Guest"}
              </span>
              <ChevronDown 
                size={16} 
                className={`text-gray-500 transition-transform ${isDropdownOpen ? 'rotate-180' : ''}`} 
              />
            </motion.button>

            <AnimatePresence>
              {isDropdownOpen && (
                <motion.div
                  initial={{ opacity: 0, y: -10, scale: 0.95 }}
                  animate={{ opacity: 1, y: 0, scale: 1 }}
                  exit={{ opacity: 0, y: -10, scale: 0.95 }}
                  className="absolute right-0 top-12 w-56 bg-white rounded-xl shadow-lg border border-gray-200 z-50 overflow-hidden"
                >
                  <div className="p-4 border-b border-gray-100 bg-gray-50">
                    <p className="font-semibold text-gray-800">{user?.name || "Guest"}</p>
                    <p className="text-gray-500 text-sm">{user?.email || ""}</p>
                    <span className="inline-block mt-1 px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded-full">
                      {isAdmin ? "Administrator" : "Student"}
                    </span>
                  </div>
                  <div className="p-2">
                  <button
                    onClick={handleLogout}
                      className="w-full px-3 py-2 text-left text-sm text-gray-700 hover:bg-red-50 hover:text-red-600 rounded-lg transition-colors flex items-center space-x-2"
                  >
                      <LogOut size={16} />
                    <span>Sign out</span>
                  </button>
                  </div>
                </motion.div>
              )}
            </AnimatePresence>
          </motion.div>
        </div>
      </nav>
    </>
  );
};

export default React.memo(Navbar);-e [1;34m===== ./components/AdminLayout.jsx =====[0m
import React, { useState, useMemo, useCallback, useRef } from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import { motion, AnimatePresence } from "framer-motion";
import {
  LayoutDashboard,
  BookOpen,
  Users,
  FileText,
  FileCheck,
  HelpCircle,
  BarChart2,
  Bell,
  Settings,
  ChevronRight,
  Home,
  Activity,
  Shield,
  Monitor,
  UserCog,
} from "lucide-react";

const AdminLayout = ({ children, sidebarOpen, toggleSidebar }) => {
  const router = useRouter();
  const [expandedSections, setExpandedSections] = useState(new Set(['main', 'operations']));
  const sidebarRef = useRef(null);

  // Memoize menu items for better performance
  const menuItems = useMemo(() => [
    {
      section: 'main',
      title: 'Main',
      items: [
        { name: "Dashboard", path: "/admin", icon: LayoutDashboard, description: "Overview and analytics" },
      ]
    },
    {
      section: 'management',
      title: 'Management',
      items: [
        { name: "Manage Courses", path: "/admin/courses", icon: BookOpen, description: "Course administration" },
        { name: "Manage Students", path: "/admin/students", icon: Users, description: "Student management" },
        { name: "Manage Examiners", path: "/admin/controller", icon: UserCog, description: "Examiner accounts" }, // Changed from Controllers to Examiners
        { name: "Manage Exams", path: "/admin/exams", icon: FileText, description: "Exam configuration" },
        { name: "Manage Questions", path: "/admin/questions", icon: HelpCircle, description: "Question bank" },
      ]
    },
    {
      section: 'operations',
      title: 'Operations',
      items: [
        { name: "Live Monitoring", path: "/admin/monitoring", icon: Monitor, description: "Real-time student activity" },
        { name: "Exam Enrollments", path: "/admin/exam-enrollments", icon: FileCheck, description: "Student enrollments" },
        { name: "Results & Analytics", path: "/admin/results", icon: BarChart2, description: "Performance analytics" },
        { name: "Manage Notifications", path: "/admin/notifications", icon: Bell, description: "System notifications" },
      ]
    },
    {
      section: 'system',
      title: 'System',
      items: [
        { name: "Settings", path: "/admin/settings", icon: Settings, description: "System configuration" },
      ]
    }
  ], []);

  // Optimized toggle section with useCallback
  const toggleSection = useCallback((section) => {
    setExpandedSections(prev => {
      const newSet = new Set(prev);
      if (newSet.has(section)) {
        newSet.delete(section);
      } else {
        newSet.add(section);
      }
      return newSet;
    });
  }, []);

  // Optimized active path check
  const isActivePath = useCallback((path) => {
    return router.pathname === path;
  }, [router.pathname]);

  // Get current section based on active path
  const currentSection = useMemo(() => {
    for (const section of menuItems) {
      if (section.items.some(item => isActivePath(item.path))) {
        return section.section;
      }
    }
    return 'main';
  }, [menuItems, isActivePath]);

  // Auto-expand current section
  React.useEffect(() => {
    if (!expandedSections.has(currentSection)) {
      setExpandedSections(prev => new Set([...prev, currentSection]));
    }
  }, [currentSection, expandedSections]);

  // Optimized navigation handler
  const handleNavigation = useCallback((path) => {
    // Pre-close sidebar on mobile for better UX
    if (window.innerWidth < 768) {
      toggleSidebar();
    }
    router.push(path);
  }, [router, toggleSidebar]);

  return (
    <>
      {/* Optimized Sidebar with simplified animations */}
      <motion.aside
        ref={sidebarRef}
        initial={false}
        animate={{ 
          x: sidebarOpen ? 0 : -256,
        }}
        transition={{ 
          type: "tween", 
          duration: 0.2,
          ease: "easeInOut"
        }}
        className="fixed left-0 top-16 h-[calc(100vh-4rem)] z-40 w-64 bg-white border-r border-gray-200 shadow-lg overflow-hidden"
        style={{ willChange: 'transform' }}
      >
        <div className="h-full flex flex-col">
          {/* Sidebar Header */}
          <div className="p-4 border-b border-gray-100 bg-gradient-to-r from-blue-50 to-purple-50">
            <div className="flex items-center space-x-3">
              <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
                <Shield size={16} className="text-white" />
              </div>
              <div>
                <h2 className="text-lg font-bold text-gray-800">Admin Panel</h2>
                <p className="text-xs text-gray-500">Examination Management Console</p> {/* Updated text */}
              </div>
            </div>
          </div>

          {/* Navigation Menu */}
          <div className="flex-1 overflow-y-auto p-4 space-y-2">
            {menuItems.map((section) => (
              <div key={section.section} className="space-y-1">
                {/* Section Header */}
                <button
                  onClick={() => toggleSection(section.section)}
                  className="w-full flex items-center justify-between px-3 py-2 text-sm font-semibold text-gray-600 hover:text-gray-800 hover:bg-gray-50 rounded-lg transition-colors duration-150"
                >
                  <span className="flex items-center space-x-2">
                    <span className="w-2 h-2 bg-gray-400 rounded-full"></span>
                    <span>{section.title}</span>
                  </span>
                  <ChevronRight 
                    size={14} 
                    className={`transition-transform duration-150 ${
                      expandedSections.has(section.section) ? 'rotate-90' : ''
                    }`}
                  />
                </button>

                {/* Section Items with optimized animations */}
                <AnimatePresence>
                  {expandedSections.has(section.section) && (
                    <motion.div
                      initial={{ opacity: 0, height: 0 }}
                      animate={{ opacity: 1, height: "auto" }}
                      exit={{ opacity: 0, height: 0 }}
                      transition={{ duration: 0.15, ease: "easeInOut" }}
                      className="space-y-1 ml-4"
                    >
                      {section.items.map((item) => (
                        <div key={item.path}>
                          <button
                            onClick={() => handleNavigation(item.path)}
                            className={`w-full text-left px-3 py-2 rounded-lg transition-all duration-150 group ${
                              isActivePath(item.path)
                                ? "bg-gradient-to-r from-blue-500 to-purple-600 text-white shadow-md"
                                : "text-gray-600 hover:bg-gray-50 hover:text-gray-800"
                            }`}
                          >
                            <div className="flex items-center space-x-3">
                              <div className={`flex-shrink-0 ${
                                isActivePath(item.path) 
                                  ? "text-white" 
                                  : "text-gray-400 group-hover:text-gray-600"
                              }`}>
                                <item.icon size={18} />
                              </div>
                              <div className="flex-1 min-w-0">
                                <p className={`text-sm font-medium truncate ${
                                  isActivePath(item.path) ? "text-white" : "text-gray-700"
                                }`}>
                                  {item.name}
                                </p>
                                <p className={`text-xs truncate ${
                                  isActivePath(item.path) ? "text-blue-100" : "text-gray-500"
                                }`}>
                                  {item.description}
                                </p>
                              </div>
                            </div>
                          </button>
                        </div>
                      ))}
                    </motion.div>
                  )}
                </AnimatePresence>
              </div>
            ))}
          </div>

          {/* Sidebar Footer */}
          <div className="p-4 border-t border-gray-100 bg-gray-50">
            <div className="flex items-center space-x-3 text-sm text-gray-500">
              <Activity size={14} />
              <span>System Status: Online</span>
            </div>
            <div className="mt-2 flex items-center space-x-2">
              <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
              <span className="text-xs text-gray-400">All systems operational</span>
            </div>
          </div>
        </div>
      </motion.aside>

      {/* Mobile Overlay */}
      <AnimatePresence>
        {sidebarOpen && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.15 }}
            className="fixed inset-0 bg-black bg-opacity-50 z-30 md:hidden"
            onClick={toggleSidebar}
          />
        )}
      </AnimatePresence>

      {/* Optimized Main Content with CSS transforms */}
      <main
        className={`flex-1 min-h-[calc(100vh-4rem)] transition-all duration-200 ease-in-out ${
          sidebarOpen 
            ? "bg-gradient-to-br from-gray-50 to-gray-100" 
            : "bg-white"
        }`}
        style={{
          marginLeft: sidebarOpen ? '256px' : '0',
          willChange: 'margin-left'
        }}
      >
        <div className="p-4 sm:p-6">
          <div className="max-w-7xl mx-auto">
            {/* Breadcrumb Navigation */}
            <nav className="mb-6">
              <ol className="flex items-center space-x-2 text-sm text-gray-500">
                <li>
                  <Link href="/admin" className="hover:text-blue-600 transition-colors">
                    <Home size={14} className="inline mr-1" />
                    Admin
                  </Link>
                </li>
                <li>
                  <ChevronRight size={14} />
                </li>
                <li className="text-gray-700 font-medium">
                  {menuItems.flatMap(section => section.items).find(item => isActivePath(item.path))?.name || 'Dashboard'}
                </li>
              </ol>
            </nav>

            {/* Page Content */}
            <div>
              {children}
            </div>
          </div>
        </div>
      </main>
    </>
  );
};

export default React.memo(AdminLayout);-e [1;34m===== ./styles/globals.css =====[0m
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff; /* Light mode background */
  --foreground: #d1cece; /* Set to pure black */
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #ffffff; /* Dark mode background */
    --foreground: #2d2c2c; /* Light gray for dark mode text */
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}
-e [1;34m===== ./online_exam_system.txt =====[0m
