-e [1;34m===== ./online_exam_system.txt =====[0m
-e [1;34m===== ./styles/globals.css =====[0m
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff; /* Light mode background */
  --foreground: #d1cece; /* Set to pure black */
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #ffffff; /* Dark mode background */
    --foreground: #2d2c2c; /* Light gray for dark mode text */
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}
-e [1;34m===== ./utils/auth.js =====[0m
// src/utils/auth.js
import { account, databases, ID } from "./appwrite";
import { Query } from "appwrite";

export const loginAdmin = async (email, password) => {
  try {
    const session = await account.createEmailPasswordSession(email, password);
    return session;
  } catch (error) {
    throw new Error(error.message);
  }
};

export const loginStudent = async (email, password) => {
  try {
    // First find the student in your database
    const response = await databases.listDocuments(
      process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
      process.env.NEXT_PUBLIC_APPWRITE_STUDENTS_COLLECTION_ID,
      [Query.equal("email", [email])]
    );

    if (response.documents.length === 0) {
      throw new Error("Student not found.");
    }

    const student = response.documents[0];

    // Verify password (in production, use proper password hashing)
    if (student.password !== password) {
      throw new Error("Invalid credentials. Please check your email and password.");
    }

    // Return the student session data including the studentId
    return {
      studentId: student.$id,  // Make sure this matches your collection's ID field
      email: student.email,
      name: student.name,
      // Add any other relevant student data
    };
  } catch (error) {
    throw new Error(error.message);
  }
};

export const getCurrentStudentSession = () => {
  if (typeof window !== 'undefined') {
    const session = localStorage.getItem('studentSession');
    return session ? JSON.parse(session) : null;
  }
  return null;
};

export const logoutStudent = () => {
  if (typeof window !== 'undefined') {
    localStorage.removeItem('studentSession');
  }
};-e [1;34m===== ./utils/appwrite.js =====[0m
import { Client, Account, Databases, Storage, ID, Query, Permission, Role } from "appwrite";

const client = new Client();
client
  .setEndpoint(process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT)
  .setProject(process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID);

const account = new Account(client);
const databases = new Databases(client);
const storage = new Storage(client);

// Export all the initialized instances and classes
export { 
  client,
  account, 
  databases, 
  storage, 
  ID, 
  Query, 
  Permission, 
  Role 
};-e [1;34m===== ./utils/protectRoute.js =====[0m
//src/utils/protectRoute.js
import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import { account } from "./appwrite";

const protectRoute = (WrappedComponent) => {
  return (props) => {
    const router = useRouter();
    const [isAuthenticated, setIsAuthenticated] = useState(null);

    useEffect(() => {
      const checkAuth = async () => {
        try {
          let user = null;

          if (router.pathname.startsWith("/admin")) {
            // ‚úÖ Admin Authentication (via Appwrite Auth)
            user = await account.get();
          } else {
            // ‚úÖ Student Authentication (via localStorage)
            const studentSession = localStorage.getItem("studentSession");
            if (studentSession) {
              console.log("‚úÖ Student session found in protectRoute:", studentSession);
              user = JSON.parse(studentSession);
            }
          }

          if (user) {
            setIsAuthenticated(true);
          } else {
            throw new Error("Not authenticated");
          }
        } catch (error) {
          setIsAuthenticated(false);
          router.replace("/login"); // ‚ùå Redirect if not authenticated
        }
      };

      checkAuth();
    }, []);

    if (isAuthenticated === null) {
      return <p>Loading...</p>; // ‚úÖ Prevents flashing protected page
    }

    return <WrappedComponent {...props} />;
  };
};

export default protectRoute;
-e [1;34m===== ./pages/admin/exam-enrollments.jsx =====[0m
import React, { useState, useEffect, useRef, useCallback } from "react";
import { databases } from "../../utils/appwrite"; // Assuming this path is correct
import { Plus, Edit, Trash2, Eye, Search, X, Download } from "lucide-react";
import { Query } from "appwrite";

// Custom Confirmation Dialog Component
const ConfirmationDialog = ({ isOpen, title, message, onConfirm, onCancel, confirmText = "Confirm", cancelText = "Cancel" }) => {
    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 bg-black bg-opacity-60 flex justify-center items-center z-50 p-4">
            <div className="bg-white rounded-xl shadow-2xl p-6 w-full max-w-sm transform transition-all duration-300 scale-100 opacity-100">
                <h3 className="text-xl font-bold text-gray-800 mb-4">{title}</h3>
                <p className="text-gray-700 mb-6">{message}</p>
                <div className="flex justify-end gap-3">
                    <button
                        onClick={onCancel}
                        className="bg-gray-500 text-white px-5 py-2 rounded-lg hover:bg-gray-600 transition-colors duration-200 shadow-md"
                    >
                        {cancelText}
                    </button>
                    <button
                        onClick={onConfirm}
                        className="bg-red-600 text-white px-5 py-2 rounded-lg hover:bg-red-700 transition-colors duration-200 shadow-md"
                    >
                        {confirmText}
                    </button>
                </div>
            </div>
        </div>
    );
};

// Custom Message Dialog Component (for alerts)
const MessageDialog = ({ isOpen, title, message, onClose, closeText = "Close" }) => {
    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 bg-black bg-opacity-60 flex justify-center items-center z-50 p-4">
            <div className="bg-white rounded-xl shadow-2xl p-6 w-full max-w-sm transform transition-all duration-300 scale-100 opacity-100">
                <h3 className="text-xl font-bold text-gray-800 mb-4">{title}</h3>
                <p className="text-gray-700 mb-6">{message}</p>
                <div className="flex justify-end">
                    <button
                        onClick={onClose}
                        className="bg-blue-600 text-white px-5 py-2 rounded-lg hover:bg-blue-700 transition-colors duration-200 shadow-md"
                    >
                        {closeText}
                    </button>
                </div>
            </div>
        </div>
    );
};

const ExamEnrollment = () => {
    const [enrollments, setEnrollments] = useState([]);
    const [students, setStudents] = useState([]);
    const [exams, setExams] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    // --- Modal States ---
    const [modalOpen, setModalOpen] = useState(false);
    const [viewModalOpen, setViewModalOpen] = useState(false);
    const [bulkModalOpen, setBulkModalOpen] = useState(false);
    const [confirmDialogOpen, setConfirmDialogOpen] = useState(false);
    const [messageDialogOpen, setMessageDialogOpen] = useState(false);
    const [dialogContent, setDialogContent] = useState({ title: "", message: "", onConfirm: () => {}, onCancel: () => {} });

    // --- Export State ---
    const [isExportMenuOpen, setIsExportMenuOpen] = useState(false);

    // --- Data States ---
    const [editingEnrollment, setEditingEnrollment] = useState(null);
    const [viewingEnrollment, setViewingEnrollment] = useState(null);
    const [selectedStudents, setSelectedStudents] = useState(new Set());
    const [selectedEnrollments, setSelectedEnrollments] = useState(new Set());
    const [selectedExamForBulk, setSelectedExamForBulk] = useState("");
    const [searchTerm, setSearchTerm] = useState("");
    const [filterExamId, setFilterExamId] = useState("");
    const [mainSearchTerm, setMainSearchTerm] = useState("");

    // --- Refs ---
    const modalRef = useRef(null);
    const viewModalRef = useRef(null);
    const bulkModalRef = useRef(null);
    const exportButtonRef = useRef(null);

    // --- Initial Form Data ---
    const initialFormData = {
        student_id: "",
        exam_id: "",
        enrolled_at: new Date().toISOString().slice(0, 16),
    };
    const [formData, setFormData] = useState(initialFormData);

    // --- Fetch Data on Mount ---
    useEffect(() => {
        fetchAllData();
    }, []);

    // --- Close Export Menu on Click Outside ---
    useEffect(() => {
        const handleClickOutside = (event) => {
            if (exportButtonRef.current && !exportButtonRef.current.contains(event.target)) {
                setIsExportMenuOpen(false);
            }
        };

        if (isExportMenuOpen) {
            document.addEventListener("mousedown", handleClickOutside);
        }
        return () => {
            document.removeEventListener("mousedown", handleClickOutside);
        };
    }, [isExportMenuOpen]);

    // --- Fetch All Data ---
    const fetchAllData = useCallback(async () => {
        setLoading(true);
        setError(null);
        try {
            const [enrollmentsResponse, studentsResponse, examsResponse] =
                await Promise.all([
                    databases.listDocuments(
                        process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
                        process.env.NEXT_PUBLIC_APPWRITE_ENROLLMENTS_COLLECTION_ID,
                        [Query.orderDesc("$createdAt"), Query.limit(1000)]
                    ),
                    databases.listDocuments(
                        process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
                        process.env.NEXT_PUBLIC_APPWRITE_STUDENTS_COLLECTION_ID,
                        [
                            Query.orderDesc("$createdAt"),
                            Query.limit(5000),
                        ]
                    ),
                    databases.listDocuments(
                        process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
                        process.env.NEXT_PUBLIC_APPWRITE_EXAMS_COLLECTION_ID,
                        [Query.orderDesc("$createdAt"), Query.limit(1000)]
                    ),
                ]);

            const studentMap = new Map(
                studentsResponse.documents.map((student) => [
                    student.$id,
                    student,
                ])
            );
            const examMap = new Map(
                examsResponse.documents.map((exam) => [exam.$id, exam])
            );

            const normalizedEnrollments = enrollmentsResponse.documents.map(
                (enrollment) => {
                    let studentLookupKey = Array.isArray(enrollment.student_id)
                        ? enrollment.student_id[0]
                        : enrollment.student_id;

                    if (typeof studentLookupKey === 'object' && studentLookupKey !== null && studentLookupKey.$id) {
                        studentLookupKey = studentLookupKey.$id;
                    }
                    const student = studentMap.get(studentLookupKey);
                    if (!student && studentLookupKey) {
                        console.error(`Student NOT FOUND for ID: ${studentLookupKey} (Enrollment: ${enrollment.$id})`);
                    }

                    let examLookupKey = Array.isArray(enrollment.exam_id)
                        ? enrollment.exam_id[0]
                        : enrollment.exam_id;

                    if (typeof examLookupKey === 'object' && examLookupKey !== null && examLookupKey.$id) {
                        examLookupKey = examLookupKey.$id;
                    }
                    const exam = examMap.get(examLookupKey);
                    if (!exam && examLookupKey) {
                        console.error(`Exam NOT FOUND for ID: ${examLookupKey} (Enrollment: ${enrollment.$id})`);
                    }

                    const rawAppwriteStatus = enrollment.status; 
                    let appearance_status_display = "Not Appeared"; 
                    if (rawAppwriteStatus === 'appeared') {
                        appearance_status_display = "Appeared";
                    } else if (rawAppwriteStatus === 'not_appeared') {
                        appearance_status_display = "Not Appeared";
                    }
                    
                    return {
                        id: enrollment.$id,
                        enrollment_id: enrollment.enrollment_id, // Keep for other uses (export, view modal)
                        student_id: student?.$id || studentLookupKey || 'N/A',
                        student_name: student?.name || 'Unknown Student',
                        student_email: student?.email || '',
                        exam_id: exam?.$id || examLookupKey || 'N/A',
                        exam_name: exam?.name || 'Unknown Exam',
                        exam_description: exam?.description || '',
                        exam_date: exam?.exam_date ? new Date(exam.exam_date).toLocaleDateString() : 'N/A',
                        enrolled_at: enrollment.enrolled_at
                            ? new Date(enrollment.enrolled_at).toLocaleString()
                            : 'N/A',
                        raw_enrolled_at: enrollment.enrolled_at,
                        appearance_status_display,
                        raw_appwrite_status: rawAppwriteStatus,
                    };
                }
            );

            setEnrollments(normalizedEnrollments);
            setStudents(studentsResponse.documents);
            setExams(examsResponse.documents);
            setSelectedEnrollments(new Set());
        } catch (error) {
            setError(error.message);
            console.error("Error fetching data:", error);
        } finally {
            setLoading(false);
        }
    }, []);

    // --- Export to CSV ---
    const exportToCSV = async () => {
        try {
            const { Parser } = await import('json2csv');
            const fields = [
                { label: 'Enrollment ID', value: 'enrollment_id' },
                { label: 'Student Name', value: 'student_name' },
                { label: 'Student Email', value: 'student_email' },
                { label: 'Exam Name', value: 'exam_name' },
                { label: 'Exam Date', value: 'exam_date' },
                { label: 'Status', value: 'appearance_status_display' },
                { label: 'Enrolled At', value: 'enrolled_at' },
            ];
            const parser = new Parser({ fields });
            const csv = parser.parse(filteredEnrollments);
            const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
            const url = URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.setAttribute('href', url);
            link.setAttribute('download', `enrollments_${new Date().toISOString().slice(0, 10)}.csv`);
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(url);
        } catch (error) {
            console.error('Error exporting to CSV:', error);
            setDialogContent({
                title: "Export Error",
                message: `Failed to export to CSV: ${error.message}`,
                onClose: () => setMessageDialogOpen(false)
            });
            setMessageDialogOpen(true);
        }
    };

    // --- Export to XLS ---
    const exportToXLS = async () => {
        try {
            const { utils, writeFile } = await import('xlsx');
            const data = filteredEnrollments.map(enrollment => ({
                'Enrollment ID': enrollment.enrollment_id,
                'Student Name': enrollment.student_name,
                'Student Email': enrollment.student_email,
                'Exam Name': enrollment.exam_name,
                'Exam Date': enrollment.exam_date,
                'Status': enrollment.appearance_status_display,
                'Enrolled At': enrollment.enrolled_at,
            }));
            const worksheet = utils.json_to_sheet(data);
            const workbook = utils.book_new();
            utils.book_append_sheet(workbook, worksheet, 'Enrollments');
            writeFile(workbook, `enrollments_${new Date().toISOString().slice(0, 10)}.xlsx`);
        } catch (error) {
            console.error('Error exporting to XLS:', error);
            setDialogContent({
                title: "Export Error",
                message: `Failed to export to XLS: ${error.message}`,
                onClose: () => setMessageDialogOpen(false)
            });
            setMessageDialogOpen(true);
        }
    };
    
    const handleExport = (format) => {
        setIsExportMenuOpen(false);
        if (filteredEnrollments.length === 0) {
            setDialogContent({
                title: "No Data",
                message: "No enrollments available to export.",
                onClose: () => setMessageDialogOpen(false)
            });
            setMessageDialogOpen(true);
            return;
        }
        if (format === 'csv') {
            exportToCSV();
        } else if (format === 'xls') {
            exportToXLS();
        }
    };

    const handleInputChange = (e, field) => {
        setFormData({ ...formData, [field]: e.target.value });
    };

    const validateForm = () => {
        if (!formData.student_id || !formData.exam_id) {
            setDialogContent({
                title: "Validation Error",
                message: "Please select both a student and an exam.",
                onClose: () => setMessageDialogOpen(false)
            });
            setMessageDialogOpen(true);
            return false;
        }
        return true;
    };

    const generateEnrollmentId = () => {
        return `enr_${Date.now().toString(36)}_${Math.random()
            .toString(36)
            .substring(2, 8)}`;
    };

    const handleSave = async () => {
        if (!validateForm()) return;

        try {
            const enrollmentData = {
                enrollment_id: editingEnrollment
                    ? editingEnrollment.enrollment_id
                    : generateEnrollmentId(),
                student_id: [formData.student_id],
                exam_id: [formData.exam_id],
                enrolled_at: formData.enrolled_at,
                status: editingEnrollment ? editingEnrollment.raw_appwrite_status : "not_appeared", 
            };

            if (editingEnrollment) {
                await databases.updateDocument(
                    process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
                    process.env.NEXT_PUBLIC_APPWRITE_ENROLLMENTS_COLLECTION_ID,
                    editingEnrollment.id,
                    enrollmentData
                );
            } else {
                await databases.createDocument(
                    process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
                    process.env.NEXT_PUBLIC_APPWRITE_ENROLLMENTS_COLLECTION_ID,
                    "unique()",
                    enrollmentData
                );
            }

            closeModal();
            fetchAllData();
        } catch (error) {
            console.error("Error saving enrollment:", error);
            setDialogContent({
                title: "Error",
                message: `Failed to save enrollment: ${error.message}`,
                onClose: () => setMessageDialogOpen(false)
            });
            setMessageDialogOpen(true);
        }
    };

    const handleDelete = (id) => {
        setDialogContent({
            title: "Confirm Deletion",
            message: "Are you sure you want to delete this enrollment?",
            onConfirm: async () => {
                setConfirmDialogOpen(false);
                try {
                    await databases.deleteDocument(
                        process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
                        process.env.NEXT_PUBLIC_APPWRITE_ENROLLMENTS_COLLECTION_ID,
                        id
                    );
                    fetchAllData();
                } catch (error) {
                    console.error("Error deleting enrollment:", error.message);
                    setDialogContent({
                        title: "Error",
                        message: `Failed to delete enrollment: ${error.message}`,
                        onClose: () => setMessageDialogOpen(false)
                    });
                    setMessageDialogOpen(true);
                }
            },
            onCancel: () => setConfirmDialogOpen(false)
        });
        setConfirmDialogOpen(true);
    };

    const handleEdit = (enrollment) => {
        setEditingEnrollment(enrollment);
        setFormData({
            student_id: enrollment.student_id,
            exam_id: enrollment.exam_id,
            enrolled_at: enrollment.raw_enrolled_at
                ? new Date(enrollment.raw_enrolled_at)
                    .toISOString()
                    .slice(0, 16)
                : new Date().toISOString().slice(0, 16),
        });
        setModalOpen(true);
    };

    const handleView = (enrollment) => {
        setViewingEnrollment(enrollment);
        setViewModalOpen(true);
    };

    const closeModal = () => {
        setModalOpen(false);
        setEditingEnrollment(null);
        setFormData(initialFormData);
    };

    const closeViewModal = () => {
        setViewModalOpen(false);
        setViewingEnrollment(null);
    };

    const closeBulkModal = () => {
        setBulkModalOpen(false);
        setSelectedExamForBulk("");
        setSelectedStudents(new Set());
        setSearchTerm("");
    };

    useEffect(() => {
        const handleClickOutside = (event) => {
            if (modalRef.current && !modalRef.current.contains(event.target)) {
                closeModal();
            }
            if (viewModalRef.current && !viewModalRef.current.contains(event.target)) {
                closeViewModal();
            }
            if (bulkModalRef.current && !bulkModalRef.current.contains(event.target)) {
                closeBulkModal();
            }
        };

        if (modalOpen || viewModalOpen || bulkModalOpen) {
            document.addEventListener("mousedown", handleClickOutside);
        }
        return () => {
            document.removeEventListener("mousedown", handleClickOutside);
        };
    }, [modalOpen, viewModalOpen, bulkModalOpen]);

    const handleStudentSelect = (studentId) => {
        setSelectedStudents((prevSelected) => {
            const newSelected = new Set(prevSelected);
            if (newSelected.has(studentId)) {
                newSelected.delete(studentId);
            } else {
                newSelected.add(studentId);
            }
            return newSelected;
        });
    };

    const handleSelectAllStudents = (filteredStudentIds) => {
        const currentSelected = new Set(selectedStudents);
        const allFilteredSelected = filteredStudentIds.every(id => currentSelected.has(id));

        if (allFilteredSelected && filteredStudentIds.length > 0) {
            filteredStudentIds.forEach(id => currentSelected.delete(id));
        } else {
            filteredStudentIds.forEach(id => currentSelected.add(id));
        }
        setSelectedStudents(currentSelected);
    };

    const handleBulkSave = async () => {
        if (!selectedExamForBulk) {
            setDialogContent({
                title: "Selection Required",
                message: "Please select an exam.",
                onClose: () => setMessageDialogOpen(false)
            });
            setMessageDialogOpen(true);
            return;
        }
        if (selectedStudents.size === 0) {
            setDialogContent({
                title: "Selection Required",
                message: "Please select at least one student.",
                onClose: () => setMessageDialogOpen(false)
            });
            setMessageDialogOpen(true);
            return;
        }

        const enrolledAt = new Date().toISOString();
        let successCount = 0;
        let failCount = 0;
        let skippedCount = 0;

        const existingEnrollmentsForExam = enrollments.filter(
            (e) => e.exam_id === selectedExamForBulk
        );
        const enrolledStudentIds = new Set(
            existingEnrollmentsForExam.map((e) => e.student_id)
        );

        setLoading(true);

        const promises = [];

        selectedStudents.forEach((studentId) => {
            if (enrolledStudentIds.has(studentId)) {
                console.warn(`Student ${studentId} is already enrolled. Skipping.`);
                skippedCount++;
                return;
            }

            const enrollmentData = {
                enrollment_id: generateEnrollmentId(),
                student_id: [studentId],
                exam_id: [selectedExamForBulk],
                enrolled_at: enrolledAt,
                status: "not_appeared", // Default status for new bulk enrollments
            };

            promises.push(
                databases.createDocument(
                    process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
                    process.env.NEXT_PUBLIC_APPWRITE_ENROLLMENTS_COLLECTION_ID,
                    "unique()",
                    enrollmentData
                ).then(() => successCount++)
                .catch((err) => {
                    console.error(`Failed to enroll student ${studentId}:`, err);
                    failCount++;
                })
            );
        });

        try {
            await Promise.all(promises);
            let message = `Bulk enrollment complete! \n- ${successCount} successful\n- ${failCount} failed`;
            if (skippedCount > 0) {
                message += `\n- ${skippedCount} skipped (already enrolled)`;
            }
            setDialogContent({
                title: "Bulk Enrollment Result",
                message: message,
                onClose: () => setMessageDialogOpen(false)
            });
            setMessageDialogOpen(true);
            closeBulkModal();
            fetchAllData();
        } catch (error) {
            console.error("An unexpected error occurred during bulk save:", error);
            setDialogContent({
                title: "Error",
                message: "An unexpected error occurred during bulk enrollment.",
                onClose: () => setMessageDialogOpen(false)
            });
            setMessageDialogOpen(true);
        } 
        // setLoading will be set to false by fetchAllData
    };

    const handleSelectEnrollment = (enrollmentId) => {
        setSelectedEnrollments((prevSelected) => {
            const newSelected = new Set(prevSelected);
            if (newSelected.has(enrollmentId)) {
                newSelected.delete(enrollmentId);
            } else {
                newSelected.add(enrollmentId);
            }
            return newSelected;
        });
    };

    const handleSelectAllEnrollments = () => {
        if (selectedEnrollments.size === filteredEnrollments.length && filteredEnrollments.length > 0) {
            setSelectedEnrollments(new Set());
        } else {
            const allIds = new Set(filteredEnrollments.map(e => e.id));
            setSelectedEnrollments(allIds);
        }
    };
    
    const handleBulkDelete = () => {
        if (selectedEnrollments.size === 0) {
            setDialogContent({
                title: "No Selection",
                message: "Please select at least one enrollment to delete.",
                onClose: () => setMessageDialogOpen(false)
            });
            setMessageDialogOpen(true);
            return;
        }

        setDialogContent({
            title: "Confirm Bulk Deletion",
            message: `Are you sure you want to delete ${selectedEnrollments.size} selected enrollments? This action cannot be undone.`,
            onConfirm: async () => {
                setConfirmDialogOpen(false);
                setLoading(true);
                let successCount = 0;
                let failCount = 0;
                const deletePromises = [];

                selectedEnrollments.forEach(id => {
                    deletePromises.push(
                        databases.deleteDocument(
                            process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
                            process.env.NEXT_PUBLIC_APPWRITE_ENROLLMENTS_COLLECTION_ID,
                            id
                        ).then(() => successCount++)
                        .catch((err) => {
                            console.error(`Failed to delete enrollment ${id}:`, err);
                            failCount++;
                        })
                    );
                });

                try {
                    await Promise.all(deletePromises);
                    setDialogContent({
                        title: "Bulk Deletion Result",
                        message: `Bulk deletion complete! \n- ${successCount} successful\n- ${failCount} failed`,
                        onClose: () => setMessageDialogOpen(false)
                    });
                    setMessageDialogOpen(true);
                    fetchAllData();
                } catch (error) {
                    console.error("An unexpected error occurred during bulk deletion:", error);
                    setDialogContent({
                        title: "Error",
                        message: "An unexpected error occurred during bulk deletion.",
                        onClose: () => setMessageDialogOpen(false)
                    });
                    setMessageDialogOpen(true);
                }
                // setLoading will be set to false by fetchAllData
            },
            onCancel: () => setConfirmDialogOpen(false)
        });
        setConfirmDialogOpen(true);
    };

    const filteredStudents = students.filter(
        (student) =>
            student.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
            student.email.toLowerCase().includes(searchTerm.toLowerCase())
    );

    const filteredStudentIds = filteredStudents.map(student => student.$id);
    const allFilteredStudentsSelected = filteredStudents.length > 0 && filteredStudentIds.every(id => selectedStudents.has(id));

    const filteredEnrollments = enrollments.filter(enrollment => {
        const matchesExamFilter = filterExamId === "" || enrollment.exam_id === filterExamId;
        const matchesSearchTerm = mainSearchTerm === "" ||
            enrollment.student_name.toLowerCase().includes(mainSearchTerm.toLowerCase()) ||
            enrollment.exam_name.toLowerCase().includes(mainSearchTerm.toLowerCase()) ||
            (enrollment.enrollment_id && enrollment.enrollment_id.toLowerCase().includes(mainSearchTerm.toLowerCase())); // Keep enrollment_id search capability
        return matchesExamFilter && matchesSearchTerm;
    });

    const allEnrollmentsSelected = filteredEnrollments.length > 0 && selectedEnrollments.size === filteredEnrollments.length;

    const truncateText = (text, maxLength) => {
        if (text.length <= maxLength) {
            return text;
        }
        return text.substring(0, maxLength) + "...";
    };

    const ActionButtons = ({ enrollment }) => (
        <div className="flex items-center gap-1 sm:gap-2">
            <button
                className="bg-gray-500 text-white p-1 rounded-md hover:bg-gray-600 transition-colors duration-200"
                onClick={() => handleView(enrollment)}
                title="View"
            >
                <Eye size={16} className="w-4 h-4" />
            </button>
            <button
                className="bg-yellow-500 text-white p-1 rounded-md hover:bg-yellow-600 transition-colors duration-200"
                onClick={() => handleEdit(enrollment)}
                title="Edit"
            >
                <Edit size={16} className="w-4 h-4" />
            </button>
            <button
                className="bg-red-500 text-white p-1 rounded-md hover:bg-red-600 transition-colors duration-200"
                onClick={() => handleDelete(enrollment.id)}
                title="Delete"
            >
                <Trash2 size={16} className="w-4 h-4" />
            </button>
        </div>
    );

    return (
        <div className="min-h-screen bg-gray-100 p-4 sm:p-6 font-inter">
            <div className="container mx-auto bg-white rounded-lg shadow-md p-4 sm:p-6">
                <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-3">
                    <h2 className="text-2xl sm:text-3xl font-extrabold text-gray-800">Exam Enrollments</h2>
                    <div className="flex flex-wrap gap-2">
                        {selectedEnrollments.size > 0 && (
                            <button
                                className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md transition-colors duration-200 flex items-center gap-2 text-base font-semibold shadow-sm"
                                onClick={handleBulkDelete}
                            >
                                <Trash2 size={18} />
                                <span>Delete Selected ({selectedEnrollments.size})</span>
                            </button>
                        )}
                        <button
                            className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md transition-colors duration-200 flex items-center gap-2 text-base font-semibold shadow-sm"
                            onClick={() => setBulkModalOpen(true)}
                        >
                            <Plus size={18} />
                            <span>Bulk Enroll</span>
                        </button>
                        <button
                            className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition-colors duration-200 flex items-center gap-2 text-base font-semibold shadow-sm"
                            onClick={() => { setEditingEnrollment(null); setFormData(initialFormData); setModalOpen(true);}}
                        >
                            <Plus size={18} />
                            <span>Add Single</span>
                        </button>
                        <div className="relative" ref={exportButtonRef}>
                            <button
                                className="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-md transition-colors duration-200 flex items-center gap-2 text-base font-semibold shadow-sm"
                                onClick={() => setIsExportMenuOpen(!isExportMenuOpen)}
                            >
                                <Download size={18} />
                                <span>Export</span>
                            </button>
                            {isExportMenuOpen && (
                                <div className="absolute right-0 mt-2 w-32 bg-white rounded-md shadow-lg z-10 border border-gray-200">
                                    <button
                                        className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                                        onClick={() => handleExport('csv')}
                                    >
                                        Export to CSV
                                    </button>
                                    <button
                                        className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                                        onClick={() => handleExport('xls')}
                                    >
                                        Export to XLS
                                    </button>
                                </div>
                            )}
                        </div>
                    </div>
                </div>

                {error && (
                    <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-6" role="alert">
                        <strong className="font-bold">Error:</strong>
                        <span className="block sm:inline ml-2">{error}</span>
                    </div>
                )}

                <div className="mb-4 flex flex-col sm:flex-row items-start sm:items-center gap-3">
                    <label htmlFor="exam_filter" className="text-sm font-semibold text-gray-700 whitespace-nowrap">Filter by Exam:</label>
                    <select
                        id="exam_filter"
                        value={filterExamId}
                        onChange={(e) => setFilterExamId(e.target.value)}
                        className="mt-1 block w-full sm:w-auto px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-gray-800 bg-gray-50"
                    >
                        <option value="">All Exams</option>
                        {exams.map(exam => (
                            <option key={exam.$id} value={exam.$id}>
                                {exam.name} ({exam.exam_id})
                            </option>
                        ))}
                    </select>
                    {filterExamId && (
                        <button
                            onClick={() => setFilterExamId("")}
                            className="bg-gray-200 text-gray-700 px-3 py-1.5 rounded-md hover:bg-gray-300 transition-colors duration-200 flex items-center gap-1 text-sm shadow-sm"
                        >
                            <X size={16} />
                            Clear Filter
                        </button>
                    )}

                    <div className="relative flex-grow sm:ml-4 w-full sm:w-auto">
                        <label htmlFor="main_search" className="sr-only">Search Enrollments</label>
                        <input
                            type="text"
                            id="main_search"
                            placeholder="Search by student, exam, or ID..."
                            value={mainSearchTerm}
                            onChange={(e) => setMainSearchTerm(e.target.value)}
                            className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-gray-800 bg-gray-50 pl-10"
                        />
                        <Search size={20} className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 mt-0.5" />
                    </div>
                </div>

                {loading ? (
                    <div className="flex justify-center items-center h-64">
                        <p className="text-xl text-gray-600">Loading...</p>
                    </div>
                ) : (
                    <div className="overflow-x-auto rounded-lg shadow-sm border border-gray-200">
                        <table className="min-w-full divide-y divide-gray-200">
                            <thead className="bg-gray-50">
                                <tr>
                                    <th scope="col" className="px-6 py-3 text-left">
                                        <input 
                                            type="checkbox" 
                                            className="rounded text-blue-600 focus:ring-blue-500 h-4 w-4" 
                                            onChange={handleSelectAllEnrollments} 
                                            checked={allEnrollmentsSelected} 
                                            disabled={filteredEnrollments.length === 0}
                                        />
                                    </th>
                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Student</th>
                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider sm:table-cell">Exam</th>
                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider sm:table-cell">Exam Date</th>
                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Enrolled At</th>
                                    {/* Enrollment ID column header removed */}
                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                </tr>
                            </thead>
                            <tbody className="bg-white divide-y divide-gray-200">
                                {filteredEnrollments.length > 0 ? (
                                    filteredEnrollments.map((enrollment) => (
                                        <tr key={enrollment.id} className="hover:bg-gray-50 transition-colors duration-150">
                                            <td className="px-6 py-4 whitespace-nowrap">
                                                <input
                                                    type="checkbox"
                                                    className="rounded text-blue-600 focus:ring-blue-500 h-4 w-4"
                                                    checked={selectedEnrollments.has(enrollment.id)}
                                                    onChange={() => handleSelectEnrollment(enrollment.id)}
                                                />
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap">
                                                <div className="text-sm font-medium text-gray-900">{enrollment.student_name}</div>
                                                {/* Small screen details for exam name and date */}
                                                <div className="text-xs text-gray-500 sm:hidden" title={enrollment.exam_name}>
                                                    {truncateText(enrollment.exam_name, 20)} ({enrollment.exam_date}) {/* Slightly shorter for mobile view */}
                                                </div>
                                                <div className="text-xs text-gray-500 sm:hidden">Status: {enrollment.appearance_status_display}</div>
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600 sm:table-cell" title={enrollment.exam_name}>
                                                {truncateText(enrollment.exam_name, 25)}
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600 sm:table-cell">{enrollment.exam_date}</td>
                                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600">{enrollment.appearance_status_display}</td>
                                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600">{enrollment.enrolled_at}</td>
                                            {/* Enrollment ID column data removed */}
                                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600">
                                                <ActionButtons enrollment={enrollment} />
                                            </td>
                                        </tr>
                                    ))
                                ) : (
                                    <tr>
                                        {/* Adjusted colSpan */}
                                        <td colSpan="7" className="text-center py-10 text-gray-500 text-lg">No enrollments found for the selected filter.</td>
                                    </tr>
                                )}
                            </tbody>
                        </table>
                    </div>
                )}
                
                {modalOpen && (
                    <div className="fixed inset-0 bg-black bg-opacity-60 flex justify-center items-center z-50 p-4">
                        <div ref={modalRef} className="bg-white rounded-xl shadow-2xl p-6 w-full max-w-xl transform transition-all duration-300 scale-100 opacity-100">
                            <h3 className="text-2xl font-bold text-gray-800 mb-5">{editingEnrollment ? "Edit Enrollment" : "Add Enrollment"}</h3>
                            <form className="mx-auto space-y-4">
                                <div>
                                    <label htmlFor="student_id" className="block text-sm font-semibold text-gray-700 mb-1">Student</label>
                                    <select 
                                        id="student_id" 
                                        name="student_id"
                                        value={formData.student_id} 
                                        onChange={(e) => handleInputChange(e, "student_id")} 
                                        className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-gray-800 bg-gray-50" 
                                        required
                                    >
                                        <option value="">Select Student</option>
                                        {students.map((student) => (
                                            <option key={student.$id} value={student.$id}>
                                                {student.name} ({student.email})
                                            </option>
                                        ))}
                                    </select>
                                </div>
                                <div>
                                    <label htmlFor="exam_id" className="block text-sm font-semibold text-gray-700 mb-1">Exam</label>
                                    <select 
                                        id="exam_id" 
                                        name="exam_id"
                                        value={formData.exam_id} 
                                        onChange={(e) => handleInputChange(e, "exam_id")} 
                                        className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-gray-800 bg-gray-50" 
                                        required
                                    >
                                        <option value="">Select Exam</option>
                                        {exams.map((exam) => (
                                            <option key={exam.$id} value={exam.$id}>
                                                {exam.name}
                                            </option>
                                        ))}
                                    </select>
                                </div>
                                <div>
                                    <label htmlFor="enrolled_at" className="block text-sm font-semibold text-gray-700 mb-1">Enrollment Date</label>
                                    <input 
                                        type="datetime-local" 
                                        id="enrolled_at" 
                                        name="enrolled_at"
                                        value={formData.enrolled_at} 
                                        onChange={(e) => handleInputChange(e, "enrolled_at")} 
                                        className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-gray-800 bg-gray-50" 
                                        required 
                                    />
                                </div>
                                <div className="flex justify-end gap-3 mt-6">
                                    <button 
                                        type="button" 
                                        onClick={closeModal} 
                                        className="bg-gray-500 text-white px-5 py-2 rounded-lg hover:bg-gray-600 transition-colors duration-200 shadow-md"
                                    >
                                        Cancel
                                    </button>
                                    <button 
                                        type="button" 
                                        onClick={handleSave} 
                                        className="bg-blue-600 text-white px-5 py-2 rounded-lg hover:bg-blue-700 transition-colors duration-200 shadow-md"
                                    >
                                        {editingEnrollment ? "Update" : "Save"}
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                )}
                
                {viewModalOpen && viewingEnrollment && (
                    <div className="fixed inset-0 bg-black bg-opacity-60 flex justify-center items-center z-50 p-4">
                        <div ref={viewModalRef} className="bg-white rounded-xl shadow-2xl p-6 w-full max-w-xl transform transition-all duration-300 scale-100 opacity-100">
                            <h3 className="text-2xl font-bold text-gray-800 mb-5">Enrollment Details</h3>
                            <div className="space-y-4 text-gray-700">
                                <div>
                                    <h4 className="font-semibold text-gray-800">Student:</h4>
                                    <p className="ml-2">{viewingEnrollment.student_name} ({viewingEnrollment.student_email})</p>
                                </div>
                                <div>
                                    <h4 className="font-semibold text-gray-800">Exam:</h4>
                                    <p className="ml-2">{viewingEnrollment.exam_name}</p>
                                    {viewingEnrollment.exam_description && (
                                        <p className="text-sm text-gray-600 ml-2">{viewingEnrollment.exam_description}</p>
                                    )}
                                </div>
                                <div>
                                    <h4 className="font-semibold text-gray-800">Exam Date:</h4>
                                    <p className="ml-2">{viewingEnrollment.exam_date}</p>
                                </div>
                                <div>
                                    <h4 className="font-semibold text-gray-800">Appearance Status:</h4>
                                    <p className="ml-2">{viewingEnrollment.appearance_status_display}</p>
                                </div>
                                <div>
                                    <h4 className="font-semibold text-gray-800">Enrollment ID:</h4>
                                    <p className="ml-2">{viewingEnrollment.enrollment_id}</p>
                                </div>
                                <div>
                                    <h4 className="font-semibold text-gray-800">Enrolled At:</h4>
                                    <p className="ml-2">{viewingEnrollment.enrolled_at}</p>
                                </div>
                            </div>
                            <div className="flex justify-end mt-6">
                                <button 
                                    onClick={closeViewModal} 
                                    className="bg-gray-500 text-white px-5 py-2 rounded-lg hover:bg-gray-600 transition-colors duration-200 shadow-md"
                                >
                                    Close
                                </button>
                            </div>
                        </div>
                    </div>
                )}
                
                {bulkModalOpen && (
                    <div className="fixed inset-0 bg-black bg-opacity-60 flex justify-center items-center z-50 p-4">
                        <div ref={bulkModalRef} className="bg-white rounded-xl shadow-2xl p-6 w-full max-w-2xl h-[80vh] flex flex-col transform transition-all duration-300 scale-100 opacity-100">
                            <h3 className="text-2xl font-bold text-gray-800 mb-5">Bulk Enroll Students</h3>
                            <div className="mb-4">
                                <label htmlFor="bulk_exam_id" className="block text-sm font-semibold text-gray-700 mb-1">Select Exam</label>
                                <select 
                                    id="bulk_exam_id" 
                                    value={selectedExamForBulk} 
                                    onChange={(e) => setSelectedExamForBulk(e.target.value)} 
                                    className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 text-gray-800 bg-gray-50" 
                                    required
                                >
                                    <option value="">Select Exam to Enroll In</option>
                                    {exams.map(exam => (
                                        <option key={exam.$id} value={exam.$id}>
                                            {exam.name}
                                        </option>
                                    ))}
                                </select>
                            </div>
                            <div className="mb-4 relative">
                                <label htmlFor="student_search" className="block text-sm font-semibold text-gray-700 mb-1">Search Students</label>
                                <input
                                    type="text"
                                    id="student_search"
                                    placeholder="Search by name or email..."
                                    value={searchTerm}
                                    onChange={(e) => setSearchTerm(e.target.value)}
                                    className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-gray-800 bg-gray-50 pl-10"
                                />
                                <Search size={20} className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 mt-2" />
                            </div>
                            <div className="flex-1 overflow-y-auto border border-gray-200 rounded-lg p-3 mb-4 shadow-inner">
                                <table className="min-w-full divide-y divide-gray-200">
                                    <thead className="bg-gray-50 sticky top-0 z-10">
                                        <tr>
                                            <th className="px-4 py-3 text-left">
                                                <input 
                                                    type="checkbox" 
                                                    className="rounded text-blue-600 focus:ring-blue-500 h-4 w-4" 
                                                    onChange={() => handleSelectAllStudents(filteredStudentIds)} 
                                                    checked={allFilteredStudentsSelected} 
                                                    disabled={filteredStudents.length === 0}
                                                />
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                                        </tr>
                                    </thead>
                                    <tbody className="bg-white divide-y divide-gray-200">
                                        {filteredStudents.map((student) => (
                                            <tr key={student.$id} className="hover:bg-gray-50 transition-colors duration-150">
                                                <td className="px-4 py-3 whitespace-nowrap">
                                                    <input
                                                        type="checkbox"
                                                        className="rounded text-blue-600 focus:ring-blue-500 h-4 w-4"
                                                        checked={selectedStudents.has(student.$id)}
                                                        onChange={() => handleStudentSelect(student.$id)}
                                                    />
                                                </td>
                                                <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900">{student.name}</td>
                                                <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-600">{student.email}</td>
                                            </tr>
                                        ))}
                                        {filteredStudents.length === 0 && (
                                            <tr>
                                                <td colSpan="3" className="text-center py-6 text-gray-500 text-md">No students match your search.</td>
                                            </tr>
                                        )}
                                    </tbody>
                                </table>
                            </div>
                            <div className="flex justify-between items-center mt-auto pt-4">
                                <span className="text-sm text-gray-600 font-medium">{selectedStudents.size} student(s) selected</span>
                                <div className="flex gap-3">
                                    <button 
                                        type="button" 
                                        onClick={closeBulkModal} 
                                        className="bg-gray-500 text-white px-5 py-2 rounded-lg hover:bg-gray-600 transition-colors duration-200 shadow-md"
                                    >
                                        Cancel
                                    </button>
                                    <button 
                                        type="button" 
                                        onClick={handleBulkSave} 
                                        className="bg-green-600 text-white px-5 py-2 rounded-lg hover:bg-green-700 transition-colors duration-200 shadow-md" 
                                        disabled={!selectedExamForBulk || selectedStudents.size === 0 || loading}
                                    >
                                        {loading ? 'Enrolling...' : `Enroll Selected (${selectedStudents.size})`}
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                )}
                
                <ConfirmationDialog
                    isOpen={confirmDialogOpen}
                    title={dialogContent.title}
                    message={dialogContent.message}
                    onConfirm={dialogContent.onConfirm}
                    onCancel={dialogContent.onCancel}
                />
                
                <MessageDialog
                    isOpen={messageDialogOpen}
                    title={dialogContent.title}
                    message={dialogContent.message}
                    onClose={dialogContent.onClose || (() => setMessageDialogOpen(false))}
                />
            </div>
        </div>
    );
};

export default ExamEnrollment;
-e [1;34m===== ./pages/admin/notifications.jsx =====[0m
import React, { useState, useEffect } from "react";
import Table from "../../components/Table";
import Modal from "../../components/Modal";
import { databases } from "../../utils/appwrite";
import { ID } from "appwrite";

const NotificationsPage = () => {
  const [notifications, setNotifications] = useState([]);
  const [modalOpen, setModalOpen] = useState(false);
  const [editingNotification, setEditingNotification] = useState(null);
  const [message, setMessage] = useState("");
  const [scheduleDate, setScheduleDate] = useState("");
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchNotifications();
  }, []);

  const fetchNotifications = async () => {
    setLoading(true);
    try {
      const response = await databases.listDocuments(
        process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
        process.env.NEXT_PUBLIC_APPWRITE_NOTIFICATIONS_COLLECTION_ID
      );
      setNotifications(response.documents);
    } catch (error) {
      console.error("Error fetching notifications:", error.message);
    }
    setLoading(false);
  };

  const handleSave = async () => {
    if (!message.trim()) {
      alert("Notification message cannot be empty.");
      return;
    }

    try {
      if (editingNotification) {
        await databases.updateDocument(
          process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
          process.env.NEXT_PUBLIC_APPWRITE_NOTIFICATIONS_COLLECTION_ID,
          editingNotification.$id,
          { message, scheduleDate: scheduleDate || null }
        );
      } else {
        await databases.createDocument(
          process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
          process.env.NEXT_PUBLIC_APPWRITE_NOTIFICATIONS_COLLECTION_ID,
          ID.unique(),
          { message, scheduleDate: scheduleDate || null, status: "Scheduled" }
        );
      }

      setModalOpen(false);
      setEditingNotification(null);
      setMessage("");
      setScheduleDate("");
      fetchNotifications();
    } catch (error) {
      console.error("Error saving notification:", error.message);
    }
  };

  const handleEdit = (notification) => {
    setEditingNotification(notification);
    setMessage(notification.message);
    setScheduleDate(notification.scheduleDate || "");
    setModalOpen(true);
  };

  const handleDelete = async (id) => {
    if (!confirm("Are you sure you want to delete this notification?")) return;
    
    try {
      await databases.deleteDocument(
        process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
        process.env.NEXT_PUBLIC_APPWRITE_NOTIFICATIONS_COLLECTION_ID,
        id
      );
      fetchNotifications();
    } catch (error) {
      console.error("Error deleting notification:", error.message);
    }
  };

  return (
    <div className="p-6">
      <h2 className="text-2xl font-bold mb-4">üì¢ Manage Notifications</h2>

      <button className="bg-blue-500 text-white px-4 py-2 rounded mb-4" onClick={() => setModalOpen(true)}>
        ‚ûï Add Notification
      </button>

      {loading ? (
        <p>Loading notifications...</p>
      ) : (
        <Table
          data={notifications.map((n) => ({
            Message: n.message,
            "Scheduled Date": n.scheduleDate ? new Date(n.scheduleDate).toLocaleString() : "Immediate",
            Status: n.status,
            Actions: (
              <div className="flex gap-2">
                <button className="text-blue-500" onClick={() => handleEdit(n)}>‚úèÔ∏è Edit</button>
                <button className="text-red-500" onClick={() => handleDelete(n.$id)}>üóëÔ∏è Delete</button>
              </div>
            ),
          }))}
        />
      )}

      {modalOpen && (
        <Modal
          title={editingNotification ? "Edit Notification" : "Create Notification"}
          onClose={() => {
            setModalOpen(false);
            setEditingNotification(null);
            setMessage("");
            setScheduleDate("");
          }}
          onSave={handleSave}
        >
          <label className="block mb-1 font-semibold">Message</label>
          <textarea
            placeholder="Notification message..."
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            className="w-full px-4 py-2 border border-gray-300 rounded mb-4"
          />
          
          <label className="block mb-1 font-semibold">üìÖ Schedule Notification (Optional)</label>
          <input
            type="datetime-local"
            value={scheduleDate}
            onChange={(e) => setScheduleDate(e.target.value)}
            className="w-full px-4 py-2 border border-gray-300 rounded"
          />
        </Modal>
      )}
    </div>
  );
};

export default NotificationsPage;
-e [1;34m===== ./pages/admin/settings.jsx =====[0m
import React, { useState, useEffect } from "react";
import { account } from "../../utils/appwrite";
import { User, Lock } from "lucide-react";

const SettingsPage = () => {
  const [admin, setAdmin] = useState({ name: "", email: "" });
  const [password, setPassword] = useState({ oldPassword: "", newPassword: "", confirmPassword: "" });
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);

  useEffect(() => {
    fetchAdminDetails();
  }, []);

  useEffect(() => {
    if (error || success) {
      const timer = setTimeout(() => {
        setError(null);
        setSuccess(null);
      }, 5000);
      return () => clearTimeout(timer);
    }
  }, [error, success]);

  const fetchAdminDetails = async () => {
    try {
      const user = await account.get();
      setAdmin({ name: user.name, email: user.email });
    } catch (error) {
      setError("Failed to fetch admin details: " + error.message);
      console.error("Error fetching admin details:", error.message);
    }
  };

  const handleProfileUpdate = async () => {
    setError(null);
    setSuccess(null);
    if (!admin.name.trim()) {
      setError("Name cannot be empty.");
      return;
    }
    try {
      await account.updateName(admin.name.trim());
      setSuccess("Profile updated successfully!");
    } catch (error) {
      setError("Failed to update profile: " + error.message);
      console.error("Error updating profile:", error.message);
    }
  };

  const handlePasswordUpdate = async () => {
    setError(null);
    setSuccess(null);
    if (!password.oldPassword || !password.newPassword || !password.confirmPassword) {
      setError("All password fields are required.");
      return;
    }
    if (password.newPassword !== password.confirmPassword) {
      setError("New password and confirmation do not match.");
      return;
    }
    try {
      await account.updatePassword(password.newPassword, password.oldPassword);
      setSuccess("Password updated successfully!");
      setPassword({ oldPassword: "", newPassword: "", confirmPassword: "" });
    } catch (error) {
      setError("Failed to update password: " + error.message);
      console.error("Error updating password:", error.message);
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 p-4 sm:p-6 font-inter">
      <div className="container mx-auto max-w-2xl">
        <h2 className="text-2xl sm:text-3xl font-extrabold text-gray-800 mb-6">Settings</h2>

        {/* Error/Success Alerts */}
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-md mb-6" role="alert">
            <strong className="font-bold">Error:</strong>
            <span className="block sm:inline ml-2">{error}</span>
          </div>
        )}
        {success && (
          <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded-md mb-6" role="alert">
            <strong className="font-bold">Success:</strong>
            <span className="block sm:inline ml-2">{success}</span>
          </div>
        )}

        {/* Profile Settings */}
        <div className="bg-white shadow-md rounded-lg p-6 mb-6 border border-gray-200">
          <div className="flex items-center gap-2 mb-4">
            <User size={20} className="text-gray-600" />
            <h3 className="text-lg font-semibold text-gray-800">Profile Settings</h3>
          </div>
          <div className="space-y-4">
            <div>
              <label htmlFor="name" className="block text-sm font-semibold text-gray-700 mb-1">
                Name
              </label>
              <input
                type="text"
                id="name"
                value={admin.name}
                onChange={(e) => setAdmin({ ...admin, name: e.target.value })}
                placeholder="Enter your name"
                className="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-gray-50 text-gray-800"
              />
            </div>
            <div>
              <label htmlFor="email" className="block text-sm font-semibold text-gray-700 mb-1">
                Email
              </label>
              <input
                type="email"
                id="email"
                value={admin.email}
                disabled
                className="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm bg-gray-100 text-gray-500 cursor-not-allowed"
              />
            </div>
            <button
              onClick={handleProfileUpdate}
              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition-colors duration-200 text-base font-semibold shadow-sm"
            >
              Save Profile
            </button>
          </div>
        </div>

        {/* Change Password */}
        <div className="bg-white shadow-md rounded-lg p-6 border border-gray-200">
          <div className="flex items-center gap-2 mb-4">
            <Lock size={20} className="text-gray-600" />
            <h3 className="text-lg font-semibold text-gray-800">Change Password</h3>
          </div>
          <div className="space-y-4">
            <div>
              <label htmlFor="oldPassword" className="block text-sm font-semibold text-gray-700 mb-1">
                Old Password
              </label>
              <input
                type="password"
                id="oldPassword"
                placeholder="Enter old password"
                value={password.oldPassword}
                onChange={(e) => setPassword({ ...password, oldPassword: e.target.value })}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-gray-50 text-gray-800"
              />
            </div>
            <div>
              <label htmlFor="newPassword" className="block text-sm font-semibold text-gray-700 mb-1">
                New Password
              </label>
              <input
                type="password"
                id="newPassword"
                placeholder="Enter new password"
                value={password.newPassword}
                onChange={(e) => setPassword({ ...password, newPassword: e.target.value })}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-gray-50 text-gray-800"
              />
            </div>
            <div>
              <label htmlFor="confirmPassword" className="block text-sm font-semibold text-gray-700 mb-1">
                Confirm New Password
              </label>
              <input
                type="password"
                id="confirmPassword"
                placeholder="Confirm new password"
                value={password.confirmPassword}
                onChange={(e) => setPassword({ ...password, confirmPassword: e.target.value })}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-gray-50 text-gray-800"
              />
            </div>
            <button
              onClick={handlePasswordUpdate}
              className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md transition-colors duration-200 text-base font-semibold shadow-sm"
            >
              Update Password
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SettingsPage;-e [1;34m===== ./pages/admin/questions.jsx =====[0m
import React, { useState, useEffect, useRef, useCallback, useMemo } from "react";
import { databases, storage, ID } from "../../utils/appwrite";
import { Plus, Eye, Edit, Trash2, Search, X, Download } from "lucide-react";

const BUCKET_ID = "questions";

const QuestionsPage = () => {
  const [questions, setQuestions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [editingQuestion, setEditingQuestion] = useState(null);
  const [modalOpen, setModalOpen] = useState(false);
  const [viewModalOpen, setViewModalOpen] = useState(false);
  const [viewingQuestion, setViewingQuestion] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [filterDifficulty, setFilterDifficulty] = useState("");
  const [isExportMenuOpen, setIsExportMenuOpen] = useState(false);
  const modalRef = useRef(null);
  const viewModalRef = useRef(null);
  const exportButtonRef = useRef(null);

  const initialFormData = {
    question_id: "",
    text: "",
    image_id: "",
    options_text: ["", "", "", ""],
    options_image: ["", "", "", ""],
    correct_answer: 0,
    difficulty: "",
    tags: "",
    created_by: "",
  };

  const [formData, setFormData] = useState(initialFormData);

  const fetchQuestions = useCallback(async () => {
    setLoading(true);
    setError("");
    try {
      const response = await databases.listDocuments(
        process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
        process.env.NEXT_PUBLIC_APPWRITE_QUESTIONS_COLLECTION_ID
      );

      const updatedQuestions = await Promise.all(
        response.documents.map(async (q) => ({
          ...q,
          imageUrl: q.image_id ? await getFileUrl(q.image_id) : null,
          optionsImageUrls: await Promise.all(
            q.options_image.map(async (imgId) => 
              imgId ? await getFileUrl(imgId) : null
            )
          )
        }))
      );

      setQuestions(updatedQuestions);
    } catch (error) {
      console.error("Error fetching questions:", error.message);
      setError("Failed to load questions: " + error.message);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchQuestions();
  }, [fetchQuestions]);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (modalRef.current && !modalRef.current.contains(event.target)) {
        closeModal();
      }
      if (viewModalRef.current && !viewModalRef.current.contains(event.target)) {
        closeViewModal();
      }
      if (exportButtonRef.current && !exportButtonRef.current.contains(event.target)) {
        setIsExportMenuOpen(false);
      }
    };

    if (modalOpen || viewModalOpen || isExportMenuOpen) {
      document.addEventListener("mousedown", handleClickOutside);
    }
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [modalOpen, viewModalOpen, isExportMenuOpen]);

  const getFileUrl = async (fileId) => {
    try {
      return storage.getFileView(BUCKET_ID, fileId);
    } catch (error) {
      console.error("Error fetching image:", error.message);
      return null;
    }
  };

  const handleInputChange = (e, field, index = null) => {
    if (index !== null) {
      setFormData((prev) => ({
        ...prev,
        options_text: prev.options_text.map((opt, i) =>
          i === index ? e.target.value : opt
        )
      }));
    } else {
      setFormData({ ...prev, [field]: e.target.value });
    }
    if (error) setError("");
  };

  const handleImageUpload = async (file, field, index = null) => {
    if (!file) return;
    try {
      const uploadResponse = await storage.createFile(BUCKET_ID, ID.unique(), file);
      const fileId = uploadResponse.$id;

      setFormData(prev => ({
        ...prev,
        ...(field === "image_id" 
          ? { image_id: fileId }
          : {
              options_image: prev.options_image.map((img, i) => 
                i === index ? fileId : img
              )
            }
        )
      }));
    } catch (error) {
      console.error("Image upload error:", error.message);
      setError("Failed to upload image: " + error.message);
    }
  };

  const validateForm = () => {
    if (!formData.question_id || !formData.created_by) {
      setError("Please provide Question ID and Created By field.");
      return false;
    }
    if (!formData.text && !formData.image_id) {
      setError("Please provide either a question text or an image.");
      return false;
    }
    return true;
  };

  const handleSave = async () => {
    if (!validateForm()) return;

    try {
      const questionData = {
        question_id: formData.question_id,
        text: formData.text,
        image_id: formData.image_id,
        options_text: formData.options_text,
        options_image: formData.options_image,
        correct_answer: formData.correct_answer,
        difficulty: formData.difficulty,
        tags: formData.tags ? formData.tags.split(",").map(tag => tag.trim()) : [],
        created_by: formData.created_by,
      };

      if (editingQuestion) {
        await databases.updateDocument(
          process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
          process.env.NEXT_PUBLIC_APPWRITE_QUESTIONS_COLLECTION_ID,
          editingQuestion.$id,
          questionData
        );
      } else {
        await databases.createDocument(
          process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
          process.env.NEXT_PUBLIC_APPWRITE_QUESTIONS_COLLECTION_ID,
          ID.unique(),
          questionData
        );
      }

      closeModal();
      fetchQuestions();
    } catch (error) {
      console.error("Error saving question:", error.message);
      setError("Error saving question: " + error.message);
    }
  };

  const handleDelete = async (id) => {
    if (!window.confirm("Are you sure you want to delete this question?")) return;

    try {
      await databases.deleteDocument(
        process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
        process.env.NEXT_PUBLIC_APPWRITE_QUESTIONS_COLLECTION_ID,
        id
      );
      fetchQuestions();
    } catch (error) {
      console.error("Error deleting question:", error.message);
      setError("Failed to delete question: " + error.message);
    }
  };

  const handleExport = async (format) => {
    setIsExportMenuOpen(false);
    if (filteredQuestions.length === 0) {
      setError("No questions available to export.");
      return;
    }
    try {
      const exportData = filteredQuestions.map((q) => ({
        "Question ID": q.question_id,
        Text: q.text || "N/A",
        "Image ID": q.image_id || "N/A",
        "Option 1 Text": q.options_text[0] || "N/A",
        "Option 2 Text": q.options_text[1] || "N/A",
        "Option 3 Text": q.options_text[2] || "N/A",
        "Option 4 Text": q.options_text[3] || "N/A",
        "Option 1 Image": q.options_image[0] || "N/A",
        "Option 2 Image": q.options_image[1] || "N/A",
        "Option 3 Image": q.options_image[2] || "N/A",
        "Option 4 Image": q.options_image[3] || "N/A",
        "Correct Answer": q.correct_answer,
        Difficulty: q.difficulty || "N/A",
        Tags: q.tags?.join(", ") || "N/A",
        "Created By": q.created_by || "N/A",
      }));
      if (format === "csv") {
        const { Parser } = await import("json2csv");
        const fields = [
          "Question ID", "Text", "Image ID", 
          "Option 1 Text", "Option 2 Text", "Option 3 Text", "Option 4 Text",
          "Option 1 Image", "Option 2 Image", "Option 3 Image", "Option 4 Image",
          "Correct Answer", "Difficulty", "Tags", "Created By"
        ];
        const parser = new Parser({ fields });
        const csv = parser.parse(exportData);
        const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
        const url = URL.createObjectURL(blob);
        const link = document.createElement("a");
        link.setAttribute("href", url);
        link.setAttribute("download", `questions_${new Date().toISOString().slice(0, 10)}.csv`);
        link.click();
        URL.revokeObjectURL(url);
      } else if (format === "xls") {
        const { utils, writeFile } = await import("xlsx");
        const ws = utils.json_to_sheet(exportData);
        const wb = utils.book_new();
        utils.book_append_sheet(wb, ws, "Questions");
        writeFile(wb, `questions_${new Date().toISOString().slice(0, 10)}.xlsx`);
      }
    } catch (error) {
      console.error(`Error exporting to ${format.toUpperCase()}:`, error);
      setError(`Failed to export to ${format.toUpperCase()}: ${error.message}`);
    }
  };

  const handleEdit = (question) => {
    setEditingQuestion(question);
    setFormData({
      question_id: question.question_id,
      text: question.text || "",
      image_id: question.image_id || "",
      options_text: question.options_text || ["", "", "", ""],
      options_image: question.options_image || ["", "", "", ""],
      correct_answer: question.correct_answer || 0,
      difficulty: question.difficulty || "",
      tags: question.tags ? question.tags.join(", ") : "",
      created_by: question.created_by || "",
    });
    setModalOpen(true);
  };

  const handleView = (question) => {
    setViewingQuestion(question);
    setViewModalOpen(true);
  };

  const closeModal = () => {
    setModalOpen(false);
    setEditingQuestion(null);
    setFormData(initialFormData);
    setError("");
  };

  const closeViewModal = () => {
    setViewModalOpen(false);
    setViewingQuestion(null);
  };

  const filteredQuestions = useMemo(() => {
    return questions.filter(
      (q) =>
        (filterDifficulty === "" || q.difficulty.toLowerCase() === filterDifficulty.toLowerCase()) &&
        (q.question_id.toLowerCase().includes(searchTerm.toLowerCase()) ||
         q.text?.toLowerCase().includes(searchTerm.toLowerCase()))
    );
  }, [questions, searchTerm, filterDifficulty]);

  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };

  const ActionButtons = ({ question }) => (
    <div className="flex items-center gap-1 sm:gap-2">
      <button
        className="bg-gray-500 text-white p-1 rounded-md hover:bg-gray-600 transition-colors duration-200"
        onClick={() => handleView(question)}
        title="View"
        aria-label="View question"
      >
        <Eye size={16} className="w-4 h-4" />
      </button>
      <button
        className="bg-yellow-500 text-white p-1 rounded-md hover:bg-yellow-600 transition-colors duration-200"
        onClick={() => handleEdit(question)}
        title="Edit"
        aria-label="Edit question"
      >
        <Edit size={16} className="w-4 h-4" />
      </button>
      <button
        className="bg-red-500 text-white p-1 rounded-md hover:bg-red-600 transition-colors duration-200"
        onClick={() => handleDelete(question.$id)}
        title="Delete"
        aria-label="Delete question"
      >
        <Trash2 size={16} className="w-4 h-4" />
      </button>
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-100 p-4 sm:p-6 font-inter">
      <div className="container mx-auto bg-white rounded-lg shadow-md p-4 sm:p-6">
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-3">
          <h2 className="text-2xl sm:text-3xl font-extrabold text-gray-800">Exam Enrollments</h2>
          <div className="flex flex-wrap gap-2">
            <button
              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition-colors duration-200 flex items-center gap-2 text-base font-semibold shadow-sm"
              onClick={() => setModalOpen(true)}
            >
              <Plus size={18} />
              <span>Add Question</span>
            </button>
            <div className="relative" ref={exportButtonRef}>
              <button
                className="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-md transition-colors duration-200 flex items-center gap-2 text-base font-semibold shadow-sm"
                onClick={() => setIsExportMenuOpen(!isExportMenuOpen)}
              >
                <Download size={18} />
                <span>Export</span>
              </button>
              {isExportMenuOpen && (
                <div className="absolute right-0 mt-2 w-32 bg-white rounded-md shadow-lg z-10 border border-gray-200">
                  <button
                    className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                    onClick={() => handleExport("csv")}
                  >
                    Export to CSV
                  </button>
                  <button
                    className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                    onClick={() => handleExport("xls")}
                  >
                    Export to XLS
                  </button>
                </div>
              )}
            </div>
          </div>
        </div>

        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-6" role="alert">
            <strong className="font-bold">Error:</strong>
            <span className="block sm:inline ml-2">{error}</span>
          </div>
        )}

        <div className="mb-4 flex flex-col sm:flex-row items-start sm:items-center gap-3">
          <label htmlFor="difficulty_filter" className="text-sm font-semibold text-gray-700 whitespace-nowrap">Filter by Difficulty:</label>
          <select
            id="difficulty_filter"
            value={filterDifficulty}
            onChange={(e) => setFilterDifficulty(e.target.value)}
            className="mt-1 block w-full sm:w-auto px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-gray-800 bg-gray-50"
          >
            <option value="">All Difficulties</option>
            <option value="easy">Easy</option>
            <option value="medium">Medium</option>
            <option value="hard">Hard</option>
          </select>
          {filterDifficulty && (
            <button
              onClick={() => setFilterDifficulty("")}
              className="bg-gray-200 text-gray-700 px-3 py-1.5 rounded-md hover:bg-gray-300 transition-colors duration-200 flex items-center gap-1 text-sm shadow-sm"
            >
              <X size={16} />
              Clear Filter
            </button>
          )}
          <div className="relative flex-grow sm:ml-4 w-full sm:w-auto">
            <label htmlFor="main_search" className="sr-only">Search Questions</label>
            <input
              type="text"
              id="main_search"
              placeholder="Search by ID or text..."
              value={searchTerm}
              onChange={handleSearchChange}
              className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-gray-800 bg-gray-50 pl-10"
            />
            <Search size={20} className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 mt-0.5" />
          </div>
        </div>

        {loading ? (
          <div className="flex justify-center items-center h-64">
            <p className="text-xl text-gray-600">Loading...</p>
          </div>
        ) : filteredQuestions.length === 0 ? (
          <div className="text-center py-10">
            <p className="text-gray-500 text-lg">{searchTerm || filterDifficulty ? "No questions match your search or filter." : "No questions found."}</p>
            {!searchTerm && !filterDifficulty && <p className="text-gray-400">Get started by adding a new question.</p>}
          </div>
        ) : (
          <div className="overflow-x-auto rounded-lg shadow-sm border border-gray-200">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Text</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Image</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Difficulty</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredQuestions.map((q) => (
                  <tr key={q.$id} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{q.question_id}</td>
                    <td className="px-6 py-4 whitespace-normal text-sm text-gray-500 max-w-xs truncate">{q.text || "N/A"}</td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {q.imageUrl ? (
                        <img src={q.imageUrl} alt="Question" className="h-12 object-contain" />
                      ) : (
                        <span className="text-sm text-gray-400">No Image</span>
                      )}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{q.difficulty || "N/A"}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      <ActionButtons question={q} />
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}

        {modalOpen && (
          <div className="fixed inset-0 flex items-center justify-center bg-gray-900 bg-opacity-50 z-50">
            <div
              ref={modalRef}
              className="bg-white p-6 rounded-lg shadow-xl w-[1200px] max-h-[90vh] overflow-y-auto"
            >
              <h3 className="text-xl font-semibold mb-4">
                {editingQuestion ? "Edit Question" : "Add Question"}
              </h3>

              <div className="grid grid-cols-2 gap-4 mb-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Question ID</label>
                  <input
                    className="w-full border rounded px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
                    value={formData.question_id}
                    onChange={(e) => handleInputChange(e, "question_id")}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Created By</label>
                  <input
                    className="w-full border rounded px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
                    value={formData.created_by}
                    onChange={(e) => handleInputChange(e, "created_by")}
                  />
                </div>
              </div>

              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-1">Question Text</label>
                <textarea
                  className="w-full border rounded px-3 py-2 h-32 focus:ring-blue-500 focus:border-blue-500"
                  value={formData.text}
                  onChange={(e) => handleInputChange(e, "text")}
                />
              </div>

              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-1">Question Image</label>
                <input
                  type="file"
                  className="block w-full text-sm text-gray-500
                    file:mr-4 file:py-2 file:px-4
                    file:rounded-md file:border-0
                    file:text-sm file:font-semibold
                    file:bg-blue-50 file:text-blue-700
                    hover:file:bg-blue-100"
                  onChange={(e) => handleImageUpload(e.target.files[0], "image_id")}
                />
              </div>

              <div className="grid grid-cols-2 gap-4 mb-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Difficulty</label>
                  <input
                    className="w-full border rounded px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
                    placeholder="easy, medium, hard"
                    value={formData.difficulty}
                    onChange={(e) => handleInputChange(e, "difficulty")}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Tags</label>
                  <input
                    className="w-full border rounded px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
                    placeholder="comma separated"
                    value={formData.tags}
                    onChange={(e) => handleInputChange(e, "tags")}
                  />
                </div>
              </div>

              <h4 className="text-lg font-medium mb-3">Options:</h4>
              <div className="space-y-4">
                {formData.options_text.map((option, index) => (
                  <div key={index} className="flex items-start gap-4 p-3 border rounded-lg">
                    <div className="flex-1">
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Option {index + 1}
                      </label>
                      <textarea
                        className="w-full border rounded px-3 py-2 h-20 focus:ring-blue-500 focus:border-blue-500"
                        value={option}
                        onChange={(e) => handleInputChange(e, "options_text", index)}
                      />
                      <div className="mt-2">
                        <label className="inline-flex items-center">
                          <input
                            type="radio"
                            name="correct_answer"
                            className="h-4 w-4 text-blue-600 focus:ring-blue-500"
                            checked={formData.correct_answer === index}
                            onChange={() =>
                              setFormData({ ...formData, correct_answer: index })
                            }
                          />
                          <span className="ml-2 text-sm text-gray-700">Correct Answer</span>
                        </label>
                      </div>
                    </div>
                    <div className="w-48">
                      <label className="block text-sm font-medium text-gray-700 mb-1">Option Image</label>
                      <input
                        type="file"
                        className="block w-full text-sm text-gray-500
                          file:mr-2 file:py-1 file:px-2
                          file:rounded file:border-0
                          file:text-xs file:font-semibold
                          file:bg-blue-50 file:text-blue-700
                          hover:file:bg-blue-100"
                        onChange={(e) =>
                          handleImageUpload(e.target.files[0], "options_image", index)
                        }
                      />
                    </div>
                  </div>
                ))}
              </div>

              <div className="flex justify-end gap-3 mt-6">
                <button
                  className="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400 transition-colors"
                  onClick={closeModal}
                >
                  Cancel
                </button>
                <button
                  className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors"
                  onClick={handleSave}
                >
                  {editingQuestion ? "Update" : "Save"}
                </button>
              </div>
            </div>
          </div>
        )}

        {viewModalOpen && viewingQuestion && (
          <div className="fixed inset-0 flex items-center justify-center bg-gray-900 bg-opacity-50 z-50">
            <div
              ref={viewModalRef}
              className="bg-white p-8 rounded-lg shadow-xl w-[90%] max-w-6xl max-h-[90vh] overflow-y-auto"
            >
              <div className="flex justify-between items-start mb-6">
                <h3 className="text-2xl font-bold text-gray-800">Question Details</h3>
                <button
                  onClick={closeViewModal}
                  className="text-gray-500 hover:text-gray-700"
                  aria-label="Close"
                >
                  <X size={24} />
                </button>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                <div className="space-y-6">
                  <div>
                    <h4 className="text-sm font-medium text-gray-500">Question ID</h4>
                    <p className="mt-1 text-lg font-semibold">{viewingQuestion.question_id}</p>
                  </div>
                  
                  <div>
                    <h4 className="text-sm font-medium text-gray-500">Created By</h4>
                    <p className="mt-1 text-lg">{viewingQuestion.created_by || "N/A"}</p>
                  </div>
                  
                  <div>
                    <h4 className="text-sm font-medium text-gray-500">Difficulty</h4>
                    <p className="mt-1 text-lg capitalize">{viewingQuestion.difficulty || "N/A"}</p>
                  </div>
                  
                  <div>
                    <h4 className="text-sm font-medium text-gray-500">Tags</h4>
                    <div className="mt-1 flex flex-wrap gap-2">
                      {viewingQuestion.tags?.length ? (
                        viewingQuestion.tags.map((tag, i) => (
                          <span key={i} className="px-2 py-1 bg-blue-100 text-blue-800 text-sm rounded-full">
                            {tag}
                          </span>
                        ))
                      ) : (
                        <p className="text-gray-400">No tags</p>
                      )}
                    </div>
                  </div>
                </div>
                
                <div className="space-y-6">
                  <div>
                    <h4 className="text-sm font-medium text-gray-500">Question</h4>
                    {viewingQuestion.text && (
                      <p className="mt-1 text-lg bg-gray-50 p-3 rounded">{viewingQuestion.text}</p>
                    )}
                    {viewingQuestion.imageUrl && (
                      <div className="mt-3">
                        <img 
                          src={viewingQuestion.imageUrl} 
                          alt="Question" 
                          className="max-h-80 w-full object-contain border rounded-lg"
                        />
                      </div>
                    )}
                  </div>
                </div>
              </div>
              
              <div className="mt-8">
                <h4 className="text-lg font-medium text-gray-700 mb-4">Options</h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {viewingQuestion.options_text.map((option, index) => (
                    <div 
                      key={index} 
                      className={`p-4 rounded-lg border-2 ${viewingQuestion.correct_answer === index 
                        ? 'border-green-500 bg-green-50' 
                        : 'border-gray-200'}`}
                    >
                      <div className="flex items-start gap-4">
                        <div className="flex-1">
                          <div className="flex items-center justify-between">
                            <h5 className="font-medium">Option {index + 1}</h5>
                            {viewingQuestion.correct_answer === index && (
                              <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                Correct Answer
                              </span>
                            )}
                          </div>
                          <p className="mt-1 text-gray-700">{option || "N/A"}</p>
                        </div>
                        {viewingQuestion.optionsImageUrls[index] && (
                          <div className="flex-shrink-0 w-32 h-32">
                            <img 
                              src={viewingQuestion.optionsImageUrls[index]} 
                              alt={`Option ${index + 1}`} 
                              className="w-full h-full object-contain"
                            />
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              <div className="flex justify-end mt-8">
                <button
                  className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                  onClick={closeViewModal}
                >
                  Close
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default QuestionsPage;-e [1;34m===== ./pages/admin/index.jsx =====[0m
import React, { useEffect, useState, useCallback } from "react"; // Added useCallback
import { databases, account } from "../../utils/appwrite";
import { BarChart, Users, FileText, CheckCircle, ClipboardList, BookCopy } from "lucide-react"; // Added BookCopy
import Link from "next/link";

const Dashboard = () => {
  const [stats, setStats] = useState({
    students: 0,
    exams: 0,
    questions: 0,
    courses: 0, // Added courses
    attempts: "N/A",
    passPercentage: "N/A"
  });
const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [upcomingExams, setUpcomingExams] = useState([]);
  const [recentActivity, setRecentActivity] = useState([]);

  const DATABASE_ID = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID || '67a5a946002e8a51f8fe';
  const STUDENTS_COLLECTION_ID = process.env.NEXT_PUBLIC_APPWRITE_STUDENTS_COLLECTION_ID;
  const EXAMS_COLLECTION_ID = process.env.NEXT_PUBLIC_APPWRITE_EXAMS_COLLECTION_ID;
  const QUESTIONS_COLLECTION_ID = process.env.NEXT_PUBLIC_APPWRITE_QUESTIONS_COLLECTION_ID;
  const COURSES_COLLECTION_ID = process.env.NEXT_PUBLIC_APPWRITE_COURSE_COLLECTION_ID || 'course';


const fetchDashboardData = useCallback(async () => { // Wrapped in useCallback
    setLoading(true);
    setError(null);
try {
      const user = await account.get();
if (!user) {
        throw new Error("You must be logged in to view this dashboard");
}

      const [studentsData, examsData, questionsData, coursesData] = await Promise.all([ // Added coursesData
        databases.listDocuments(
          DATABASE_ID,
          STUDENTS_COLLECTION_ID
        ),
        databases.listDocuments(
          DATABASE_ID,
          EXAMS_COLLECTION_ID
        ),
        databases.listDocuments(
          DATABASE_ID,
          QUESTIONS_COLLECTION_ID
        ),
        databases.listDocuments( // Fetch courses
          DATABASE_ID,
          COURSES_COLLECTION_ID
        )
      ]);

const now = new Date();
const upcoming = examsData.documents
        .filter(exam => new Date(exam.exam_date) > now)
        .sort((a, b) => new Date(a.exam_date) - new Date(b.exam_date))
        .slice(0, 5);

const recentActivity = [
        { 
          message: `${studentsData.total} students registered`, 
          time: new Date().toLocaleString() 
        },
        { 
          message: `${examsData.total} exams created`, 
          time: new Date().toLocaleString() 
        },
        { 
          message: `${coursesData.total} courses available`, // Added courses activity
          time: new Date().toLocaleString() 
        },
        { 
          message: `${questionsData.total} questions available`, 
          time: new Date().toLocaleString() 
        }
      ];

setStats({
        students: studentsData.total,
        exams: examsData.total,
        questions: questionsData.total,
        courses: coursesData.total, // Set courses count
        attempts: "N/A",
        passPercentage: "N/A"
      });
setUpcomingExams(upcoming);
      setRecentActivity(recentActivity);
    } catch (error) {
      console.error("Error fetching dashboard data:", error);
setError(error.message || "Failed to load dashboard data. Please try again.");
    } finally {
      setLoading(false);
}
  }, [DATABASE_ID, STUDENTS_COLLECTION_ID, EXAMS_COLLECTION_ID, QUESTIONS_COLLECTION_ID, COURSES_COLLECTION_ID]); // Added dependencies

  useEffect(() => {
    fetchDashboardData();
  }, [fetchDashboardData]); // Added fetchDashboardData to dependency array


  if (loading) {
    return (
        <div className="flex justify-center items-center h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
    );
}

  if (error) {
    return (
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6">
          <p>{error}</p>
          <button 
            onClick={fetchDashboardData}
            className="mt-2 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
          >
          Retry
          </button>
        </div>
    );
}

  return (
    <> {/* Removed AdminLayout as it's handled by _app.js */}
      <h2 className="text-2xl font-bold mb-6">Admin Dashboard</h2>

      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-6 mb-6"> {/* Changed to md:grid-cols-4 */}
        <DashboardCard 
          icon={<Users size={28} />} 
          title="Total Students" 
          value={stats.students} 
link="/admin/students"
        />
        <DashboardCard 
          icon={<FileText size={28} />} 
          title="Total Exams" 
          value={stats.exams} 
          link="/admin/exams"
        />
         <DashboardCard 
          icon={<BookCopy size={28} />} 
          title="Total Courses" 
          value={stats.courses} 
          link="/admin/courses" // Link to new courses page
        />
        <DashboardCard 
          icon={<ClipboardList size={28} />} 
title="Total Questions" 
          value={stats.questions} 
          link="/admin/questions"
        />
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Upcoming Exams */}
        <div className="bg-white shadow-md rounded-lg p-6"> {/* Removed mb-6 */}
          <div className="flex justify-between items-center mb-4">
            <h3 className="text-lg font-semibold">üìÖ Upcoming Exams</h3>
            <Link href="/admin/exams" className="text-blue-600 hover:underline">
View All
            </Link>
          </div>
          {upcomingExams.length > 0 ?
(
            <div className="space-y-3">
              {upcomingExams.map((exam) => (
                <div key={exam.$id} className="border-b pb-3 last:border-b-0">
                  <div className="flex justify-between items-center">
                    <h4 className="font-medium">{exam.name}</h4>
                    <span className="text-sm text-gray-500">
{new Date(exam.exam_date).toLocaleDateString()}
                    </span>
                  </div>
                  <p className="text-sm text-gray-600 mt-1">
                    Duration: {exam.duration} minutes | Status: {exam.status}
</p>
                </div>
              ))}
            </div>
          ) : (
            <p className="text-gray-500">No upcoming exams scheduled.</p>
          )}
        </div>

        {/* Recent Activity - Now showing summary stats */}
        <div className="bg-white shadow-md rounded-lg p-6">
          <h3 className="text-lg font-semibold mb-4">üìä System Summary</h3>
          {recentActivity.map((log, index) => (
            <div key={index} className="flex items-start mb-3 last:mb-0">
              <div className="bg-blue-100 p-2 rounded-full mr-3">
                <svg className="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
<path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 5l7 7-7 7M5 5l7 7-7 7"></path>
                </svg>
              </div>
              <div>
                <p className="text-gray-700">{log.message}</p>
                <p className="text-sm text-gray-500">{log.time}</p>
              </div>
</div>
          ))}
        </div>
      </div>
    </>
  );
};

const DashboardCard = ({ icon, title, value, link }) => {
  const content = (
    <div className={`bg-white shadow-md rounded-lg p-4 flex items-center space-x-4 h-full ${link ? 'hover:shadow-lg transition-shadow' : ''}`}>
      <div className="text-blue-500">{icon}</div>
      <div>
        <h4 className="text-lg font-semibold">{title}</h4>
        <p className="text-gray-700">{value}</p>
      </div>
    </div>
  );
return link ? (
    <Link href={link} className="block h-full">
      {content}
    </Link>
  ) : (
    content
  );
};

export default Dashboard;-e [1;34m===== ./pages/admin/manage-notifications.jsx =====[0m
"use client";

import { useState } from "react";
import { Bell, Info, AlertCircle, CheckCircle, XCircle, Plus, Edit } from "lucide-react";
import { motion } from "framer-motion";
import { useRouter } from "next/router"; // Import useRouter from next/router

const initialNotifications = [
  { id: 1, type: "info", title: "New Exam Schedule", message: "Mathematics final exam has been scheduled for next week.", time: "2 hours ago" },
  { id: 2, type: "warning", title: "System Maintenance", message: "The system will be under maintenance on Sunday, 2 AM - 4 AM.", time: "1 day ago" },
  { id: 3, type: "success", title: "Results Published", message: "Physics mid-term exam results have been published.", time: "2 days ago" },
  { id: 4, type: "error", title: "Payment Failed", message: "Your exam registration payment was unsuccessful.", time: "3 days ago" },
];

const ManageNotifications = () => {
  const [notifications, setNotifications] = useState(initialNotifications);
  const [isEditing, setIsEditing] = useState(false);
  const [currentNotification, setCurrentNotification] = useState(null);

  const router = useRouter(); // Initialize router

  const icons = {
    info: <Info className="text-blue-500" size={20} />,
    warning: <AlertCircle className="text-amber-500" size={20} />,
    success: <CheckCircle className="text-emerald-500" size={20} />,
    error: <XCircle className="text-red-500" size={20} />,
  };

  const badgeColors = {
    info: "bg-blue-100 text-blue-600",
    warning: "bg-amber-100 text-amber-600",
    success: "bg-emerald-100 text-emerald-600",
    error: "bg-red-100 text-red-600",
  };

  const markAllAsRead = () => setNotifications([]);

  const removeNotification = (id) => setNotifications((prev) => prev.filter((n) => n.id !== id));

  const addNotification = () => {
    setIsEditing(true);
    setCurrentNotification({ id: notifications.length + 1, type: "info", title: "", message: "", time: "Just now" });
  };

  const editNotification = (notification) => {
    setIsEditing(true);
    setCurrentNotification(notification);
  };

  const saveNotification = () => {
    setNotifications((prev) =>
      currentNotification.id > prev.length
        ? [currentNotification, ...prev]
        : prev.map((n) => (n.id === currentNotification.id ? currentNotification : n))
    );
    setIsEditing(false);
    setCurrentNotification(null);
  };

  return (
    <div className="p-6">
      <motion.div
        className="flex justify-between items-center mb-6"
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.3 }}
      >
        <h1 className="text-2xl font-bold text-gray-800">Manage Notifications</h1>
        <div className="flex gap-4">
          <motion.button
            className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center gap-2"
            onClick={addNotification}
            whileHover={{ scale: 1.05 }}
          >
            <Plus size={20} />
            Add Notification
          </motion.button>
          <motion.button
            className="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 flex items-center gap-2"
            onClick={markAllAsRead}
            whileHover={{ scale: 1.05 }}
          >
            <Bell size={20} />
            Mark All as Read
          </motion.button>
        </div>
      </motion.div>

      {/* Notification List */}
      <div className="space-y-4">
        {notifications.map((notification) => (
          <motion.div
            key={notification.id}
            className="p-4 bg-white rounded-lg shadow-sm flex items-start gap-4"
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3 }}
          >
            <div className={`p-2 rounded-full ${badgeColors[notification.type]}`}>
              {icons[notification.type]}
            </div>
            <div className="flex-1">
              <h3 className="font-semibold text-gray-800">{notification.title}</h3>
              <p className="text-sm text-gray-600">{notification.message}</p>
              <p className="text-xs text-gray-400 mt-1">{notification.time}</p>
            </div>
            <button
              className="text-gray-500 hover:text-gray-700"
              onClick={() => editNotification(notification)}
            >
              <Edit size={16} />
            </button>
            <button
              className="text-gray-500 hover:text-red-500"
              onClick={() => removeNotification(notification.id)}
            >
              <XCircle size={16} />
            </button>
          </motion.div>
        ))}
      </div>

      {/* Edit Modal */}
      {isEditing && (
        <motion.div className="fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center p-4">
          <motion.div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-lg">
            <h2 className="text-xl font-bold mb-4">Edit Notification</h2>
            <div className="space-y-4">
              <input
                type="text"
                name="title"
                placeholder="Title"
                className="w-full p-2 border border-gray-300 rounded-md"
                value={currentNotification?.title}
                onChange={(e) => setCurrentNotification({ ...currentNotification, title: e.target.value })}
              />
              <textarea
                name="message"
                placeholder="Message"
                className="w-full p-2 border border-gray-300 rounded-md"
                value={currentNotification?.message}
                onChange={(e) => setCurrentNotification({ ...currentNotification, message: e.target.value })}
              />
              {/* Dropdown for notification type */}
              <div>
                <label className="block text-sm font-medium text-gray-700">Notification Type</label>
                <select
                  className="w-full p-2 border border-gray-300 rounded-md"
                  value={currentNotification?.type}
                  onChange={(e) => setCurrentNotification({ ...currentNotification, type: e.target.value })}
                >
                  <option value="info">Info</option>
                  <option value="warning">Warning</option>
                  <option value="success">Success</option>
                  <option value="error">Error</option>
                </select>
              </div>
              <div className="flex justify-end gap-3">
                <button
                  onClick={() => setIsEditing(false)}
                  className="bg-gray-500 text-white px-4 py-2 rounded-md"
                >
                  Cancel
                </button>
                <button
                  onClick={saveNotification}
                  className="bg-blue-600 text-white px-4 py-2 rounded-md"
                >
                  Save
                </button>
              </div>
            </div>
          </motion.div>
        </motion.div>
      )}
    </div>
  );
};

export default ManageNotifications;
-e [1;34m===== ./pages/admin/students.jsx =====[0m
import React, { useState, useCallback, useEffect, useMemo, useRef } from "react";
import { databases, account, ID, Query } from "../../utils/appwrite";
import { Plus, Edit, Trash2, Eye, Search, X, Download } from "lucide-react";
import Modal from "../../components/Modal";

const STUDENTS_PER_PAGE = 20;

const Students = () => {
  const [students, setStudents] = useState([]);
  const [courses, setCourses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [editingStudent, setEditingStudent] = useState(null);
  const [modalOpen, setModalOpen] = useState(false);
  const [viewModalOpen, setViewModalOpen] = useState(false);
  const [viewingStudent, setViewingStudent] = useState(null);
  const [user, setUser] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [filterCourseId, setFilterCourseId] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [selectedStudents, setSelectedStudents] = useState([]);
  const [isExportMenuOpen, setIsExportMenuOpen] = useState(false);

  const exportButtonRef = useRef(null);

  const DATABASE_ID = "67a5a946002e8a51f8fe";
  const STUDENTS_COLLECTION_ID = "students";
  const COURSES_COLLECTION_ID = "course";

  const initialFormData = {
    name: "",
    email: "",
    password: "",
    status: "active",
    course_id: "",
    student_id: "",
  };

  const [formData, setFormData] = useState(initialFormData);

  const resolveRelationshipId = (field) => {
    if (!field) return null;
    if (typeof field === "object" && field.$id) return field.$id;
    if (Array.isArray(field) && field.length > 0) {
      const id = field[0]?.$id || field[0];
      return id;
    }
    return field;
  };

  const getCourseName = async (courseId, retry = false) => {
    const resolvedId = resolveRelationshipId(courseId);
    if (!resolvedId) return "Not assigned";
    let course = courses.find((c) => c.$id === resolvedId);
    if (!course && !retry) {
      try {
        const coursesRes = await databases.listDocuments(DATABASE_ID, COURSES_COLLECTION_ID, [
          Query.equal("status", "active"),
          Query.limit(100),
        ]);
        setCourses(coursesRes.documents);
        course = coursesRes.documents.find((c) => c.$id === resolvedId);
        if (course) return course.course_name;
      } catch (error) {
        console.error("getCourseName: Error refetching courses", error);
      }
      return "Not assigned";
    }
    return course ? course.course_name : "Not assigned";
  };

  const fetchAllData = useCallback(async () => {
    setLoading(true);
    setError("");
    try {
      const [coursesRes, studentsRes, userRes] = await Promise.all([
        databases.listDocuments(DATABASE_ID, COURSES_COLLECTION_ID, [
          Query.equal("status", "active"),
          Query.orderDesc("$createdAt"),
          Query.limit(100),
        ]),
        databases.listDocuments(DATABASE_ID, STUDENTS_COLLECTION_ID, [
          Query.orderDesc("$createdAt"),
          Query.limit(100),
        ]),
        account.get(),
      ]);

      console.log("Fetched courses:", coursesRes.documents.map((c) => ({
        id: c.$id,
        name: c.course_name,
      })));
      setCourses(coursesRes.documents);
      setUser(userRes);

      const formattedStudents = await Promise.all(
        studentsRes.documents.map(async (student) => ({
          id: student.$id,
          name: student.name,
          email: student.email,
          password: student.password || "",
          student_id: student.student_id,
          status: student.status,
          course_id: resolveRelationshipId(student.course_id),
          course_name: await getCourseName(student.course_id),
          raw_course_id: student.course_id,
          registered_by: student.registered_by || userRes?.name || "Unknown",
          registered_date: student.registered_at
            ? new Date(student.registered_at).toLocaleDateString()
            : new Date(student.$createdAt).toLocaleDateString(),
        }))
      );

      console.log("Formatted students:", formattedStudents.map((s) => ({
        id: s.id,
        name: s.name,
        email: s.email,
        course_id: s.course_id,
        course_name: s.course_name,
        raw_course_id: s.raw_course_id,
      })));
      setStudents(formattedStudents);
    } catch (error) {
      console.error("Error fetching data:", error);
      setError("Failed to load data: " + error.message);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchAllData();
  }, [fetchAllData]);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (exportButtonRef.current && !exportButtonRef.current.contains(event.target)) {
        setIsExportMenuOpen(false);
      }
    };

    if (isExportMenuOpen) {
      document.addEventListener("mousedown", handleClickOutside);
    }
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [isExportMenuOpen]);

  const generateStudentId = (courseId) => {
    const year = new Date().getFullYear();
    const randomNum = Math.floor(100000000000 + Math.random() * 900000000000).toString().padStart(12, '0');
    if (!courseId) return `STUD-${year}-${randomNum}`;
    const course = courses.find((c) => c.$id === courseId);
    if (!course) return `STUD-${year}-${randomNum}`;
    const courseName = course.course_name.replace(/[^a-zA-Z0-9]/g, "");
    const coursePrefix = courseName.slice(0, 3).toUpperCase();
    return `${coursePrefix}-${year}-${randomNum}`;
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
      ...(name === "course_id" ? { student_id: generateStudentId(value) } : {}),
    }));
    if (error) setError("");
  };

  const validateForm = () => {
    if (!formData.name.trim()) {
      setError("Please provide a name");
      return false;
    }
    if (!formData.email.trim() || !/^\S+@\S+\.\S+$/.test(formData.email)) {
      setError("Please provide a valid email");
      return false;
    }
    if (!editingStudent && !formData.password) {
      setError("Password is required for new students");
      return false;
    }
    return true;
  };

  const handleSave = async () => {
    if (!validateForm()) return;
    setLoading(true);
    setError("");
    try {
      const studentData = {
        name: formData.name.trim(),
        email: formData.email.trim(),
        student_id: formData.student_id || generateStudentId(formData.course_id),
        status: formData.status,
        course_id: formData.course_id || null,
        registered_by: user?.$id || "Admin",
        registered_at: new Date().toISOString(),
      };
      if (formData.password) {
        studentData.password = formData.password;
      }
      if (editingStudent) {
        await databases.updateDocument(DATABASE_ID, STUDENTS_COLLECTION_ID, editingStudent.id, studentData);
      } else {
        await databases.createDocument(DATABASE_ID, STUDENTS_COLLECTION_ID, ID.unique(), studentData);
      }
      await fetchAllData();
      closeModal();
    } catch (error) {
      console.error("Error saving student:", error);
      setError(`Error saving student: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  const handleBulkDelete = async () => {
    if (!window.confirm(`Are you sure you want to delete ${selectedStudents.length} students?`)) return;
    setLoading(true);
    try {
      await Promise.all(
        selectedStudents.map((studentId) =>
          databases.deleteDocument(DATABASE_ID, STUDENTS_COLLECTION_ID, studentId)
        )
      );
      setSelectedStudents([]);
      await fetchAllData();
    } catch (error) {
      console.error("Bulk delete error:", error);
      setError("Failed to delete selected students");
    } finally {
      setLoading(false);
    }
  };

  const handleSelectStudent = (studentId) => {
    setSelectedStudents((prev) =>
      prev.includes(studentId)
        ? prev.filter((id) => id !== studentId)
        : [...prev, studentId]
    );
  };

  const handleSelectAll = (e) => {
    if (e.target.checked) {
      setSelectedStudents(displayedStudents.map((student) => student.id));
    } else {
      setSelectedStudents([]);
    }
  };

  const handleDelete = async (id) => {
    if (!window.confirm("Are you sure you want to delete this student?")) return;
    setLoading(true);
    setError("");
    try {
      await databases.deleteDocument(DATABASE_ID, STUDENTS_COLLECTION_ID, id);
      await fetchAllData();
      if (editingStudent && editingStudent.id === id) closeModal();
    } catch (error) {
      console.error("Error deleting student:", error);
      setError(`Error deleting student: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  const handleExport = async (format) => {
    setIsExportMenuOpen(false);
    if (filteredStudents.length === 0) {
      setError("No students available to export.");
      return;
    }
    try {
      const exportData = filteredStudents.map((student) => ({
        "Student ID": student.student_id,
        Name: student.name,
        Email: student.email,
        Course: student.course_name || "Not assigned",
        Status: student.status,
        Password: student.password || "",
        "Registered By": student.registered_by,
        "Registration Date": student.registered_date,
      }));
      if (format === "csv") {
        const { Parser } = await import("json2csv");
        const fields = ["Student ID", "Name", "Email", "Course", "Status", "Password", "Registered By", "Registration Date"];
        const parser = new Parser({ fields });
        const csv = parser.parse(exportData);
        const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
        const url = URL.createObjectURL(blob);
        const link = document.createElement("a");
        link.setAttribute("href", url);
        link.setAttribute("download", `students_${new Date().toISOString().slice(0, 10)}.csv`);
        link.click();
        URL.revokeObjectURL(url);
      } else if (format === "xls") {
        const { utils, writeFile } = await import("xlsx");
        const ws = utils.json_to_sheet(exportData);
        const wb = utils.book_new();
        utils.book_append_sheet(wb, ws, "Students");
        writeFile(wb, `students_${new Date().toISOString().slice(0, 10)}.xlsx`);
      }
    } catch (error) {
      console.error(`Error exporting to ${format.toUpperCase()}:`, error);
      setError(`Failed to export to ${format.toUpperCase()}: ${error.message}`);
    }
  };

  const openModal = (student = null) => {
    setError("");
    if (student) {
      setEditingStudent(student);
      setFormData({
        name: student.name,
        email: student.email,
        password: student.password || "",
        student_id: student.student_id,
        status: student.status,
        course_id: student.course_id || "",
      });
    } else {
      setEditingStudent(null);
      setFormData(initialFormData);
    }
    setModalOpen(true);
  };

  const closeModal = () => {
    setModalOpen(false);
    setEditingStudent(null);
    setFormData(initialFormData);
    setError("");
  };

  const openViewModal = (student) => {
    setViewingStudent(student);
    setViewModalOpen(true);
  };

  const closeViewModal = () => {
    setViewModalOpen(false);
    setViewingStudent(null);
  };

  const modalFields = [
    { name: "name", label: "Full Name*", type: "text", required: true, placeholder: "Enter full name" },
    { name: "email", label: "Email*", type: "email", required: true, placeholder: "Enter email" },
    {
      name: "password",
      label: `Password${editingStudent ? "" : "*"}`,
      type: "text",
      required: !editingStudent,
      placeholder: editingStudent ? "Leave blank to keep current" : "Enter password",
    },
    {
      name: "course_id",
      label: "Course",
      type: "select",
      options: courses.map((course) => ({ value: course.$id, label: course.course_name })),
      required: false,
      disabled: courses.length === 0,
    },
    { name: "student_id", label: "Student ID", type: "text", readOnly: true },
    {
      name: "status",
      label: "Status",
      type: "select",
      options: ["active", "inactive"],
      required: true,
    },
  ];

  const modalPosition = {
    top: "10vh",
    bottom: "10vh",
    left: "25vw",
    right: "15vw",
  };

  const filteredStudents = useMemo(() => {
    return students.filter(
      (student) =>
        (filterCourseId === "" || student.course_id === filterCourseId) &&
        (student.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
         student.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
         student.student_id.toLowerCase().includes(searchTerm.toLowerCase()))
    );
  }, [students, searchTerm, filterCourseId]);

  const totalPages = Math.ceil(filteredStudents.length / STUDENTS_PER_PAGE);
  const indexOfLastStudent = currentPage * STUDENTS_PER_PAGE;
  const indexOfFirstStudent = indexOfLastStudent - STUDENTS_PER_PAGE;
  const displayedStudents = useMemo(
    () => filteredStudents.slice(indexOfFirstStudent, indexOfLastStudent),
    [filteredStudents, indexOfFirstStudent, indexOfLastStudent]
  );

  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
    setCurrentPage(1);
    setSelectedStudents([]);
  };

  const paginate = (pageNumber) => {
    setCurrentPage(pageNumber);
    setSelectedStudents([]);
  };

  const allStudentsSelected = displayedStudents.length > 0 && selectedStudents.length === displayedStudents.length;

  const truncateCourseName = (name) => {
    if (!name || name === "Not assigned") return name;
    return name.length > 18 ? `${name.slice(0, 15)}...` : name;
  };

  const truncateStudentId = (id) => {
    if (!id) return id;
    return id.length > 15 ? `${id.slice(0, 12)}...` : id;
  };

  return (
    <div className="min-h-screen bg-gray-100 p-4 sm:p-6 font-inter">
      <div className="container mx-auto bg-white rounded-lg shadow-md p-4 sm:p-6">
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-3">
          <h2 className="text-2xl sm:text-3xl font-extrabold text-gray-800">Manage Students</h2>
          <div className="flex flex-wrap gap-2">
            {selectedStudents.length > 0 && (
              <button
                className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md transition-colors duration-200 flex items-center gap-2 text-base font-semibold shadow-sm"
                onClick={handleBulkDelete}
                disabled={loading}
              >
                <Trash2 size={18} />
                <span>Delete Selected ({selectedStudents.length})</span>
              </button>
            )}
            <button
              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition-colors duration-200 flex items-center gap-2 text-base font-semibold shadow-sm"
              onClick={() => {
                if (!user) {
                  setError("User data is still loading. Please wait before adding a student.");
                  return;
                }
                openModal();
              }}
              disabled={loading || !user}
            >
              <Plus size={18} />
              <span>Add Student</span>
            </button>
            <div className="relative" ref={exportButtonRef}>
              <button
                className="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-md transition-colors duration-200 flex items-center gap-2 text-base font-semibold shadow-sm"
                onClick={() => setIsExportMenuOpen(!isExportMenuOpen)}
              >
                <Download size={18} />
                <span>Export</span>
              </button>
              {isExportMenuOpen && (
                <div className="absolute right-0 mt-2 w-32 bg-white rounded-md shadow-lg z-10 border border-gray-200">
                  <button
                    className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                    onClick={() => handleExport("csv")}
                  >
                    Export to CSV
                  </button>
                  <button
                    className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                    onClick={() => handleExport("xls")}
                  >
                    Export to XLS
                  </button>
                </div>
              )}
            </div>
          </div>
        </div>

        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-6" role="alert">
            <strong className="font-bold">Error:</strong>
            <span className="block sm:inline ml-2">{error}</span>
          </div>
        )}

        <div className="mb-4 flex flex-col sm:flex-row items-start sm:items-center gap-3">
          <label htmlFor="course_filter" className="text-sm font-semibold text-gray-700 whitespace-nowrap">Filter by Course:</label>
          <select
            id="course_filter"
            value={filterCourseId}
            onChange={(e) => setFilterCourseId(e.target.value)}
            className="mt-1 block w-full sm:w-auto px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-gray-800 bg-gray-50"
          >
            <option value="">All Courses</option>
            {courses.map((course) => (
              <option key={course.$id} value={course.$id}>
                {course.course_name}
              </option>
            ))}
          </select>
          {filterCourseId && (
            <button
              onClick={() => setFilterCourseId("")}
              className="bg-gray-200 text-gray-700 px-3 py-1.5 rounded-md hover:bg-gray-300 transition-colors duration-200 flex items-center gap-1 text-sm shadow-sm"
            >
              <X size={16} />
              Clear Filter
            </button>
          )}
          <div className="relative flex-grow sm:ml-4 w-full sm:w-auto">
            <label htmlFor="main_search" className="sr-only">Search Students</label>
            <input
              type="text"
              id="main_search"
              placeholder="Search by name, email, or ID..."
              value={searchTerm}
              onChange={handleSearchChange}
              className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-gray-800 bg-gray-50 pl-10"
            />
            <Search size={20} className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 mt-0.5" />
          </div>
        </div>

        {loading ? (
          <div className="flex justify-center items-center h-64">
            <p className="text-xl text-gray-600">Loading...</p>
          </div>
        ) : (
          <>
            <div className="overflow-x-auto rounded-lg shadow-sm border border-gray-200">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left">
                      <input
                        type="checkbox"
                        className="rounded text-blue-600 focus:ring-blue-500 h-4 w-4"
                        onChange={handleSelectAll}
                        checked={allStudentsSelected}
                        disabled={displayedStudents.length === 0}
                      />
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Sr. No.</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider hidden sm:table-cell">Email</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Student ID</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Course</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider hidden md:table-cell">Status</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {displayedStudents.length > 0 ? (
                    displayedStudents.map((student, index) => (
                      <tr key={student.id} className={`hover:bg-gray-50 transition-colors duration-150 ${student.status === "inactive" ? "bg-gray-100 opacity-70" : ""}`}>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <input
                            type="checkbox"
                            className="rounded text-blue-600 focus:ring-blue-500 h-4 w-4"
                            checked={selectedStudents.includes(student.id)}
                            onChange={() => handleSelectStudent(student.id)}
                          />
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{indexOfFirstStudent + index + 1}</td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="text-sm font-medium text-gray-900">{student.name}</div>
                          <div className="text-xs text-gray-500 sm:hidden">{student.email}</div>
                          <div className="text-xs text-gray-500 sm:hidden">{truncateCourseName(student.course_name)}</div>
                          <div className="text-xs text-gray-500 sm:hidden">Status: {student.status}</div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600 hidden sm:table-cell">{student.email}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600">{truncateStudentId(student.student_id)}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600">{truncateCourseName(student.course_name)}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600 hidden md:table-cell">
                          <span
                            className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                              student.status === "active" ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800"
                            }`}
                          >
                            {student.status}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600">
                          <div className="flex items-center gap-1 sm:gap-2">
                            <button
                              className="bg-gray-500 text-white p-1 rounded-md hover:bg-gray-600 transition-colors duration-200"
                              onClick={() => openViewModal(student)}
                              title="View"
                            >
                              <Eye size={16} className="w-4 h-4" />
                            </button>
                            <button
                              className="bg-yellow-500 text-white p-1 rounded-md hover:bg-yellow-600 transition-colors duration-200"
                              onClick={() => openModal(student)}
                              title="Edit"
                            >
                              <Edit size={16} className="w-4 h-4" />
                            </button>
                            <button
                              className="bg-red-500 text-white p-1 rounded-md hover:bg-red-600 transition-colors duration-200"
                              onClick={() => handleDelete(student.id)}
                              title="Delete"
                            >
                              <Trash2 size={16} className="w-4 h-4" />
                            </button>
                          </div>
                        </td>
                      </tr>
                    ))
                  ) : (
                    <tr>
                      <td colSpan="8" className="text-center py-10 text-gray-500 text-lg">
                        {searchTerm || filterCourseId ? "No students match your search or filter." : "No students found."}
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
            {totalPages > 1 && (
              <div className="mt-6 flex justify-center items-center space-x-2">
                <button
                  onClick={() => paginate(currentPage - 1)}
                  disabled={currentPage === 1}
                  className="p-2 rounded-md bg-gray-200 hover:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <ChevronLeft size={20} />
                </button>
                {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (
                  <button
                    key={page}
                    onClick={() => paginate(page)}
                    className={`px-4 py-2 rounded-md text-sm ${
                      currentPage === page ? "bg-blue-600 text-white" : "bg-gray-200 hover:bg-gray-300"
                    }`}
                  >
                    {page}
                  </button>
                ))}
                <button
                  onClick={() => paginate(currentPage + 1)}
                  disabled={currentPage === totalPages}
                  className="p-2 rounded-md bg-gray-200 hover:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <ChevronRight size={20} />
                </button>
              </div>
            )}
          </>
        )}

        {modalOpen && (
          <Modal
            title={editingStudent ? "Edit Student" : "Add New Student"}
            onClose={closeModal}
            onSave={handleSave}
            initialData={formData}
            fields={modalFields}
            isLoading={loading}
            error={error}
            onChange={handleInputChange}
            customPosition={modalPosition}
          />
        )}

        {viewModalOpen && viewingStudent && (
          <div className="fixed inset-0 z-50 bg-gray-900 bg-opacity-75 transition-opacity flex items-center justify-center">
            <div
              className="bg-white rounded-lg shadow-xl p-6 overflow-y-auto"
              style={{ position: "fixed", top: modalPosition.top, left: modalPosition.left, right: modalPosition.right, bottom: modalPosition.bottom }}
            >
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-xl font-semibold text-gray-800">Student Details</h3>
                <button onClick={closeViewModal} className="text-gray-500 hover:text-gray-700" aria-label="Close modal">
                  <XCircle size={24} />
                </button>
              </div>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700">Name:</label>
                  <p className="mt-1 text-gray-900 bg-gray-50 p-2 rounded">{viewingStudent.name}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">Email:</label>
                  <p className="mt-1 text-gray-900 bg-gray-50 p-2 rounded">{viewingStudent.email}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">Student ID:</label>
                  <p className="mt-1 text-gray-900 bg-gray-50 p-2 rounded">{viewingStudent.student_id}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">Course:</label>
                  <p className="mt-1 text-gray-900 bg-gray-50 p-2 rounded">{viewingStudent.course_name}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">Status:</label>
                  <p className="mt-1 text-gray-900 bg-gray-50 p-2 rounded capitalize">{viewingStudent.status}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">Password:</label>
                  <p className="mt-1 text-gray-900 bg-gray-50 p-2 rounded">{viewingStudent.password || "N/A"}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">Registered By:</label>
                  <p className="mt-1 text-gray-900 bg-gray-50 p-2 rounded">{viewingStudent.registered_by}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">Registration Date:</label>
                  <p className="mt-1 text-gray-900 bg-gray-50 p-2 rounded">{viewingStudent.registered_date}</p>
                </div>
              </div>
              <div className="mt-6 flex justify-end">
                <button
                  onClick={closeViewModal}
                  className="bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2 rounded-lg transition-colors"
                >
                  Close
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

const XCircle = ({ size = 24, className = "" }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width={size}
    height={size}
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    strokeWidth="2"
    strokeLinecap="round"
    strokeLinejoin="round"
    className={className}
  >
    <circle cx="12" cy="12" r="10"></circle>
    <line x1="15" y1="9" x2="9" y2="15"></line>
    <line x1="9" y1="9" x2="15" y2="15"></line>
  </svg>
);

export default Students;-e [1;34m===== ./pages/admin/responses.jsx =====[0m
import React, { useEffect, useState } from "react";
import AdminLayout from "@/components/AdminLayout";
import { databases } from "@/utils/appwrite";
import { Query } from "appwrite";

const ResponsesPage = () => {
  const [responses, setResponses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const DATABASE_ID = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;
  const RESPONSES_COLLECTION_ID = process.env.NEXT_PUBLIC_APPWRITE_RESPONSES_COLLECTION_ID;

  useEffect(() => {
    fetchResponses();
  }, []);

  const fetchResponses = async () => {
    try {
      setLoading(true);
      const res = await databases.listDocuments(
        DATABASE_ID,
        RESPONSES_COLLECTION_ID,
        [Query.orderDesc("$createdAt")]
      );
      setResponses(res.documents);
    } catch (err) {
      console.error("Failed to fetch responses:", err);
      setError("You are not authorized to access responses or something went wrong.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <AdminLayout>
      <div className="p-6">
        <h1 className="text-2xl font-bold mb-6">üìÑ Student Responses</h1>

        {loading ? (
          <div className="flex justify-center items-center h-32">
            <div className="animate-spin h-8 w-8 border-4 border-blue-500 border-t-transparent rounded-full"></div>
          </div>
        ) : error ? (
          <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6">
            <p>{error}</p>
            <button
              onClick={fetchResponses}
              className="mt-2 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
            >
              Retry
            </button>
          </div>
        ) : responses.length === 0 ? (
          <p className="text-gray-500">No responses found.</p>
        ) : (
          <div className="overflow-x-auto bg-white shadow-md rounded-lg p-4">
            <table className="min-w-full text-sm text-left border border-gray-200">
              <thead className="bg-gray-100">
                <tr>
                  <th className="p-2 border">Response ID</th>
                  <th className="p-2 border">Student ID</th>
                  <th className="p-2 border">Exam ID</th>
                  <th className="p-2 border">Question ID</th>
                  <th className="p-2 border">Selected Option</th>
                  <th className="p-2 border">Created At</th>
                </tr>
              </thead>
              <tbody>
                {responses.map((res) => (
                  <tr key={res.$id} className="hover:bg-gray-50">
                    <td className="p-2 border">{res.response_id}</td>
                    <td className="p-2 border">{res.student_id || "N/A"}</td>
                    <td className="p-2 border">{res.exam_id || "N/A"}</td>
                    <td className="p-2 border">{res.question_id || "N/A"}</td>
                    <td className="p-2 border">{res.selected_option}</td>
                    <td className="p-2 border">{new Date(res.$createdAt).toLocaleString()}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>
    </AdminLayout>
  );
};

export default ResponsesPage;
-e [1;34m===== ./pages/admin/courses.jsx =====[0m
import React, { useState, useEffect, useCallback, useMemo, useRef } from "react";
import { Plus, Edit, Trash2, BookOpen, Eye, Search, ChevronLeft, ChevronRight, Download, X } from "lucide-react";
import { databases, ID, account, Query } from "../../utils/appwrite";
import Modal from "../../components/Modal";

const COURSES_PER_PAGE = 20;

const AdminCoursesPage = () => {
  const [courses, setCourses] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingCourse, setEditingCourse] = useState(null);
  const [currentUser, setCurrentUser] = useState(null);
  const [userNames, setUserNames] = useState({});
  const [isViewModalOpen, setIsViewModalOpen] = useState(false);
  const [viewingCourse, setViewingCourse] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [filterStatus, setFilterStatus] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [isExportMenuOpen, setIsExportMenuOpen] = useState(false);

  const exportButtonRef = useRef(null);

  const DATABASE_ID = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;
  const COURSES_COLLECTION_ID = process.env.NEXT_PUBLIC_APPWRITE_COURSE_COLLECTION_ID;
  const PROFILES_COLLECTION_ID = process.env.NEXT_PUBLIC_APPWRITE_PROFILES_COLLECTION_ID;

  const initialFormData = {
    course_name: "",
    course_description: "",
    credit: "",
    status: "active",
  };
  const [formData, setFormData] = useState(initialFormData);

  const courseModalPosition = {
    top: '10vh',
    bottom: '10vh',
    left: '25vw',
    right: '15vw'
  };

  const fetchCurrentUser = useCallback(async () => {
    try {
      const user = await account.get();
      setCurrentUser(user);
    } catch (err) {
      console.error("Failed to fetch current user:", err);
      setError("Could not fetch user details. Some operations might be affected.");
    }
  }, []);

  const fetchCourses = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    try {
      const response = await databases.listDocuments(
        DATABASE_ID,
        COURSES_COLLECTION_ID,
        [Query.orderDesc("$createdAt")]
      );
      let coursesData = response.documents;

      const activeCourses = coursesData.filter(course => course.status !== 'inactive');
      const inactiveCourses = coursesData.filter(course => course.status === 'inactive');
      const sortedCoursesData = [...activeCourses, ...inactiveCourses];
      
      setCourses(sortedCoursesData);

      const creatorIds = [...new Set(coursesData.map(course => course.created_by).filter(Boolean))];
      const newNamesToFetch = {};
      for (const id of creatorIds) {
        if (!userNames[id] && id) {
          if (PROFILES_COLLECTION_ID && PROFILES_COLLECTION_ID !== 'YOUR_PROFILES_COLLECTION_ID') {
            try {
              const profileResponse = await databases.listDocuments(
                DATABASE_ID, PROFILES_COLLECTION_ID, [Query.equal('userId', id), Query.limit(1)]
              );
              if (profileResponse.documents.length > 0) newNamesToFetch[id] = profileResponse.documents[0].name;
              else newNamesToFetch[id] = id === currentUser?.$id ? currentUser.name : id;
            } catch (profileError) {
              console.warn(`Could not fetch profile for user ${id}:`, profileError);
              newNamesToFetch[id] = id === currentUser?.$id ? currentUser.name : id;
            }
          } else {
            newNamesToFetch[id] = id === currentUser?.$id ? currentUser.name : id;
          }
        }
      }
      if (Object.keys(newNamesToFetch).length > 0) {
        setUserNames(prevNames => ({ ...prevNames, ...newNamesToFetch }));
      }
    } catch (err) {
      console.error("Error fetching courses:", err);
      setError("Failed to load courses. Please try again.");
    } finally {
      setIsLoading(false);
    }
  }, [DATABASE_ID, COURSES_COLLECTION_ID, userNames, currentUser, PROFILES_COLLECTION_ID]);

  useEffect(() => {
    fetchCurrentUser();
  }, [fetchCurrentUser]);

  useEffect(() => {
    if (PROFILES_COLLECTION_ID || currentUser) {
      fetchCourses();
    }
  }, [PROFILES_COLLECTION_ID, currentUser, fetchCourses]);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (exportButtonRef.current && !exportButtonRef.current.contains(event.target)) {
        setIsExportMenuOpen(false);
      }
    };

    if (isExportMenuOpen) {
      document.addEventListener("mousedown", handleClickOutside);
    }
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [isExportMenuOpen]);

  const handleInputChange = (e) => {
    const { name, value, type } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: type === "number" ? (value === "" ? "" : parseInt(value, 10)) : value,
    }));
    if (error) setError(null);
  };

  const validateForm = () => {
    const { course_name, course_description, credit, status } = formData;
    if (!course_name.trim()) { setError("Course Name is required."); return false; }
    if (course_name.trim().length < 3) { setError("Course Name must be at least 3 characters long."); return false; }
    if (course_name.length > 255) { setError("Course Name cannot exceed 255 characters."); return false; }
    if (course_description && course_description.length > 1000) { setError("Course Description cannot exceed 1000 characters."); return false; }
    if (credit !== "") {
      const creditValue = parseInt(credit, 10);
      if (isNaN(creditValue)) { setError("Credit must be a valid number."); return false; }
      if (creditValue < 0) { setError("Credit must be a non-negative number."); return false; }
      if (creditValue > 20) { setError("Credit value seems too high (max 20 recommended)."); return false; }
    }
    if (!status) { setError("Status is required."); return false;}
    setError(null);
    return true;
  };

  const openModal = (course = null) => {
    setError(null);
    if (course) {
      setEditingCourse(course);
      setFormData({
        course_name: course.course_name || "",
        course_description: course.course_description || "",
        credit: course.credit === null || course.credit === undefined ? "" : course.credit,
        status: course.status || "active",
      });
    } else {
      setEditingCourse(null);
      setFormData(initialFormData);
    }
    setIsModalOpen(true);
  };

  const closeModal = () => {
    setIsModalOpen(false);
    setEditingCourse(null);
    setFormData(initialFormData);
    setError(null);
  };

  const openViewModal = (course) => {
    setViewingCourse(course);
    setIsViewModalOpen(true);
  };

  const closeViewModal = () => {
    setIsViewModalOpen(false);
    setViewingCourse(null);
  };

  const handleSaveCourse = async (currentFormData) => {
    setError(null);
    if (!validateForm()) return;

    setIsLoading(true);
    const dataToSave = {
      course_name: currentFormData.course_name.trim(),
      course_description: currentFormData.course_description ? currentFormData.course_description.trim() : null,
      credit: currentFormData.credit === "" || currentFormData.credit === null || currentFormData.credit === undefined ? null : parseInt(currentFormData.credit, 10),
      status: currentFormData.status,
    };

    try {
      if (editingCourse) {
        await databases.updateDocument(DATABASE_ID, COURSES_COLLECTION_ID, editingCourse.$id, dataToSave);
      } else {
        if (!currentUser || !currentUser.$id) {
          console.error("Current user or user ID is not available.", currentUser);
          setError("User information is not available. Cannot set 'created_by'. Please try refreshing the page or logging in again.");
          setIsLoading(false); return;
        }
        dataToSave.created_by = currentUser.$id;
        await databases.createDocument(DATABASE_ID, COURSES_COLLECTION_ID, ID.unique(), dataToSave);
      }
      await fetchCourses();
      closeModal();
    } catch (err) {
      console.error("Error saving course:", err);
      if (err.code && err.message) setError(`Appwrite Error (${err.code}): ${err.message}. Please check console for details.`);
      else setError(`Failed to save course: ${err.message}`);
    } finally {
      setIsLoading(false);
    }
  };

  const handleDeleteCourse = async (courseId) => {
    if (!window.confirm("Are you sure you want to delete this course? This action cannot be undone.")) return;
    setIsLoading(true);
    setError(null);
    try {
      await databases.deleteDocument(DATABASE_ID, COURSES_COLLECTION_ID, courseId);
      await fetchCourses();
    } catch (err) {
      console.error("Error deleting course:", err);
      setError("Failed to delete course. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  const handleExport = async (format) => {
    setIsExportMenuOpen(false);
    if (filteredCourses.length === 0) {
      setError("No courses available to export.");
      return;
    }
    try {
      const exportData = filteredCourses.map((course) => ({
        "Course Name": course.course_name,
        Description: course.course_description || "N/A",
        Credits: course.credit === null || course.credit === undefined ? "N/A" : course.credit,
        Status: course.status || "active",
        "Created By": userNames[course.created_by] || course.created_by || "N/A",
        "Created At": new Date(course.$createdAt).toLocaleString(),
        "Last Updated": new Date(course.$updatedAt).toLocaleString(),
      }));
      if (format === "csv") {
        const { Parser } = await import("json2csv");
        const fields = ["Course Name", "Description", "Credits", "Status", "Created By", "Created At", "Last Updated"];
        const parser = new Parser({ fields });
        const csv = parser.parse(exportData);
        const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
        const url = URL.createObjectURL(blob);
        const link = document.createElement("a");
        link.setAttribute("href", url);
        link.setAttribute("download", `courses_${new Date().toISOString().slice(0, 10)}.csv`);
        link.click();
        URL.revokeObjectURL(url);
      } else if (format === "xls") {
        const { utils, writeFile } = await import("xlsx");
        const ws = utils.json_to_sheet(exportData);
        const wb = utils.book_new();
        utils.book_append_sheet(wb, ws, "Courses");
        writeFile(wb, `courses_${new Date().toISOString().slice(0, 10)}.xlsx`);
      }
    } catch (error) {
      console.error(`Error exporting to ${format.toUpperCase()}:`, error);
      setError(`Failed to export to ${format.toUpperCase()}: ${error.message}`);
    }
  };

  const courseModalFields = [
    { name: "course_name", label: "Course Name*", type: "text", required: true, placeholder: "e.g., Introduction to Programming", maxLength: 255 },
    { name: "course_description", label: "Description", type: "textarea", placeholder: "Enter a brief description of the course (max 1000 chars)", rows: 4, maxLength: 1000 },
    { name: "credit", label: "Credits", type: "number", placeholder: "e.g., 3 (0-20)", min: 0, max: 20 },
    { name: "status", label: "Status*", type: "select", options: ["active", "inactive"], required: true },
  ];

  const filteredCourses = useMemo(() => {
    return courses.filter(course =>
      (filterStatus === "" || course.status === filterStatus) &&
      course.course_name.toLowerCase().includes(searchTerm.toLowerCase())
    );
  }, [courses, searchTerm, filterStatus]);

  const totalPages = Math.ceil(filteredCourses.length / COURSES_PER_PAGE);
  const indexOfLastCourse = currentPage * COURSES_PER_PAGE;
  const indexOfFirstCourse = indexOfLastCourse - COURSES_PER_PAGE;
  
  const displayedCourses = useMemo(() => {
    return filteredCourses.slice(indexOfFirstCourse, indexOfLastCourse);
  }, [filteredCourses, indexOfFirstCourse, indexOfLastCourse]);

  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
    setCurrentPage(1);
  };

  const paginate = (pageNumber) => setCurrentPage(pageNumber);

  const truncateText = (text, maxLength) => {
    if (!text) return "";
    if (text.length <= maxLength) return text;
    return text.substring(0, maxLength) + "...";
  };

  return (
    <div className="min-h-screen bg-gray-100 p-4 sm:p-6 font-inter">
      <div className="container mx-auto bg-white rounded-lg shadow-md p-4 sm:p-6">
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-3">
          <h2 className="text-2xl sm:text-3xl font-extrabold text-gray-800">Manage Courses</h2>
          <div className="flex flex-wrap gap-2">
            <button
              onClick={() => {
                if (!currentUser) { setError("User data is still loading. Please wait a moment before adding a course."); return; }
                openModal();
              }}
              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition-colors duration-200 flex items-center gap-2 text-base font-semibold shadow-sm"
              disabled={!currentUser || isLoading}
            >
              <Plus size={18} /> Add Course
            </button>
            <div className="relative" ref={exportButtonRef}>
              <button
                className="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-md transition-colors duration-200 flex items-center gap-2 text-base font-semibold shadow-sm"
                onClick={() => setIsExportMenuOpen(!isExportMenuOpen)}
              >
                <Download size={18} />
                <span>Export</span>
              </button>
              {isExportMenuOpen && (
                <div className="absolute right-0 mt-2 w-32 bg-white rounded-md shadow-lg z-10 border border-gray-200">
                  <button
                    className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                    onClick={() => handleExport("csv")}
                  >
                    Export to CSV
                  </button>
                  <button
                    className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                    onClick={() => handleExport("xls")}
                  >
                    Export to XLS
                  </button>
                </div>
              )}
            </div>
          </div>
        </div>

        {error && !isModalOpen && !isViewModalOpen && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-6" role="alert">
            <strong className="font-bold">Error:</strong>
            <span className="block sm:inline ml-2">{error}</span>
          </div>
        )}

        <div className="mb-4 flex flex-col sm:flex-row items-start sm:items-center gap-3">
          <label htmlFor="status_filter" className="text-sm font-semibold text-gray-700 whitespace-nowrap">Filter by Status:</label>
          <select
            id="status_filter"
            value={filterStatus}
            onChange={(e) => setFilterStatus(e.target.value)}
            className="mt-1 block w-full sm:w-auto px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-gray-800 bg-gray-50"
          >
            <option value="">All Statuses</option>
            <option value="active">Active</option>
            <option value="inactive">Inactive</option>
          </select>
          {filterStatus && (
            <button
              onClick={() => setFilterStatus("")}
              className="bg-gray-200 text-gray-700 px-3 py-1.5 rounded-md hover:bg-gray-300 transition-colors duration-200 flex items-center gap-1 text-sm shadow-sm"
            >
              <X size={16} />
              Clear Filter
            </button>
          )}
          <div className="relative flex-grow sm:ml-4 w-full sm:w-auto">
            <label htmlFor="main_search" className="sr-only">Search Courses</label>
            <input
              type="text"
              id="main_search"
              placeholder="Search by course name..."
              value={searchTerm}
              onChange={handleSearchChange}
              className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-gray-800 bg-gray-50 pl-10"
            />
            <Search size={20} className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 mt-0.5" />
          </div>
        </div>

        {isLoading && !displayedCourses.length && !error ? (
          <div className="flex justify-center items-center h-64">
            <p className="text-xl text-gray-600">Loading...</p>
          </div>
        ) : !displayedCourses.length && !error ? (
          <div className="text-center py-10">
            <BookOpen size={48} className="mx-auto text-gray-400 mb-4" />
            <p className="text-gray-500 text-lg">{searchTerm || filterStatus ? "No courses match your search or filter." : "No courses found."}</p>
            {!searchTerm && !filterStatus && <p className="text-gray-400">Get started by adding a new course.</p>}
          </div>
        ) : displayedCourses.length > 0 && !error ? (
          <>
            <div className="overflow-x-auto rounded-lg shadow-sm border border-gray-200">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Sr. No.</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Course Name</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Credits</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Created By</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {displayedCourses.map((course, index) => (
                    <tr key={course.$id} className={`hover:bg-gray-50 transition-colors ${course.status === 'inactive' ? 'bg-gray-100 opacity-70' : ''}`}>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{indexOfFirstCourse + index + 1}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900" title={course.course_name}>
                        {truncateText(course.course_name, 18)}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 max-w-xs truncate">{course.course_description || "N/A"}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{course.credit === null || course.credit === undefined ? "N/A" : course.credit}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm">
                        <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${course.status === 'active' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                          {course.status || 'active'}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{userNames[course.created_by] || course.created_by || "N/A"}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <div className="flex items-center gap-1 sm:gap-2">
                          <button
                            onClick={() => openViewModal(course)}
                            className="bg-gray-500 text-white p-1 rounded-md hover:bg-gray-600 transition-colors duration-200"
                            title="View"
                          >
                            <Eye size={16} className="w-4 h-4" />
                          </button>
                          <button
                            onClick={() => openModal(course)}
                            className="bg-yellow-500 text-white p-1 rounded-md hover:bg-yellow-600 transition-colors duration-200"
                            title="Edit"
                          >
                            <Edit size={16} className="w-4 h-4" />
                          </button>
                          <button
                            onClick={() => handleDeleteCourse(course.$id)}
                            className="bg-red-500 text-white p-1 rounded-md hover:bg-red-600 transition-colors duration-200"
                            title="Delete"
                          >
                            <Trash2 size={16} className="w-4 h-4" />
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
            {totalPages > 1 && (
              <div className="mt-6 flex justify-center items-center space-x-2">
                <button
                  onClick={() => paginate(currentPage - 1)}
                  disabled={currentPage === 1}
                  className="p-2 rounded-md bg-gray-200 hover:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <ChevronLeft size={20} />
                </button>
                {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (
                  <button
                    key={page}
                    onClick={() => paginate(page)}
                    className={`px-4 py-2 rounded-md text-sm ${currentPage === page ? 'bg-blue-600 text-white' : 'bg-gray-200 hover:bg-gray-300'}`}
                  >
                    {page}
                  </button>
                ))}
                <button
                  onClick={() => paginate(currentPage + 1)}
                  disabled={currentPage === totalPages}
                  className="p-2 rounded-md bg-gray-200 hover:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <ChevronRight size={20} />
                </button>
              </div>
            )}
          </>
        ) : null }

        {isModalOpen && (
          <Modal
            title={editingCourse ? "Edit Course" : "Add New Course"}
            onClose={closeModal}
            onSave={() => handleSaveCourse(formData)}
            initialData={formData}
            fields={courseModalFields}
            isLoading={isLoading}
            error={error}
            onChange={handleInputChange}
            customPosition={courseModalPosition}
          />
        )}

        {isViewModalOpen && viewingCourse && (
          <div className="fixed inset-0 z-50 bg-gray-900 bg-opacity-75 transition-opacity flex items-center justify-center">
            <div 
              className="bg-white rounded-lg shadow-xl p-6 overflow-y-auto"
              style={{ position: 'fixed', top: courseModalPosition.top, left: courseModalPosition.left, right: courseModalPosition.right, bottom: courseModalPosition.bottom }}
            >
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-xl font-semibold text-gray-800">Course Details</h3>
                <button onClick={closeViewModal} className="text-gray-500 hover:text-gray-700" aria-label="Close modal"><XCircle size={24} /></button>
              </div>
              <div className="space-y-4">
                <div><label className="block text-sm font-medium text-gray-700">Course Name:</label><p className="mt-1 text-gray-900 bg-gray-50 p-2 rounded">{viewingCourse.course_name}</p></div>
                <div><label className="block text-sm font-medium text-gray-700">Description:</label><p className="mt-1 text-gray-900 bg-gray-50 p-2 rounded whitespace-pre-wrap">{viewingCourse.course_description || "N/A"}</p></div>
                <div><label className="block text-sm font-medium text-gray-700">Credits:</label><p className="mt-1 text-gray-900 bg-gray-50 p-2 rounded">{viewingCourse.credit === null || viewingCourse.credit === undefined ? "N/A" : viewingCourse.credit}</p></div>
                <div><label className="block text-sm font-medium text-gray-700">Status:</label><p className="mt-1 text-gray-900 bg-gray-50 p-2 rounded capitalize">{viewingCourse.status || "active"}</p></div>
                <div><label className="block text-sm font-medium text-gray-700">Created By:</label><p className="mt-1 text-gray-900 bg-gray-50 p-2 rounded">{userNames[viewingCourse.created_by] || viewingCourse.created_by || "N/A"}</p></div>
                <div><label className="block text-sm font-medium text-gray-700">Created At:</label><p className="mt-1 text-gray-900 bg-gray-50 p-2 rounded">{new Date(viewingCourse.$createdAt).toLocaleString()}</p></div>
                <div><label className="block text-sm font-medium text-gray-700">Last Updated:</label><p className="mt-1 text-gray-900 bg-gray-50 p-2 rounded">{new Date(viewingCourse.$updatedAt).toLocaleString()}</p></div>
              </div>
              <div className="mt-6 flex justify-end">
                <button onClick={closeViewModal} className="bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2 rounded-lg transition-colors">Close</button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

const XCircle = ({ size = 24, className = "" }) => (
  <svg xmlns="http://www.w3.org/2000/svg" width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
    <circle cx="12" cy="12" r="10"></circle><line x1="15" y1="9" x2="9" y2="15"></line><line x1="9" y1="9" x2="15" y2="15"></line>
  </svg>
);

export default AdminCoursesPage;-e [1;34m===== ./pages/admin/results.jsx =====[0m
import React, { useState, useEffect, useRef } from 'react';
import { databases, storage, Query } from '../../utils/appwrite';
import { Eye, Search, Download, RefreshCw, X } from 'lucide-react';

const BUCKET_ID = 'questions';

const ResultsAnalysisPage = () => {
  const [results, setResults] = useState([]);
  const [students, setStudents] = useState([]);
  const [exams, setExams] = useState([]);
  const [responses, setResponses] = useState([]);
  const [questions, setQuestions] = useState([]);
  const [examQuestions, setExamQuestions] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('All');
  const [examFilter, setExamFilter] = useState('All');
  const [viewModalOpen, setViewModalOpen] = useState(false);
  const [viewingResult, setViewingResult] = useState(null);
  const [isExportMenuOpen, setIsExportMenuOpen] = useState(false);

  const exportButtonRef = useRef(null);

  const databaseId = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;
  const studentsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_STUDENTS_COLLECTION_ID;
  const examsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_EXAMS_COLLECTION_ID;
  const examQuestionsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_EXAM_QUESTIONS_COLLECTION_ID;
  const questionsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_QUESTIONS_COLLECTION_ID;
  const responsesCollectionId = process.env.NEXT_PUBLIC_APPWRITE_RESPONSES_COLLECTION_ID;
  const resultsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_RESULTS_COLLECTION_ID;

  const resolveRelationshipId = (field) => {
    if (!field) return null;
    if (typeof field === 'object' && field?.$id) return field.$id;
    if (Array.isArray(field) && field.length > 0) return field[0]?.$id || field[0];
    if (typeof field === 'string') return field;
    console.warn('Unexpected relationship field format:', field);
    return null;
  };

  const getFileUrl = async (fileId) => {
    try {
      return storage.getFileView(BUCKET_ID, fileId);
    } catch (error) {
      console.error('Error fetching image:', error.message);
      return null;
    }
  };

  const getQuestionMarks = (questionId) => {
    const mapping = examQuestions.find(eq => {
      const qRef = eq.question_id;
      const refId = resolveRelationshipId(qRef);
      return refId === questionId;
    });
    return mapping?.marks || 0;
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
      });
    } catch (err) {
      console.error('Error formatting date:', dateString, err);
      return 'Invalid Date';
    }
  };

  const formatDuration = (minutes) => {
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    return hours > 0 ? `${hours}h ${mins}m` : `${mins}m`;
  };

  const fetchAllData = async () => {
    setLoading(true);
    setError(null);
    try {
      const [resultsResponse, studentsResponse, examsResponse] = await Promise.all([
        databases.listDocuments(databaseId, resultsCollectionId),
        databases.listDocuments(databaseId, studentsCollectionId),
        databases.listDocuments(databaseId, examsCollectionId)
      ]);

      const studentMap = new Map();
      studentsResponse.documents.forEach(student => {
        studentMap.set(student.$id, student);
        if (student.student_id) {
          studentMap.set(student.student_id, student);
        }
      });

      const examMap = new Map();
      examsResponse.documents.forEach(exam => {
        examMap.set(exam.$id, exam);
        if (exam.exam_id) {
          examMap.set(exam.exam_id, exam);
        }
      });

      const normalizedResults = resultsResponse.documents.map(result => {
        const student = studentMap.get(result.student_id) || 
                       studentMap.get(result.student_id?.$id);
        const exam = examMap.get(result.exam_id) || 
                    examMap.get(result.exam_id?.$id);

        return {
          ...result,
          studentName: student ? student.name : 'Unknown Student',
          studentEmail: student ? student.email : '',
          studentId: student?.$id || result.student_id,
          examName: exam ? exam.name : 'Unknown Exam',
          examId: exam?.$id || result.exam_id,
          examDescription: exam?.description || 'No description available',
          percentage: result.percentage || (result.score / result.total_marks * 100),
          status: result.status || (result.percentage >= 30 ? 'passed' : 'failed'),
          createdDate: result.$createdAt ? new Date(result.$createdAt).toLocaleDateString() : 'N/A'
        };
      });

      setResults(normalizedResults);
      setStudents(studentsResponse.documents);
      setExams(examsResponse.documents);
    } catch (err) {
      setError(err.message || 'Failed to fetch data.');
      console.error('Fetch error:', err);
    } finally {
      setLoading(false);
    }
  };

  const fetchResponseData = async (result) => {
    try {
      setLoading(true);
      setError(null);

      const examQuestionsResponse = await databases.listDocuments(
        databaseId,
        examQuestionsCollectionId,
        [Query.orderAsc('order')]
      );

      const filteredExamQuestions = examQuestionsResponse.documents.filter(doc => {
        const examRef = doc.exam_id;
        const refId = resolveRelationshipId(examRef);
        return refId === result.examId;
      });

      setExamQuestions(filteredExamQuestions);

      const responsesResponse = await databases.listDocuments(
        databaseId,
        responsesCollectionId,
        [
          Query.equal('student_id', result.studentId),
          Query.equal('exam_id', result.examId),
        ]
      );

      setResponses(responsesResponse.documents);

      const questionIds = responsesResponse.documents
        .map((res) => resolveRelationshipId(res.question_id))
        .filter((id) => id);

      if (questionIds.length > 0) {
        const questionsResponse = await databases.listDocuments(
          databaseId,
          questionsCollectionId,
          [Query.contains('$id', questionIds), Query.limit(100)]
        );

        const updatedQuestions = await Promise.all(
          questionsResponse.documents.map(async (q) => ({
            ...q,
            imageUrl: q.image_id ? await getFileUrl(q.image_id) : null,
            optionsImageUrls: await Promise.all(
              (q.options_image || []).map(async (imgId) => (imgId ? await getFileUrl(imgId) : null))
            ),
          }))
        );

        setQuestions(updatedQuestions);
      }
    } catch (err) {
      setError(err.message || 'Failed to load response details.');
      console.error('Error fetching response data:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleExport = async (format) => {
    setIsExportMenuOpen(false);
    if (filteredResults.length === 0) {
      setError("No results available to export.");
      return;
    }
    try {
      const exportData = filteredResults.map(result => ({
        "Student Name": result.studentName,
        "Student Email": result.studentEmail || "N/A",
        "Exam Name": result.examName,
        "Score": `${result.score}/${result.total_marks}`,
        "Percentage": `${result.percentage.toFixed(1)}%`,
        "Status": result.status,
        "Date": result.createdDate,
      }));

      if (format === "csv") {
        const { Parser } = await import("json2csv");
        const fields = ["Student Name", "Student Email", "Exam Name", "Score", "Percentage", "Status", "Date"];
        const parser = new Parser({ fields });
        const csv = parser.parse(exportData);
        const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
        const url = URL.createObjectURL(blob);
        const link = document.createElement("a");
        link.setAttribute("href", url);
        link.setAttribute("download", `results_${new Date().toISOString().slice(0, 10)}.csv`);
        link.click();
        URL.revokeObjectURL(url);
      } else if (format === "xls") {
        const { utils, writeFile } = await import("xlsx");
        const ws = utils.json_to_sheet(exportData);
        const wb = utils.book_new();
        utils.book_append_sheet(wb, ws, "Results");
        writeFile(wb, `results_${new Date().toISOString().slice(0, 10)}.xlsx`);
      }
    } catch (error) {
      console.error(`Error exporting to ${format.toUpperCase()}:`, error);
      setError(`Failed to export to ${format.toUpperCase()}: ${error.message}`);
    }
  };

  const handleView = (result) => {
    setViewingResult(result);
    setViewModalOpen(true);
    fetchResponseData(result);
  };

  const closeViewModal = () => {
    setViewModalOpen(false);
    setViewingResult(null);
    setResponses([]);
    setQuestions([]);
    setExamQuestions([]);
  };

  const filteredResults = results.filter(result => {
    const matchesSearch = 
      result.studentName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      result.examName.toLowerCase().includes(searchTerm.toLowerCase());

    const matchesStatus = 
      statusFilter === 'All' ||
      (statusFilter === 'Pass' && result.status === 'passed') ||
      (statusFilter === 'Fail' && result.status === 'failed');

    const matchesExam = 
      examFilter === 'All' ||
      result.examId === examFilter;

    return matchesSearch && matchesStatus && matchesExam;
  });

  useEffect(() => {
    fetchAllData();
  }, []);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (exportButtonRef.current && !exportButtonRef.current.contains(event.target)) {
        setIsExportMenuOpen(false);
      }
    };

    if (isExportMenuOpen) {
      document.addEventListener("mousedown", handleClickOutside);
    }
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [isExportMenuOpen]);

  const ActionButtons = ({ result }) => (
    <div className="flex items-center gap-1 sm:gap-2">
      <button
        className="bg-gray-500 text-white p-1 rounded-md hover:bg-gray-600 transition-colors duration-200"
        onClick={() => handleView(result)}
        title="View"
        aria-label="View result"
      >
        <Eye size={16} className="w-4 h-4" />
      </button>
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-100 p-4 sm:p-6 font-inter">
      <div className="container mx-auto bg-white rounded-lg shadow-md p-4 sm:p-6">
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-3">
          <h2 className="text-2xl sm:text-3xl font-extrabold text-gray-800">Exam Enrollments</h2>
          <div className="flex flex-wrap gap-2">
            <button
              onClick={fetchAllData}
              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition-colors duration-200 flex items-center gap-2 text-base font-semibold shadow-sm"
              disabled={loading}
            >
              <RefreshCw size={18} /> Refresh
            </button>
            <div className="relative" ref={exportButtonRef}>
              <button
                className="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-md transition-colors duration-200 flex items-center gap-2 text-base font-semibold shadow-sm"
                onClick={() => setIsExportMenuOpen(!isExportMenuOpen)}
              >
                <Download size={18} />
                <span>Export</span>
              </button>
              {isExportMenuOpen && (
                <div className="absolute right-0 mt-2 w-32 bg-white rounded-md shadow-lg z-50 border border-gray-200">
                  <button
                    className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                    onClick={() => handleExport("csv")}
                  >
                    Export to CSV
                  </button>
                  <button
                    className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                    onClick={() => handleExport("xls")}
                  >
                    Export to XLS
                  </button>
                </div>
              )}
            </div>
          </div>
        </div>

        {error && !viewModalOpen && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-6" role="alert">
            <strong className="font-bold">Error:</strong>
            <span className="block sm:inline ml-2">{error}</span>
          </div>
        )}

        <div className="mb-4 flex flex-col sm:flex-row items-start sm:items-center gap-3">
          <div className="relative flex-grow sm:ml-0 w-full sm:w-auto">
            <label htmlFor="main_search" className="sr-only">Search Results</label>
            <input
              type="text"
              id="main_search"
              placeholder="Search by student or exam..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-gray-800 bg-gray-50 pl-10"
            />
            <Search size={20} className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 mt-0.5" />
          </div>
          <label htmlFor="exam_filter" className="text-sm font-semibold text-gray-700 whitespace-nowrap">Filter by Exam:</label>
          <select
            id="exam_filter"
            value={examFilter}
            onChange={(e) => setExamFilter(e.target.value)}
            className="mt-1 block w-full sm:w-auto px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-gray-800 bg-gray-50"
          >
            <option value="All">All Exams</option>
            {exams.map(exam => (
              <option key={exam.$id} value={exam.$id}>
                {exam.name}
              </option>
            ))}
          </select>
          {examFilter !== 'All' && (
            <button
              onClick={() => setExamFilter('All')}
              className="bg-gray-200 text-gray-700 px-3 py-1.5 rounded-md hover:bg-gray-300 transition-colors duration-200 flex items-center gap-1 text-sm shadow-sm"
            >
              <X size={16} />
              Clear Exam
            </button>
          )}
          <label htmlFor="status_filter" className="text-sm font-semibold text-gray-700 whitespace-nowrap">Filter by Status:</label>
          <select
            id="status_filter"
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
            className="mt-1 block w-full sm:w-auto px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-gray-800 bg-gray-50"
          >
            <option value="All">All Statuses</option>
            <option value="Pass">Passed</option>
            <option value="Fail">Failed</option>
          </select>
          {statusFilter !== 'All' && (
            <button
              onClick={() => setStatusFilter('All')}
              className="bg-gray-200 text-gray-700 px-3 py-1.5 rounded-md hover:bg-gray-300 transition-colors duration-200 flex items-center gap-1 text-sm shadow-sm"
            >
              <X size={16} />
              Clear Status
            </button>
          )}
        </div>

        {loading && !viewModalOpen ? (
          <div className="flex justify-center items-center h-64">
            <p className="text-xl text-gray-600">Loading...</p>
          </div>
        ) : filteredResults.length === 0 ? (
          <div className="text-center py-10">
            <p className="text-gray-500 text-lg">{searchTerm || examFilter !== 'All' || statusFilter !== 'All' ? "No results match your search or filter." : "No results found."}</p>
            {!searchTerm && examFilter === 'All' && statusFilter === 'All' && <p className="text-gray-400">Data may be loading or unavailable.</p>}
          </div>
        ) : (
          <div className="overflow-x-auto rounded-lg shadow-sm border border-gray-200">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Student</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider hidden sm:table-cell">Exam</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Score</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider hidden sm:table-cell">Status</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider hidden md:table-cell">Date</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredResults.map((result) => (
                  <tr key={result.$id} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                      {result.studentName}
                      <div className="text-sm text-gray-500 sm:hidden">{result.examName}</div>
                    </td>
                    <td className="px-6 py-4 text-sm text-gray-500 hidden sm:table-cell">
                      {result.examName}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {result.score}/{result.total_marks} ({result.percentage?.toFixed(1)}%)
                    </td>
                    <td className="px-6 py-4 text-sm text-gray-500 hidden sm:table-cell">
                      <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                        result.status === 'passed' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                      }`}>
                        {result.status.toUpperCase()}
                      </span>
                    </td>
                    <td className="px-6 py-4 text-sm text-gray-500 hidden md:table-cell whitespace-nowrap">
                      {result.createdDate}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      <ActionButtons result={result} />
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}

        {viewModalOpen && viewingResult && (
          <div className="fixed inset-0 flex justify-center items-start z-50 bg-black bg-opacity-50 overflow-y-auto">
            <div className="bg-white rounded-lg shadow-xl p-6 max-w-4xl w-full m-4">
              <h3 className="text-xl font-bold mb-4">Result Details - {viewingResult.examName}</h3>
              
              <div className="bg-white p-6 rounded-lg shadow mb-6">
                <h2 className="text-lg font-semibold mb-4">Result Summary</h2>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className="p-4 bg-blue-50 rounded-lg">
                    <p className="text-sm text-gray-600">Score</p>
                    <p className="text-lg font-semibold">{viewingResult.score}/{viewingResult.total_marks}</p>
                  </div>
                  <div className="p-4 bg-green-50 rounded-lg">
                    <p className="text-sm text-gray-600">Percentage</p>
                    <p className="text-lg font-semibold">{viewingResult.percentage.toFixed(1)}%</p>
                  </div>
                  <div className={`p-4 rounded-lg ${viewingResult.status === 'passed' ? 'bg-green-50' : 'bg-red-50'}`}>
                    <p className="text-sm text-gray-600">Status</p>
                    <p className="text-lg font-semibold capitalize">{viewingResult.status}</p>
                  </div>
                  <div className="p-4 bg-purple-50 rounded-lg">
                    <p className="text-sm text-gray-600">Time Taken</p>
                    <p className="text-lg font-semibold">{formatDuration(viewingResult.time_taken)}</p>
                  </div>
                  <div className="p-4 bg-gray-50 rounded-lg">
                    <p className="text-sm text-gray-600">Attempted At</p>
                    <p className="text-lg font-semibold">{formatDate(viewingResult.attempted_at)}</p>
                  </div>
                  <div className="p-4 bg-gray-50 rounded-lg">
                    <p className="text-sm text-gray-600">Completed At</p>
                    <p className="text-lg font-semibold">{formatDate(viewingResult.completed_at)}</p>
                  </div>
                </div>
              </div>

              <div className="bg-white p-6 rounded-lg shadow">
                <h2 className="text-lg font-semibold mb-4">Student Responses</h2>
                {loading ? (
                  <div className="flex justify-center items-center h-64">
                    <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
                    <span className="ml-3 text-gray-600">Loading responses...</span>
                  </div>
                ) : error ? (
                  <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded">
                    <p className="font-medium">Error loading responses:</p>
                    <p className="mt-1">{error}</p>
                  </div>
                ) : responses.length === 0 ? (
                  <div className="text-center py-8">
                    <p className="text-gray-600">No responses found for this exam.</p>
                  </div>
                ) : (
                  <div className="space-y-6">
                    {responses.map((response) => {
                      const questionId = resolveRelationshipId(response.question_id);
                      const question = questions.find((q) => q.$id === questionId);
                      if (!question) {
                        return (
                          <div key={response.$id} className="border border-gray-200 rounded-lg p-4">
                            <p className="text-gray-600">Question data not found for response {response.$id}</p>
                          </div>
                        );
                      }

                      const isCorrect = parseInt(response.selected_option) === parseInt(question.correct_answer);
                      const questionMarks = getQuestionMarks(questionId);

                      return (
                        <div key={response.$id} className="border border-gray-200 rounded-lg p-4">
                          <div className="flex justify-between items-start mb-4">
                            <div>
                              {question.text && (
                                <p className="text-gray-700 mt-2">{question.text}</p>
                              )}
                              {question.imageUrl && (
                                <img
                                  src={question.imageUrl}
                                  alt="Question"
                                  className="mt-3 max-h-80 w-full object-contain border rounded-lg"
                                />
                              )}
                              <div className="mt-2 flex flex-wrap gap-2">
                                {question.difficulty && (
                                  <span className="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs">
                                    Difficulty: {question.difficulty}
                                  </span>
                                )}
                                {question.tags && Array.isArray(question.tags) && question.tags.map((tag, index) => (
                                  <span key={index} className="px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs">
                                    Tag: {tag}
                                  </span>
                                ))}
                              </div>
                            </div>
                            <div className="flex flex-col items-end space-y-1">
                              <span className="px-2 py-1 bg-gray-100 text-gray-800 rounded-full text-xs">
                                Marks: {questionMarks}
                              </span>
                              <span
                                className={`px-2 py-1 rounded-full text-xs ${
                                  isCorrect
                                    ? 'bg-green-100 text-green-800'
                                    : 'bg-red-100 text-red-800'
                                }`}
                              >
                                {isCorrect ? 'Correct' : 'Incorrect'}
                              </span>
                              {isCorrect && (
                                <span className="px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs">
                                  +{questionMarks} marks
                                </span>
                              )}
                            </div>
                          </div>
                          <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                            {question.optionsText?.map((option, optIndex) => {
                              const isSelected = parseInt(response.selected_option) === optIndex;
                              const isCorrectOption = parseInt(question.correct_answer) === optIndex;
                              return (
                                <div
                                  key={optIndex}
                                  className={`p-3 border rounded-lg ${
                                    isSelected && isCorrectOption
                                      ? 'border-green-500 bg-green-50'
                                      : isSelected
                                      ? 'border-red-500 bg-red-50'
                                      : isCorrectOption
                                      ? 'border-green-500 bg-green-50'
                                      : 'border-gray-200'
                                  }`}
                                >
                                  <div className="flex items-start">
                                    <span className="mt-1 h-5 w-5 inline-block mr-2">
                                      {isSelected && isCorrectOption && (
                                        <svg
                                          className="h-5 w-5 text-green-600"
                                          fill="none"
                                          viewBox="0 0 24 24"
                                          stroke="currentColor"
                                        >
                                          <path
                                            strokeLinecap="round"
                                            strokeLinejoin="round"
                                            strokeWidth={2}
                                            d="M5 13l4 4L19 7"
                                          />
                                        </svg>
                                      )}
                                      {isSelected && !isCorrectOption && (
                                        <svg
                                          className="h-5 w-5 text-red-600"
                                          fill="none"
                                          viewBox="0 0 24 24"
                                          stroke="currentColor"
                                        >
                                          <path
                                            strokeLinecap="round"
                                            strokeLinejoin="round"
                                            strokeWidth={2}
                                            d="M6 18L18 6M6 6l12 12"
                                          />
                                        </svg>
                                      )}
                                      {!isSelected && isCorrectOption && (
                                        <svg
                                          className="h-5 w-5 text-green-600"
                                          fill="none"
                                          viewBox="0 0 24 24"
                                          stroke="currentColor"
                                        >
                                          <path
                                            strokeLinecap="round"
                                            strokeLinejoin="round"
                                            strokeWidth={2}
                                            d="M5 13l4 4L19 7"
                                          />
                                        </svg>
                                      )}
                                    </span>
                                    <div className="flex-1">
                                      {option && <p className="text-gray-700">{option}</p>}
                                      {question.optionsImageUrls?.[optIndex] && (
                                        <img
                                          src={question.optionsImageUrls[optIndex]}
                                          alt={`Option ${optIndex + 1}`}
                                          className="mt-2 max-h-40 w-full object-contain"
                                        />
                                      )}
                                      {isCorrectOption && (
                                        <p className="text-sm font-bold text-green-600 mt-1">Correct Answer</p>
                                      )}
                                      {isSelected && !isCorrectOption && (
                                        <p className="text-sm text-red-600 mt-1">Your Answer</p>
                                      )}
                                    </div>
                                  </div>
                                </div>
                              );
                            })}
                          </div>
                        </div>
                      );
                    })}
                  </div>
                )}
              </div>

              <div className="flex justify-end mt-4">
                <button
                  onClick={closeViewModal}
                  className="bg-gray-500 text-white px-4 py-2 rounded-md hover:bg-gray-600 transition-colors"
                >
                  Close
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ResultsAnalysisPage;-e [1;34m===== ./pages/admin/exams.jsx =====[0m
import React, { useState, useEffect, useCallback, useRef } from 'react';
import { Plus, Download, Search, X, BookOpen, Calendar, Clock, Edit, Trash2, Eye } from 'lucide-react';
import { useRouter } from 'next/router';
import { databases, ID, Query, Permission, Role } from '../../utils/appwrite';
import { account } from '../../utils/appwrite';
import Modal from '../../components/Modal';

const ExamsPage = () => {
  const router = useRouter();
  const [exams, setExams] = useState([]);
  const [filteredExams, setFilteredExams] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isQuestionModalOpen, setIsQuestionModalOpen] = useState(false);
  const [isViewQuestionsModalOpen, setIsViewQuestionsModalOpen] = useState(false);
  const [selectedExam, setSelectedExam] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [selectedExamDetail, setSelectedExamDetail] = useState(null);
  const [questions, setQuestions] = useState([]);
  const [filteredQuestions, setFilteredQuestions] = useState([]);
  const [mappedQuestions, setMappedQuestions] = useState([]);
  const [selectedQuestions, setSelectedQuestions] = useState([]);
  const [questionMarks, setQuestionMarks] = useState({});
  const [searchTerm, setSearchTerm] = useState("");
  const [difficultyFilter, setDifficultyFilter] = useState("all");
  const [tagFilter, setTagFilter] = useState("all");
  const [availableTags, setAvailableTags] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [filterStatus, setFilterStatus] = useState("");
  const [isExportMenuOpen, setIsExportMenuOpen] = useState(false);
  const questionsPerPage = 10;

  const exportButtonRef = useRef(null);

  const initialFormData = {
    exam_id: "",
    name: "",
    description: "",
    exam_date: "",
    duration: "",
    status: "active",
  };

  const [formData, setFormData] = useState(initialFormData);

  const databaseId = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;
  const examsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_EXAMS_COLLECTION_ID;
  const questionsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_QUESTIONS_COLLECTION_ID;
  const examQuestionsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_EXAM_QUESTIONS_COLLECTION_ID;

  const logQuery = (queryName, params, result, error = null) => {
    console.groupCollapsed(`Query: ${queryName}`);
    console.log('Params:', params);
    if (error) {
      console.error('Error:', error);
    } else {
      console.log('Result:', result);
    }
    console.groupEnd();
  };

  const fetchExams = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    try {
      const queryParams = {
        databaseId,
        collectionId: examsCollectionId,
        queries: [Query.orderDesc("$createdAt")]
      };

      let response;
      try {
        response = await databases.listDocuments(
          queryParams.databaseId,
          queryParams.collectionId,
          queryParams.queries
        );
        logQuery('Fetch Exams', queryParams, {
          total: response.total,
          documents: response.documents
        });
      } catch (err) {
        logQuery('Fetch Exams', queryParams, null, err);
        throw err;
      }

      const examsWithDates = response.documents.map(exam => ({
        ...exam,
        exam_date_obj: new Date(exam.exam_date)
      }));
      
      const sortedExams = examsWithDates.sort((a, b) => {
        const now = new Date();
        const aIsExpired = a.exam_date_obj < now;
        const bIsExpired = b.exam_date_obj < now;
        
        if (aIsExpired && !bIsExpired) return 1;
        if (!aIsExpired && bIsExpired) return -1;
        return a.exam_date_obj - b.exam_date_obj;
      });

      setExams(sortedExams);
      setFilteredExams(sortedExams.filter(exam => 
        filterStatus === "" || exam.status === filterStatus
      ));
    } catch (err) {
      console.error('Error fetching exams:', {
        message: err.message,
        stack: err.stack,
        timestamp: new Date().toISOString()
      });
      setError("Failed to load exams. Please try again.");
    } finally {
      setIsLoading(false);
    }
  }, [databaseId, examsCollectionId, filterStatus]);

  const fetchQuestions = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    try {
      const queryParams = {
        databaseId,
        collectionId: questionsCollectionId,
        queries: [Query.orderDesc("$createdAt"), Query.limit(500)]
      };

      let response;
      try {
        response = await databases.listDocuments(
          queryParams.databaseId,
          queryParams.collectionId,
          queryParams.queries
        );
        logQuery('Fetch Questions', queryParams, {
          total: response.total,
          documents: response.documents
        });
      } catch (err) {
        logQuery('Fetch Questions', queryParams, null, err);
        throw new Error(`Failed to fetch questions: ${err.message}`);
      }

      if (response.total === 0) {
        console.warn('No questions found in the collection');
        setError('No questions found in the collection. Please add questions to the database.');
      }

      const sortedQuestions = response.documents.sort((a, b) => 
        new Date(b.$createdAt) - new Date(a.$createdAt)
      );

      console.log('Fetched questions:', sortedQuestions.length, sortedQuestions);

      setQuestions(sortedQuestions);
      setFilteredQuestions(sortedQuestions);
      
      const tags = new Set();
      sortedQuestions.forEach(question => {
        if (question.tags && Array.isArray(question.tags)) {
          question.tags.forEach(tag => tags.add(tag));
        }
      });
      setAvailableTags(Array.from(tags).sort());
    } catch (err) {
      console.error('Error fetching questions:', {
        message: err.message,
        stack: err.stack,
        timestamp: new Date().toISOString()
      });
      setError(err.message || "Failed to load questions. Please check your database connection and try again.");
    } finally {
      setIsLoading(false);
    }
  }, [databaseId, questionsCollectionId]);

  const fetchExamQuestions = useCallback(async (examId) => {
    setIsLoading(true);
    setError(null);
    try {
      const examQuestionsResponse = await databases.listDocuments(
        databaseId, 
        examQuestionsCollectionId,
        [Query.orderAsc('order')]
      );
      
      const filteredExamQuestions = examQuestionsResponse.documents.filter(doc => {
        const examRef = doc.exam_id;
        if (Array.isArray(examRef)) {
          return examRef.some(ref => ref.$id === examId || ref === examId);
        } else if (typeof examRef === 'object') {
          return examRef.$id === examId;
        }
        return examRef === examId;
      });

      const questionIds = filteredExamQuestions.map(eq => {
        const questionRef = eq.question_id;
        if (Array.isArray(questionRef)) {
          return questionRef[0]?.$id || questionRef[0];
        } else if (typeof questionRef === 'object') {
          return questionRef.$id;
        }
        return questionRef;
      }).filter(id => id);

      if (questionIds.length > 0) {
        const questionsResponse = await databases.listDocuments(
          databaseId,
          questionsCollectionId,
          [Query.limit(100)]
        );
        
        const filteredQuestions = questionsResponse.documents.filter(q => 
          questionIds.includes(q.$id) || questionIds.includes(q.question_id)
        );

        const orderedQuestions = filteredExamQuestions.map(eq => {
          const questionRef = eq.question_id;
          const questionId = Array.isArray(questionRef) ? questionRef[0]?.$id || questionRef[0] : 
                           (typeof questionRef === 'object' ? questionRef.$id : questionRef);
          const question = filteredQuestions.find(q => q.$id === questionId || q.question_id === questionId);
          return {
            ...question,
            order: eq.order,
            marks: eq.marks,
            examQuestionId: eq.$id
          };
        });

        return {
          questions: orderedQuestions,
          examQuestions: filteredExamQuestions,
          questionIds: filteredExamQuestions.map(q => q.question_id)
        };
      }

      return { questions: [], examQuestions: [], questionIds: [] };
    } catch (err) {
      console.error('Error fetching exam questions:', {
        message: err.message,
        stack: err.stack,
        timestamp: new Date().toISOString()
      });
      setError(err.message || "Failed to load exam questions");
      return { questions: [], examQuestions: [], questionIds: [] };
    } finally {
      setIsLoading(false);
    }
  }, [databaseId, questionsCollectionId, examQuestionsCollectionId]);

  useEffect(() => {
    let results = [...questions];
    
    console.log('Applying filters:', { searchTerm, difficultyFilter, tagFilter, totalQuestions: questions.length });

    if (searchTerm) {
      results = results.filter(question => 
        (question.text?.toLowerCase()?.includes(searchTerm.toLowerCase()) ||
        question.question_id?.toLowerCase()?.includes(searchTerm.toLowerCase()))
      );
    }
    
    if (difficultyFilter !== "all") {
      results = results.filter(question => 
        question.difficulty === difficultyFilter
      );
    }
    
    if (tagFilter !== "all") {
      results = results.filter(question => 
        question.tags && Array.isArray(question.tags) && question.tags.includes(tagFilter)
      );
    }
    
    console.log('Filtered questions:', results.length, results);

    setFilteredQuestions(results);
    setCurrentPage(1);
  }, [searchTerm, difficultyFilter, tagFilter, questions]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        await Promise.all([fetchExams(), fetchQuestions()]);
      } catch (err) {
        setError("Failed to load initial data. Please try again.");
      }
    };
    fetchData();
  }, [fetchExams, fetchQuestions]);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (exportButtonRef.current && !exportButtonRef.current.contains(event.target)) {
        setIsExportMenuOpen(false);
      }
    };

    if (isExportMenuOpen) {
      document.addEventListener("mousedown", handleClickOutside);
    }
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [isExportMenuOpen]);

  const openModal = (exam = null) => {
    setSelectedExam(exam);
    setFormData(
      exam ? {
        exam_id: exam.exam_id || "",
        name: exam.name || "",
        description: exam.description || "",
        exam_date: exam.exam_date ? exam.exam_date.substring(0, 16) : "",
        duration: exam.duration?.toString() || "",
        status: exam.status || "active",
      } : initialFormData
    );
    setIsModalOpen(true);
  };

  const openQuestionModal = async (exam) => {
    setSelectedExam(exam);
    setIsLoading(true);
    try {
      const { questions: mapped, questionIds } = await fetchExamQuestions(exam.$id);
      setMappedQuestions(mapped);
      setSelectedQuestions(questionIds || []);
      
      const marks = {};
      mapped.forEach(q => {
        marks[q.$id] = q.marks || 1;
      });
      setQuestionMarks(marks);
      
      setIsQuestionModalOpen(true);
    } catch (err) {
      setError("Failed to load exam questions");
    } finally {
      setIsLoading(false);
    }
  };

  const openViewQuestionsModal = async (exam) => {
    setSelectedExam(exam);
    setIsLoading(true);
    try {
      const { questions: examQuestions } = await fetchExamQuestions(exam.$id);
      setQuestions(examQuestions);
      setIsViewQuestionsModalOpen(true);
    } catch (err) {
      setError("Failed to load exam questions");
    } finally {
      setIsLoading(false);
    }
  };

  const closeModal = () => {
    setIsModalOpen(false);
    setSelectedExam(null);
    setFormData(initialFormData);
    setError(null);
  };

  const closeQuestionModal = () => {
    setIsQuestionModalOpen(false);
    setSelectedExam(null);
    setSelectedQuestions([]);
    setQuestionMarks({});
    setSearchTerm("");
    setDifficultyFilter("all");
    setTagFilter("all");
    setMappedQuestions([]);
    setCurrentPage(1);
  };

  const closeViewQuestionsModal = () => {
    setIsViewQuestionsModalOpen(false);
    setSelectedExam(null);
    setQuestions([]);
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleQuestionSelect = (questionId) => {
    setSelectedQuestions(prev => {
      if (prev.includes(questionId)) {
        const newMarks = {...questionMarks};
        delete newMarks[questionId];
        setQuestionMarks(newMarks);
        return prev.filter(id => id !== questionId);
      } else {
        setQuestionMarks(prev => ({
          ...prev,
          [questionId]: prev[questionId] || 1
        }));
        return [...prev, questionId];
      }
    });
  };

  const handleMarksChange = (questionId, value) => {
    const marksValue = parseInt(value) || 1;
    setQuestionMarks(prev => ({
      ...prev,
      [questionId]: marksValue > 0 ? marksValue : 1
    }));
  };

  const validateForm = (data) => {
    if (!data.exam_id.trim()) return "Exam ID is required";
    if (!data.name.trim()) return "Exam name is required";
    if (!data.exam_date) return "Exam date is required";
    if (!data.duration || isNaN(parseInt(data.duration))) return "Duration must be a valid number";
    return null;
  };

  const handleSave = async (data) => {
    const validationError = validateForm(data);
    if (validationError) {
      setError(validationError);
      return;
    }

    setIsLoading(true);
    setError(null);

    try {
      const user = await account.get();
      if (!user) throw new Error("Authentication required");

      const durationInt = parseInt(data.duration, 10);
      const timestamp = new Date().toISOString();

      if (selectedExam) {
        await databases.updateDocument(
          databaseId,
          examsCollectionId,
          selectedExam.$id,
          { ...data, duration: durationInt, modified_at: timestamp }
        );
      } else {
        await databases.createDocument(
          databaseId,
          examsCollectionId,
          ID.unique(),
          {
            ...data,
            duration: durationInt,
            created_by: user.$id,
            created_at: timestamp,
            modified_at: timestamp,
          },
          [
            Permission.read(Role.any()),
            Permission.update(Role.user(user.$id)),
            Permission.delete(Role.user(user.$id))
          ]
        );
      }

      closeModal();
      await fetchExams();
    } catch (err) {
      console.error("Error saving exam:", {
        message: err.message,
        stack: err.stack,
        timestamp: new Date().toISOString()
      });
      setError(err.message || "Failed to save exam");
    } finally {
      setIsLoading(false);
    }
  };

  const handleSaveQuestions = async () => {
    if (!selectedExam) {
      setError("No exam selected");
      return;
    }

    setIsLoading(true);
    setError(null);

    try {
      let user;
      try {
        user = await account.get();
        if (!user) throw new Error("User not authenticated");
      } catch (authError) {
        throw new Error("Authentication failed. Please log in again.");
      }

      const existingQuestions = await fetchExamQuestions(selectedExam.$id);
      
      const questionsToDelete = existingQuestions.examQuestions.filter(
        q => !selectedQuestions.includes(Array.isArray(q.question_id) ? q.question_id[0] : q.question_id)
      );
      
      await Promise.all(
        questionsToDelete.map(async (q) => {
          try {
            await databases.deleteDocument(databaseId, examQuestionsCollectionId, q.$id);
          } catch (deleteError) {
            console.error(`Failed to delete exam question ${q.$id}:`, deleteError);
            throw new Error(`Failed to delete question ${q.$id}: ${deleteError.message}`);
          }
        })
      );

      await Promise.all(
        selectedQuestions.map(async (questionId, index) => {
          const questionExists = questions.find(q => q.$id === questionId);
          if (!questionExists) {
            throw new Error(`Question with ID ${questionId} does not exist`);
          }

          const existing = existingQuestions.examQuestions.find(
            q => {
              const qId = Array.isArray(q.question_id) ? q.question_id[0] : q.question_id;
              return qId === questionId;
            }
          );
          
          const marks = questionMarks[questionId] || 1;
          if (isNaN(marks) || marks < 1) {
            throw new Error(`Invalid marks for question ${questionId}`);
          }

          const documentData = {
            exam_id: [selectedExam.$id],
            question_id: [questionId],
            order: index + 1,
            marks: marks
          };

          console.log('Creating/Updating exam question:', {
            questionId,
            documentData,
            existing: !!existing
          });

          if (existing) {
            try {
              await databases.updateDocument(
                databaseId,
                examQuestionsCollectionId,
                existing.$id,
                { 
                  order: index + 1, 
                  marks: marks 
                }
              );
            } catch (updateError) {
              console.error(`Failed to update exam question ${existing.$id}:`, updateError);
              throw new Error(`Failed to update question ${questionId}: ${updateError.message}`);
            }
          } else {
            try {
              await databases.createDocument(
                databaseId,
                examQuestionsCollectionId,
                ID.unique(),
                documentData,
                [
                  Permission.read(Role.any()),
                  Permission.update(Role.user(user.$id)),
                  Permission.delete(Role.user(user.$id)),
                  Permission.write(Role.user(user.$id))
                ]
              );
            } catch (createError) {
              console.error(`Failed to create exam question for ${questionId}:`, createError);
              throw new Error(`Failed to create question ${questionId}: ${createError.message}`);
            }
          }
        })
      );

      closeQuestionModal();
      await fetchExams();
    } catch (err) {
      console.error("Error saving exam questions:", {
        message: err.message,
        stack: err.stack,
        timestamp: new Date().toISOString()
      });
      setError(err.message || "Failed to save exam questions. Please check your permissions and try again.");
    } finally {
      setIsLoading(false);
    }
  };

  const deleteExam = async (examId) => {
    if (!window.confirm("Are you sure you want to delete this exam?")) return;

    setIsLoading(true);
    try {
      const user = await account.get();
      if (!user) throw new Error("Authentication required");

      const examQuestions = await fetchExamQuestions(examId);
      await Promise.all(
        examQuestions.examQuestions.map(q => 
          databases.deleteDocument(databaseId, examQuestionsCollectionId, q.$id)
        )
      );

      await databases.deleteDocument(databaseId, examsCollectionId, examId);
      await fetchExams();
      closeExamDetails();
    } catch (err) {
      console.error("Error deleting exam:", {
        message: err.message,
        stack: err.stack,
        timestamp: new Date().toISOString()
      });
      setError(err.message || "Failed to delete exam");
    } finally {
      setIsLoading(false);
    }
  };

  const handleExport = async (format) => {
    setIsExportMenuOpen(false);
    if (filteredExams.length === 0) {
      setError("No exams available to export.");
      return;
    }
    try {
      const exportData = filteredExams.map((exam) => ({
        "Exam ID": exam.exam_id,
        "Name": exam.name,
        "Description": exam.description || "N/A",
        "Exam Date": formatDate(exam.exam_date),
        "Duration": formatDuration(exam.duration),
        "Status": exam.status,
        "Created By": exam.created_by || "N/A",
        "Created At": formatDate(exam.created_at),
        "Last Modified": formatDate(exam.modified_at),
      }));
      if (format === "csv") {
        const { Parser } = await import("json2csv");
        const fields = ["Exam ID", "Name", "Description", "Exam Date", "Duration", "Status", "Created By", "Created At", "Last Modified"];
        const parser = new Parser({ fields });
        const csv = parser.parse(exportData);
        const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
        const url = URL.createObjectURL(blob);
        const link = document.createElement("a");
        link.setAttribute("href", url);
        link.setAttribute("download", `exams_${new Date().toISOString().slice(0, 10)}.csv`);
        link.click();
        URL.revokeObjectURL(url);
      } else if (format === "xls") {
        const { utils, writeFile } = await import("xlsx");
        const ws = utils.json_to_sheet(exportData);
        const wb = utils.book_new();
        utils.book_append_sheet(wb, ws, "Exams");
        writeFile(wb, `exams_${new Date().toISOString().slice(0, 10)}.xlsx`);
      }
    } catch (error) {
      console.error(`Error exporting to ${format.toUpperCase()}:`, error);
      setError(`Failed to export to ${format.toUpperCase()}: ${error.message}`);
    }
  };

  const formatDate = (dateString) => {
    if (!dateString) return "N/A";
    const options = { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric', 
      hour: '2-digit', 
      minute: '2-digit' 
    };
    return new Date(dateString).toLocaleString(undefined, options);
  };

  const formatDuration = (minutes) => {
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    return hours ? `${hours}h ${mins}m` : 
           `${mins}m`;
  };

  const getExamStatus = (examDate) => {
    const now = new Date();
    const examDateObj = new Date(examDate);
    return examDateObj < now ? "Expired" : "";
  };

  const indexOfLastQuestion = currentPage * questionsPerPage;
  const indexOfFirstQuestion = indexOfLastQuestion - questionsPerPage;

  const currentQuestions = filteredQuestions.slice(indexOfFirstQuestion, indexOfLastQuestion);
  const totalPages = Math.ceil(filteredQuestions.length / questionsPerPage);

  const viewExamDetails = (exam) => {
    setSelectedExamDetail(exam);
  };

  const closeExamDetails = () => {
    setSelectedExamDetail(null);
  };

  if (isLoading && !exams.length) {
    return (
      <div className="min-h-screen bg-gray-100 p-4 sm:p-6 font-inter">
        <div className="container mx-auto">
          <div className="flex justify-center items-center h-32">
            <p className="text-xl text-gray-600">Loading...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-100 p-4 sm:p-6 font-inter">
      <div className="container mx-auto bg-white rounded-lg shadow-md p-4 sm:p-6">
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-3">
          <h2 className="text-2xl sm:text-3xl font-extrabold text-gray-600 sm:text-gray-800">Manage Exams</h2>
          <div className="flex flex-wrap gap-2">
            <button
              onClick={() => openModal()}
              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition-colors duration-200 flex items-center gap-2 text-base font-semibold sm:text-sm shadow-sm"
              disabled={isLoading}
            >
              <Plus size={18} /> Add Exam
            </button>
            <div className="relative" ref={exportButtonRef}>
              <button
                className="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-md transition-colors duration-200 flex items-center gap-2 text-base font-semibold sm:text-sm shadow-sm"
                onClick={() => setIsExportMenuOpen(!isExportMenuOpen)}
              >
                <Download size={18} />
                <span>Export</span>
              </button>
              {isExportMenuOpen && (
                <div className="absolute right-0 bg-white rounded-md shadow-lg mt-2 w-48 border border-gray-200 z-50">
                  <button
                    className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                    onClick={() => handleExport("csv")}
                  >
                    Export to CSV
                  </button>
                  <button
                    className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                    onClick={() => handleExport("xls")}
                  >
                    Export to XLS
                  </button>
                </div>
              )}
            </div>
          </div>
        </div>

        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-md mb-6" role="alert">
            <strong className="font-bold">Error:</strong>
            <span className="block sm:inline ml-2">{error}</span>
          </div>
        )}

        <div className="mb-4 flex flex-col sm:flex-row items-start sm:items-center gap-3">
          <label htmlFor="status_filter" className="text-sm font-semibold text-gray-700 whitespace-nowrap">Filter by Status:</label>
          <select
            id="status_filter"
            value={filterStatus}
            onChange={(e) => setFilterStatus(e.target.value)}
            className="mt-1 block w-full sm:w-auto px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm bg-gray-50 text-gray-800"
          >
            <option value="">All Statuses</option>
            <option value="active">Active</option>
            <option value="inactive">Inactive</option>
            <option value="completed">Completed</option>
          </select>
          {filterStatus && (
            <button
              onClick={() => setFilterStatus("")}
              className="bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2 rounded-md transition-colors duration-200 flex items-center gap-1 sm:text-sm shadow-sm"
            >
              <X size={16} />
              <span>Clear Filter</span>
            </button>
          )}
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
          <div className="flex justify-between items-center mb-6">
            <h4 className="text-xl font-semibold text-gray-800 flex items-center sm:text-lg">
              <BookOpen size={20} className="mr-2 text-blue-600" />
              All Exams
            </h4>
            <span className="text-sm text-gray-500 sm:text-xs">
              {filteredExams.length} exam{filteredExams.length !== 1 ? 's' : ''}
            </span>
          </div>

          {filteredExams.length > 0 ? (
            <div className="space-y-4">
              {filteredExams.map((examData) => (
                <div 
                  key={examData.$id}
                  onClick={() => viewExamDetails(examData)}
                  className={`border rounded-lg border-gray-100 p-3 sm:p-4 cursor-pointer transition-all hover:shadow-md ${
                    getExamStatus(examData.exam_date) === "Expired" 
                      ? "bg-gray-100 opacity-70" 
                      : "bg-white"
                  }`}
                >
                  <div className="flex flex-col sm:flex-row justify-between items-start sm:items-start">
                    <div>
                      <h4 className="text-base font-semibold text-gray-900 sm:text-lg">{examData.name}</h4>
                      <p className="text-sm text-gray-600 mt-1">{examData.exam_id}</p>
                      <div className="mt-2 flex flex-col sm:flex-row sm:items-center sm:space-x-2">
                        <span className="flex items-center text-sm text-gray-500 sm:text-xs">
                          <Calendar size={16} className="mr-1" /> {formatDate(examData.exam_date)}
                        </span>
                        <span className="flex items-center text-sm text-gray-500 sm:text-xs sm:mt-0 mt-1">
                          <Clock size={16} className="mr-1" /> {formatDuration(examData.duration)}
                        </span>
                      </div>
                    </div>
                    <div className="flex items-center space-x-2 mt-4 sm:mt-0">
                      <span className={`px-2 py-0 rounded-sm text-sm font-semibold sm:text-xs ${
                        examData.status === "active" 
                          ? "bg-blue-100 text-blue-800" 
                          : examData.status === "completed" 
                          ? "bg-green-100 text-green-800" 
                          : "bg-gray-100 text-gray-800"
                      }`}>
                        {examData.status}
                      </span>
                      <span className={`px-2 py-0 rounded-sm text-sm font-semibold sm:text-xs ${
                        getExamStatus(examData.exam_date) === "Expired" 
                          ? "bg-red-100 text-red-800" 
                          : "bg-green-100 text-green-800"
                      }`}>
                        {getExamStatus(examData.exam_date)}
                      </span>
                    </div>
                  </div>
                  <div className="mt-3 flex space-x-2 gap-1 sm:gap-2">
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        openQuestionModal(examData);
                      }}
                      className="bg-gray-500 text-white p-1.5 rounded-md hover:bg-gray-600 transition-colors duration-200 sm:p-2"
                      disabled={isLoading}
                      title="Manage Questions"
                    >
                      <Edit size={16} className="w-4 h-4" />
                    </button>
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        openViewQuestionsModal(examData);
                      }}
                      className="bg-green-500 text-white p-1.5 rounded-md hover:bg-green-600 transition-colors duration-200 sm:p-2"
                      disabled={isLoading}
                      title="View Questions"
                    >
                      <Eye size={16} className="w-4 h-4" />
                    </button>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center py-8">
              <p className="text-gray-500 mb-4 text-base sm:text-lg">{filterStatus ? "No exams match the selected status." : "No exams found."}</p>
              <button
                onClick={() => openModal()}
                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors text-sm sm:text-base"
              >
                Create First Exam
              </button>
            </div>
          )}
        </div>

        {isModalOpen && (
          <Modal
            isOpen={isModalOpen}
            title={selectedExam ? "Edit Exam" : "Add Exam"}
            onClose={closeModal}
            onSave={handleSave}
            initialData={formData}
            fields={[
              { name: "exam_id", label: "Exam ID", type: "text", required: true, disabled: !!selectedExam },
              { name: "name", label: "Exam Name", type: "text", required: true },
              { name: "description", label: "Description", type: "textarea" },
              { name: "exam_date", label: "Exam Date", type: "datetime-local", required: true },
              { name: "duration", label: "Duration (minutes)", type: "number", required: true, min: 1 },
              {
                name: "status",
                label: "Status",
                type: "select",
                options: ["active", "inactive", "completed"],
                required: true,
              },
            ]}
            onChange={handleInputChange}
            isLoading={isLoading}
            error={error}
          />
        )}

        {isQuestionModalOpen && selectedExam && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] overflow-y-auto">
              <div className="p-6">
                <div className="flex justify-between items-start mb-4">
                  <div>
                    <h3 className="text-xl font-bold text-gray-800">
                      Manage Questions for {selectedExam.name}
                    </h3>
                    <p className="text-sm text-gray-600">
                      {selectedQuestions?.length || 0} question(s) selected
                    </p>
                  </div>
                  <button
                    onClick={closeQuestionModal}
                    className="text-gray-500 hover:text-gray-700"
                    disabled={isLoading}
                  >
                    <X size={24} />
                  </button>
                </div>

                {error && (
                  <div className="mb-4 p-3 bg-red-100 border-l-4 border-red-500 text-red-700">
                    <p>{error}</p>
                  </div>
                )}

                <div className="mb-4 grid grid-cols-1 sm:grid-cols-3 gap-4">
                  <div className="relative">
                    <label htmlFor="search" className="block text-sm font-semibold text-gray-700 mb-1">
                      Search Questions
                    </label>
                    <input
                      type="text"
                      id="search"
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      placeholder="Search by text or ID..."
                      className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm bg-gray-50 pl-10 text-gray-800"
                      disabled={isLoading}
                    />
                    <Search size={20} className="absolute left-3 top-9 -translate-y-1/2 text-gray-400" />
                  </div>
                  <div>
                    <label htmlFor="difficulty" className="block text-sm font-semibold text-gray-700 mb-1">
                      Filter Difficulty
                    </label>
                    <select
                      id="difficulty"
                      value={difficultyFilter}
                      onChange={(e) => setDifficultyFilter(e.target.value)}
                      className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm bg-gray-50 text-gray-800"
                      disabled={isLoading}
                    >
                      <option value="all">All Difficulties</option>
                      <option value="easy">Easy</option>
                      <option value="medium">Medium</option>
                      <option value="hard">Hard</option>
                    </select>
                  </div>
                  <div>
                    <label htmlFor="tags" className="block text-sm font-semibold text-gray-700 mb-1">
                      Filter Tag
                    </label>
                    <select
                      id="tags"
                      value={tagFilter}
                      onChange={(e) => setTagFilter(e.target.value)}
                      className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm bg-gray-50 text-gray-800"
                      disabled={isLoading}
                    >
                      <option value="all">All Tags</option>
                      {availableTags.map(tag => (
                        <option key={tag} value={tag}>{tag}</option>
                      ))}
                    </select>
                  </div>
                </div>

                <div className="space-y-6">
                  {mappedQuestions.length > 0 && (
                    <div>
                      <h4 className="text-lg font-semibold text-gray-800 sm:text-base mb-3">Mapped Questions</h4>
                      <div className="space-y-3">
                        {mappedQuestions.map((question, index) => (
                          <div 
                            key={question.$id} 
                            className={`p-4 border rounded-lg transition-colors ${
                              selectedQuestions.includes(question.$id) 
                                ? "bg-blue-50 border-blue-200" 
                                : "bg-white border-gray-200 hover:bg-gray-50"
                            }`}
                          >
                            <div className="flex items-start space-x-3">
                              <div className="w-8 text-center text-gray-600 sm:text-sm">{index + 1}.</div>
                              <input
                                type="checkbox"
                                checked={selectedQuestions.includes(question.$id)}
                                onChange={() => handleQuestionSelect(question.$id)}
                                className="mt-1 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded sm:h-4 sm:w-4"
                                disabled={isLoading}
                              />
                              <div className="flex-1">
                                <div className="flex justify-between items-start">
                                  <h4 className="font-medium text-gray-800 sm:text-sm">
                                    {question.text || "Question"}
                                  </h4>
                                  <span className={`px-2 py-1 text-sm rounded-full sm:text-xs ${
                                    question.difficulty === "easy" 
                                      ? "bg-green-100 text-green-800" 
                                      : question.difficulty === "medium"
                                      ? "bg-yellow-100 text-yellow-800"
                                      : "bg-red-100 text-red-800"
                                  }`}>
                                    {question.difficulty}
                                  </span>
                                </div>
                                <div className="mt-1 text-sm text-gray-600 sm:text-xs">
                                  <span className="mr-2">ID: {question.question_id}</span>
                                  <span>Type: {question.type}</span>
                                  {question.tags && question.tags.length > 0 && (
                                    <div className="mt-1 flex flex-wrap gap-1">
                                      {question.tags.map(tag => (
                                        <span key={tag} className="px-2 py-0.5 bg-gray-100 text-gray-700 rounded-full text-xs sm:text-xs">
                                          {tag}
                                        </span>
                                      ))}
                                    </div>
                                  )}
                                </div>
                                {selectedQuestions.includes(question.$id) && (
                                  <div className="mt-3 flex items-center">
                                    <label htmlFor={`marks-${question.$id}`} className="mr-2 text-sm text-gray-700 sm:text-sm">
                                      Marks:
                                    </label>
                                    <input
                                      type="number"
                                      id={`marks-${question.$id}`}
                                      min="1"
                                      value={questionMarks[question.$id] || 1}
                                      onChange={(e) => handleMarksChange(question.$id, e.target.value)}
                                      className="w-20 px-2 py-1 border border-gray-300 rounded-md text-sm sm:text-sm"
                                      disabled={isLoading}
                                    />
                                  </div>
                                )}
                                {question.options_text && (
                                  <div className="mt-2 grid grid-cols-1 md:grid-cols-2 gap-2">
                                    {question.options_text.map((option, index) => (
                                      <div 
                                        key={index} 
                                        className={`text-sm p-2 rounded ${
                                          question.correct_answer === index 
                                            ? "bg-green-100 text-green-800" 
                                            : "bg-gray-100 text-gray-800"
                                        }`}
                                      >
                                        {option}
                                      </div>
                                    ))}
                                  </div>
                                )}
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}

                  <div>
                    <h4 className="text-lg font-semibold text-gray-800 sm:text-base mb-3">All Questions</h4>
                    <div className="space-y-3">
                      {currentQuestions.length > 0 ? (
                        currentQuestions.map((question, index) => (
                          <div 
                            key={question.$id} 
                            className={`p-4 border rounded-lg transition-colors ${
                              selectedQuestions.includes(question.$id) 
                                ? "bg-blue-50 border-blue-200" 
                                : "bg-white border-gray-200 hover:bg-gray-50"
                            }`}
                          >
                            <div className="flex items-start space-x-3">
                              <div className="w-8 text-center text-gray-600 sm:text-sm">
                                {(mappedQuestions.length + index + 1) + ((currentPage - 1) * questionsPerPage)}.
                              </div>
                              <input
                                type="checkbox"
                                checked={selectedQuestions.includes(question.$id)}
                                onChange={() => handleQuestionSelect(question.$id)}
                                className="mt-1 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded sm:h-4 sm:w-4"
                                disabled={isLoading}
                              />
                              <div className="flex-1">
                                <div className="flex justify-between items-start">
                                  <h4 className="font-medium text-gray-800 sm:text-sm">
                                    {question.text || "Question"}
                                  </h4>
                                  <span className={`px-2 py-1 text-sm rounded-full sm:text-xs ${
                                    question.difficulty === "easy" 
                                      ? "bg-green-100 text-green-800" 
                                      : question.difficulty === "medium"
                                      ? "bg-yellow-100 text-yellow-800"
                                      : "bg-red-100 text-red-800"
                                  }`}>
                                    {question.difficulty || "N/A"}
                                  </span>
                                </div>
                                <div className="mt-1 text-sm text-gray-600 sm:text-xs">
                                  <span className="mr-2">ID: {question.question_id || "N/A"}</span>
                                  <span>Type: {question.type || "N/A"}</span>
                                  {question.tags && question.tags.length > 0 && (
                                    <div className="mt-1 flex flex-wrap gap-1">
                                      {question.tags.map(tag => (
                                        <span key={tag} className="px-2 py-0.5 bg-gray-100 text-gray-700 rounded-full text-xs sm:text-xs">
                                          {tag}
                                        </span>
                                      ))}
                                    </div>
                                  )}
                                </div>
                                {selectedQuestions.includes(question.$id) && (
                                  <div className="mt-3 flex items-center">
                                    <label htmlFor={`marks-${question.$id}`} className="mr-2 text-sm text-gray-700 sm:text-sm">
                                      Marks:
                                    </label>
                                    <input
                                      type="number"
                                      id={`marks-${question.$id}`}
                                      min="1"
                                      value={questionMarks[question.$id] || 1}
                                      onChange={(e) => handleMarksChange(question.$id, e.target.value)}
                                      className="w-20 px-2 py-1 border border-gray-300 rounded-md text-sm sm:text-sm"
                                      disabled={isLoading}
                                    />
                                  </div>
                                )}
                                {question.options_text && (
                                  <div className="mt-2 grid grid-cols-1 md:grid-cols-2 gap-2">
                                    {question.options_text.map((option, index) => (
                                      <div 
                                        key={index} 
                                        className={`text-sm p-2 rounded ${
                                          question.correct_answer === index 
                                            ? "bg-green-100 text-green-800" 
                                            : "bg-gray-100 text-gray-800"
                                        }`}
                                      >
                                        {option}
                                      </div>
                                    ))}
                                  </div>
                                )}
                              </div>
                            </div>
                          </div>
                        ))
                      ) : (
                        <div className="text-center py-8 text-gray-500">
                          {filteredQuestions.length === 0 && questions.length > 0
                            ? "No questions match the current filters"
                            : "No questions found in the collection"}
                        </div>
                      )}
                    </div>
                  </div>
                </div>

                {filteredQuestions.length > questionsPerPage && (
                  <div className="mt-6 flex justify-between items-center">
                    <button
                      onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
                      disabled={currentPage === 1 || isLoading}
                      className="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition-colors duration-200 disabled:opacity-50 sm:text-sm"
                    >
                      Previous
                    </button>
                    <span className="text-sm text-gray-700 sm:text-xs">
                      Page {currentPage} of {totalPages || 1}
                    </span>
                    <button
                      onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}
                      disabled={currentPage === totalPages || isLoading}
                      className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors duration-200 disabled:opacity-50 sm:text-sm"
                    >
                      Next
                    </button>
                  </div>
                )}

                <div className="mt-6 flex justify-end space-x-3">
                  <button
                    onClick={closeQuestionModal}
                    className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors duration-150 disabled:opacity-50 sm:text-sm"
                    disabled={isLoading}
                  >
                    Cancel
                  </button>
                  <button
                    onClick={handleSaveQuestions}
                    className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors duration-200 disabled:opacity-50 sm:text-sm"
                    disabled={isLoading}
                  >
                    {isLoading ? 'Saving...' : 'Save Questions'}
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {isViewQuestionsModalOpen && selectedExam && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] overflow-y-auto">
              <div className="p-6">
                <div className="flex justify-between items-start mb-4">
                  <div>
                    <h3 className="text-xl font-bold text-gray-800 sm:text-lg">
                      Questions for {selectedExam.name}
                    </h3>
                    <p className="text-sm text-gray-600 sm:text-sm">
                      {questions.length} question(s)
                    </p>
                  </div>
                  <button
                    onClick={closeViewQuestionsModal}
                    className="text-gray-500 hover:text-gray-700"
                    disabled={isLoading}
                  >
                    <X size={24} />
                  </button>
                </div>

                {error && (
                  <div className="mb-4 p-3 bg-red-100 border-l-4 border-red-500 text-red-700">
                    <p>{error}</p>
                  </div>
                )}

                <div className="space-y-4">
                  {questions.length > 0 ? (
                    questions.map((question) => (
                      <div key={question.$id} className="p-4 border border-gray-200 rounded-lg bg-white">
                        <div className="flex justify-between items-start">
                          <div>
                            <h4 className="font-medium text-gray-800 sm:text-sm">
                              Question {question.order || 'N/A'} (Marks: {question.marks || 'N/A'})
                            </h4>
                            <p className="text-sm text-gray-700 mt-1 sm:text-sm">{question.text}</p>
                          </div>
                          <div className="flex items-center space-x-2">
                            <span className={`px-2 py-1 rounded-full text-sm sm:text-xs ${
                              question.difficulty === "easy" 
                                ? "bg-green-100 text-green-800" 
                                : question.difficulty === "medium"
                                ? "bg-yellow-100 text-yellow-800"
                                : "bg-red-100 text-red-800"
                            }`}>
                              {question.difficulty || "N/A"}
                            </span>
                          </div>
                        </div>
                        <div className="mt-1 text-sm text-gray-600 sm:text-xs">
                          <span className="mr-2">ID: {question.question_id || "N/A"}</span>
                          <span>Type: {question.type || "N/A"}</span>
                          {question.tags && question.tags.length > 0 && (
                            <div className="mt-1 flex flex-wrap gap-1">
                              {question.tags.map(tag => (
                                <span key={tag} className="px-2 py-0.5 bg-gray-100 text-gray-700 rounded-full text-xs sm:text-xs">
                                  {tag}
                                </span>
                              ))}
                            </div>
                          )}
                        </div>
                        {question.options_text && (
                          <div className="mt-3 grid grid-cols-1 sm:grid-cols-2 gap-2">
                            {question.options_text.map((option, index) => (
                              <div 
                                key={index} 
                                className={`text-sm p-2 rounded ${
                                  question.correct_answer === index 
                                    ? "bg-green-100 text-green-800" 
                                    : "bg-gray-100 text-gray-800"
                                }`}
                              >
                                {option}
                              </div>
                            ))}
                          </div>
                        )}
                      </div>
                    ))
                  ) : (
                    <div className="text-center py-8 text-gray-500">
                      No questions found for this exam
                    </div>
                  )}
                </div>

                <div className="mt-6 flex justify-end">
                  <button
                    onClick={closeViewQuestionsModal}
                    className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors duration-200 sm:text-sm"
                    disabled={isLoading}
                  >
                    Close
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {selectedExamDetail && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] overflow-y-auto">
              <div className="p-6">
                <div className="flex justify-between items-start mb-4">
                  <div>
                    <h3 className="text-xl font-bold text-gray-800 sm:text-lg">{selectedExamDetail.name}</h3>
                    <p className="text-sm text-gray-600 sm:text-xs">{selectedExamDetail.exam_id}</p>
                  </div>
                  <div className="flex items-center space-x-3 gap-2 sm:gap-2">
                    <span className={`px-2 py-1 rounded-full text-sm font-semibold sm:text-xs ${
                      selectedExamDetail.status === "active" 
                        ? "bg-blue-100 text-blue-800" 
                        : selectedExamDetail.status === "completed"
                        ? "bg-green-100 text-green-800"
                        : "bg-gray-100 text-gray-800"
                    }`}>
                      {selectedExamDetail.status}
                    </span>
                    <span className={`px-2 py-1 rounded-full text-sm font-semibold sm:text-xs ${
                      getExamStatus(selectedExamDetail.exam_date) === "Expired" 
                        ? "bg-red-100 text-red-800" 
                        : "bg-green-100 text-green-800"
                    }`}>
                      {getExamStatus(selectedExamDetail.exam_date)}
                    </span>
                    <button
                      onClick={closeExamDetails}
                      className="text-gray-500 hover:text-gray-700"
                    >
                      <X size={24} />
                    </button>
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-4">
                  <div>
                    <label className="block text-sm font-semibold text-gray-700">Exam Date:</label>
                    <p className="mt-1 text-sm text-gray-800 sm:mt-0.5">{formatDate(selectedExamDetail.exam_date)}</p>
                  </div>
                  <div>
                    <label className="block text-sm font-semibold text-gray-700">Duration:</label>
                    <p className="mt-1 text-sm text-gray-800 sm:mt-0.5">{formatDuration(selectedExamDetail.duration)}</p>
                  </div>
                  <div className="md:col-span-2">
                    <label className="block text-sm font-semibold text-gray-700">Description:</label>
                    <p className="mt-1 text-sm text-gray-800 sm:mt-0.5 whitespace-pre-line">
                      {selectedExamDetail.description || "No description provided"}
                    </p>
                  </div>
                  <div>
                    <label className="block text-sm font-semibold text-gray-700">Created By:</label>
                    <p className="mt-1 text-sm text-gray-800 sm:mt-0.5">{selectedExamDetail.created_by || "Unknown"}</p>
                  </div>
                  <div>
                    <label className="block text-sm font-semibold text-gray-700">Last Modified:</label>
                    <p className="mt-1 text-sm text-gray-800 sm:mt-0.5">{formatDate(selectedExamDetail.modified_at)}</p>
                  </div>
                  <div className="md:col-span-2">
                    <label className="block text-sm font-semibold text-gray-700">Document ID:</label>
                    <p className="mt-1 text-sm text-gray-800 sm:mt-0.5 text-xs sm:text-sm break-all">{selectedExamDetail.$id}</p>
                  </div>
                </div>

                <div className="mt-6 flex justify-end space-x-2 sm:space-x-2">
                  <button
                    onClick={() => openModal(selectedExamDetail)}
                    className="bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600 transition-colors duration-200 sm:p-1.5"
                    disabled={isLoading}
                    title="Edit Exam"
                  >
                    <Edit size={16} className="w-4 h-4" />
                  </button>
                  <button
                    onClick={() => deleteExam(selectedExamDetail.$id)}
                    className="bg-red-500 text-white p-2 rounded-md hover:bg-red-600 transition-colors duration-200 sm:p-1.5"
                    disabled={isLoading}
                    title="Delete Exam"
                  >
                    <Trash2 size={16} className="w-4 h-4" />
                  </button>
                  <button
                    onClick={() => openViewQuestionsModal(selectedExamDetail)}
                    className="bg-green-500 text-white p-2 rounded-md hover:bg-green-600 transition-colors duration-200 sm:p-1.5"
                    disabled={isLoading}
                    title="View Questions"
                  >
                    <Eye size={16} className="w-4 h-4" />
                  </button>
                  <button
                    onClick={closeExamDetails}
                    className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors duration-200 sm:text-sm sm:px-2 sm:p-1.5"
                  >
                    Close
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ExamsPage;-e [1;34m===== ./pages/_app.js =====[0m
import "../styles/globals.css";
import { useRouter } from "next/router";
import AdminLayout from "../components/AdminLayout";
import StudentLayout from "../components/StudentLayout";
import Navbar from "../components/Navbar";
import { useState } from "react";

function MyApp({ Component, pageProps }) {
  const router = useRouter();
  const [sidebarOpen, setSidebarOpen] = useState(false);

  const isAdminRoute = router.pathname.startsWith("/admin");
  const isStudentRoute = router.pathname.startsWith("/student");

  const toggleSidebar = () => {
    setSidebarOpen(!sidebarOpen);
  };

  if (isAdminRoute) {
    return (
      <div className="flex flex-col min-h-screen">
        <Navbar isAdmin={true} toggleSidebar={toggleSidebar} />
        <div className="flex flex-1 pt-16"> {/* Added pt-16 to account for navbar */}
          <AdminLayout sidebarOpen={sidebarOpen} toggleSidebar={toggleSidebar}>
            <Component {...pageProps} />
          </AdminLayout>
        </div>
      </div>
    );
  }

  if (isStudentRoute) {
    return (
      <div className="flex flex-col min-h-screen">
        <Navbar isAdmin={false} toggleSidebar={toggleSidebar} />
        <div className="flex flex-1 pt-16"> {/* Added pt-16 to account for navbar */}
          <StudentLayout sidebarOpen={sidebarOpen} toggleSidebar={toggleSidebar}>
            <Component {...pageProps} />
          </StudentLayout>
        </div>
      </div>
    );
  }

  return <Component {...pageProps} />;
}

export default MyApp;-e [1;34m===== ./pages/404.js =====[0m
import React from 'react';
import { useRouter } from 'next/router'; // For navigation
import { motion } from 'framer-motion';
import { Home, ArrowLeft } from 'lucide-react'; // Icons for navigation

const NotFound = () => {
  const router = useRouter();

  // Get the user role from the query parameter (e.g., ?role=admin or ?role=student)
  const { role } = router.query;

  // Handle redirection based on the user's role
  const handleGoHome = () => {
    if (role === 'admin') {
      router.push('/admin/dashboard'); // Redirect to admin dashboard
    } else if (role === 'student') {
      router.push('/student/dashboard'); // Redirect to student dashboard
    } else {
      router.push('/'); // Default fallback to home
    }
  };

  const handleGoBack = () => router.back(); // Go back to the previous page

  return (
    <motion.div
      className="min-h-screen flex flex-col items-center justify-center p-6 bg-gray-50"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
    >
      <motion.div
        className="bg-white rounded-xl p-8 shadow-lg text-center max-w-md w-full"
        initial={{ y: -20, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ duration: 0.5, delay: 0.2 }}
      >
        <h1 className="text-4xl font-bold text-gray-800 mb-4">404</h1>
        <p className="text-gray-600 mb-6">
          Oops! The page you're looking for doesn't exist.
        </p>

        <div className="flex flex-col gap-4">
          <motion.button
            onClick={handleGoHome}
            className="flex items-center justify-center gap-2 bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors w-full"
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            <Home size={18} />
            Go to Dashboard
          </motion.button>

          <motion.button
            onClick={handleGoBack}
            className="flex items-center justify-center gap-2 bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 transition-colors w-full"
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            <ArrowLeft size={18} />
            Go Back
          </motion.button>
        </div>
      </motion.div>
    </motion.div>
  );
};

export default NotFound;-e [1;34m===== ./pages/login.jsx =====[0m
import React, { useState } from "react";
import { motion } from "framer-motion";
import { User, Lock, LogIn } from "lucide-react";
import { useRouter } from "next/router";
import { loginAdmin, loginStudent } from "../utils/auth";

const Login = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [role, setRole] = useState("admin");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const router = useRouter();

  const handleLogin = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError("");

    try {
      if (role === "admin") {
        await loginAdmin(email, password);
        router.push("/admin");
      } else {
        const studentSession = await loginStudent(email, password);
        localStorage.setItem('studentSession', JSON.stringify(studentSession));
        router.push("/student");
      }
    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900 p-4">
      <motion.div
        className="relative bg-white dark:bg-gray-800 bg-opacity-80 dark:bg-opacity-80 backdrop-blur-lg rounded-2xl shadow-xl p-8 w-full max-w-md"
        initial={{ scale: 0.9, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        transition={{ duration: 0.4 }}
      >
        {/* Header */}
        <div className="text-center mb-8">
          <h2 className="text-3xl font-bold text-gray-800 dark:text-white">
            {role === "admin" ? "Admin Login" : "Student Login"}
          </h2>
          <p className="text-gray-500 dark:text-gray-400 mt-2">
            Sign in to your {role} dashboard
          </p>
        </div>

        {/* Role Toggle */}
        <div className="flex justify-center mb-8">
          <div className="relative inline-flex items-center bg-gray-200 dark:bg-gray-700 rounded-full p-1">
            <button
              className={`px-4 py-2 rounded-full text-sm font-medium transition-all duration-300 ${
                role === "admin"
                  ? "bg-blue-600 text-white"
                  : "text-gray-600 dark:text-gray-300"
              }`}
              onClick={() => setRole("admin")}
            >
              Admin
            </button>
            <button
              className={`px-4 py-2 rounded-full text-sm font-medium transition-all duration-300 ${
                role === "student"
                  ? "bg-blue-600 text-white"
                  : "text-gray-600 dark:text-gray-300"
              }`}
              onClick={() => setRole("student")}
            >
              Student
            </button>
          </div>
        </div>

        {/* Error Message */}
        {error && (
          <motion.div
            className="mb-6 p-4 bg-red-100 dark:bg-red-900/50 text-red-700 dark:text-red-300 rounded-lg flex items-center gap-2"
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3 }}
          >
            <svg
              className="w-5 h-5"
              fill="none"
              stroke="currentColor"
              AscendingIcon
              strokeLinecap="round"
              strokeLinejoin="round"
            >
              <path d="M10 3v2m6.586-1.586a2 2 0 112.828 2.828l-5.586 5.586a2 2 0 01-2.828 0L4.757 7.757a2 2 0 010-2.828l5.586-5.586a2 2 0 012.828 0z" />
            </svg>
            {error}
          </motion.div>
        )}

        {/* Form */}
        <form onSubmit={handleLogin} className="space-y-6">
          {/* Email Input */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Email
            </label>
            <div className="relative">
              <input
                type="email"
                className="w-full px-4 py-3 pl-10 bg-gray-50 dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-800 dark:text-gray-200 transition-colors duration-200"
                placeholder="Enter your email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
              />
              <User
                size={18}
                className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"
              />
            </div>
          </div>

          {/* Password Input */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Password
            </label>
            <div className="relative">
              <input
                type="password"
                className="w-full px-4 py-3 pl-10 bg-gray-50 dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-800 dark:text-gray-200 transition-colors duration-200"
                placeholder="Enter your password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
              />
              <Lock
                size={18}
                className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"
              />
            </div>
          </div>

          {/* Submit Button */}
          <motion.button
            type="submit"
            className="w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 flex items-center justify-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200"
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            disabled={loading}
          >
            {loading ? (
              <>
                <svg
                  className="animate-spin h-5 w-5 text-white"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                >
                  <circle
                    className="opacity-25"
                    cx="12"
                    cy="12"
                    r="10"
                    stroke="currentColor"
                    strokeWidth="4"
                  ></circle>
                  <path
                    className="opacity-75"
                    fill="currentColor"
                    d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                  ></path>
                </svg>
                Signing In...
              </>
            ) : (
              <>
                <LogIn size={18} />
                Sign In
              </>
            )}
          </motion.button>
        </form>
      </motion.div>
    </div>
  );
};

export default Login;-e [1;34m===== ./pages/index.jsx =====[0m
import React from 'react';
import Head from 'next/head';
import Link from 'next/link';
import { motion } from 'framer-motion';
import { GraduationCap, FileText, Award, Bell } from 'lucide-react';

const HomePage = () => {
  // Animation variants for staggered entrance
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.2,
      },
    },
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.5 } },
  };

  // Fallback handler for logo loading errors
  const handleImageError = (e) => {
    e.target.src = '/fallback-logo.png'; // Fallback image (place in public folder)
    e.target.alt = 'NIELIT Tezpur EC Fallback Logo';
  };

  return (
    <>
      <Head>
        <title>NIELIT Tezpur EC - Online Exam System</title>
        <meta name="description" content="Empowering education with the NIELIT Tezpur EC Online Exam System. Access exams, view results, and manage your academic journey seamlessly." />
        <link rel="icon" href="https://mimitmalout.ac.in/NIELIT.png" />
      </Head>

      <div className="min-h-screen bg-gray-50">
        {/* Header */}
        <header className="w-full bg-[#f8fafc] border-b border-[#e2e8f0] py-4 fixed top-0 z-50">
          <div className="container mx-auto px-4 sm:px-6 lg:px-8 flex items-center justify-between">
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.5 }}
              className="flex items-center space-x-3"
            >
              <Link href="https://www.nielit.gov.in/tezpur/" target="_blank" rel="noopener noreferrer">
                <img
                  src="https://mimitmalout.ac.in/NIELIT.png"
                  alt="NIELIT Tezpur EC Logo"
                  className="h-12 w-12"
                  onError={handleImageError}
                />
              </Link>
              <h1 className="text-xl sm:text-2xl font-bold text-[#1e293b]">
                NIELIT Tezpur EC Exam Portal
              </h1>
            </motion.div>
            <motion.div
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.5 }}
            >
              <Link href="/login">
                <button className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors text-sm font-medium sm:text-base">
                  Login
                </button>
              </Link>
            </motion.div>
          </div>
        </header>

        {/* Hero Section */}
        <section className="pt-24 pb-12 bg-gradient-to-b from-blue-50 to-gray-50">
          <div className="container mx-auto px-4 sm:px-6 lg:px-8 text-center">
            <motion.h2
              variants={itemVariants}
              initial="hidden"
              animate="visible"
              className="text-3xl sm:text-4xl lg:text-5xl font-bold text-gray-800 mb-6"
            >
              Welcome to NIELIT Tezpur EC Online Exam System
            </motion.h2>
            <motion.p
              variants={itemVariants}
              initial="hidden"
              animate="visible"
              className="text-lg sm:text-xl text-gray-600 max-w-3xl mx-auto mb-8"
            >
              A secure and user-friendly platform designed by NIELIT Tezpur EC to manage exams, track results, and empower students and administrators.
            </motion.p>
            <motion.div
              variants={itemVariants}
              initial="hidden"
              animate="visible"
              className="flex justify-center space-x-4"
            >
              <Link href="/login">
                <button className="px-6 py-3 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors text-lg font-medium">
                  Get Started
                </button>
              </Link>
              <Link href="#features">
                <button className="px-6 py-3 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors text-lg font-medium">
                  Learn More
                </button>
              </Link>
            </motion.div>
          </div>
        </section>

        {/* Features Section */}
        <section id="features" className="py-12 bg-white">
          <div className="container mx-auto px-4 sm:px-6 lg:px-8">
            <motion.h2
              variants={itemVariants}
              initial="hidden"
              animate="visible"
              className="text-3xl font-bold text-gray-800 text-center mb-10"
            >
              Why Choose Our Platform?
            </motion.h2>
            <motion.div
              variants={containerVariants}
              initial="hidden"
              animate="visible"
              className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6"
            >
              <motion.div
                variants={itemVariants}
                className="p-6 bg-gray-50 rounded-lg shadow hover:shadow-md transition-shadow"
              >
                <GraduationCap size={40} className="text-blue-600 mb-4 mx-auto" />
                <h3 className="text-xl font-semibold text-gray-800 text-center">Easy Exam Access</h3>
                <p className="mt-2 text-gray-600 text-center">
                  Students can view and take exams effortlessly with real-time status updates.
                </p>
              </motion.div>
              <motion.div
                variants={itemVariants}
                className="p-6 bg-gray-50 rounded-lg shadow hover:shadow-md transition-shadow"
              >
                <FileText size={40} className="text-blue-600 mb-4 mx-auto" />
                <h3 className="text-xl font-semibold text-gray-800 text-center">Detailed Results</h3>
                <p className="mt-2 text-gray-600 text-center">
                  Access comprehensive result analytics with question-by-question breakdowns.
                </p>
              </motion.div>
              <motion.div
                variants={itemVariants}
                className="p-6 bg-gray-50 rounded-lg shadow hover:shadow-md transition-shadow"
              >
                <Award size={40} className="text-blue-600 mb-4 mx-auto" />
                <h3 className="text-xl font-semibold text-gray-800 text-center">Certificates</h3>
                <p className="mt-2 text-gray-600 text-center">
                  Earn and download certificates upon successful exam completion.
                </p>
              </motion.div>
              <motion.div
                variants={itemVariants}
                className="p-6 bg-gray-50 rounded-lg shadow hover:shadow-md transition-shadow"
              >
                <Bell size={40} className="text-blue-600 mb-4 mx-auto" />
                <h3 className="text-xl font-semibold text-gray-800 text-center">Real-Time Notifications</h3>
                <p className="mt-2 text-gray-600 text-center">
                  Stay updated with instant notifications for exam schedules and results.
                </p>
              </motion.div>
            </motion.div>
          </div>
        </section>

        {/* About Section */}
        <section id="about" className="py-12 bg-gray-50">
          <div className="container mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex flex-col lg:flex-row items-center gap-8">
              <motion.div
                variants={itemVariants}
                initial="hidden"
                animate="visible"
                className="lg:w-1/2"
              >
                <Link href="https://www.nielit.gov.in/tezpur/" target="_blank" rel="noopener noreferrer">
                  <img
                    src="https://mimitmalout.ac.in/NIELIT.png"
                    alt="NIELIT Tezpur EC"
                    className="w-48 h-48 mx-auto lg:mx-0"
                    onError={handleImageError}
                  />
                </Link>
              </motion.div>
              <motion.div
                variants={containerVariants}
                initial="hidden"
                animate="visible"
                className="lg:w-1/2"
              >
                <motion.h2
                  variants={itemVariants}
                  className="text-3xl font-bold text-gray-800 mb-4"
                >
                  About NIELIT Tezpur EC
                </motion.h2>
                <motion.p
                  variants={itemVariants}
                  className="text-gray-600 mb-4"
                >
                  The National Institute of Electronics & Information Technology (NIELIT) Tezpur Extension Centre is committed to advancing technical education through innovative solutions. Our Online Exam System provides a secure, efficient platform for conducting exams, managing student records, and delivering results.
                </motion.p>
                <motion.p
                  variants={itemVariants}
                  className="text-gray-600 mb-6"
                >
                  Explore our programs and initiatives at the official NIELIT Tezpur EC website.
                </motion.p>
                <motion.div variants={itemVariants}>
                  <Link href="https://www.nielit.gov.in/tezpur/" target="_blank" rel="noopener noreferrer">
                    <button className="px-6 py-3 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors text-lg font-medium">
                      Visit NIELIT Tezpur EC
                    </button>
                  </Link>
                </motion.div>
              </motion.div>
            </div>
          </div>
        </section>

        {/* Call-to-Action Section */}
        <section className="py-12 bg-blue-600 text-white">
          <div className="container mx-auto px-4 sm:px-6 lg:px-8 text-center">
            <motion.h2
              variants={itemVariants}
              initial="hidden"
              animate="visible"
              className="text-3xl font-bold mb-4"
            >
              Ready to Begin?
            </motion.h2>
            <motion.p
              variants={itemVariants}
              initial="hidden"
              animate="visible"
              className="text-lg max-w-2xl mx-auto mb-6"
            >
              Join the NIELIT Tezpur EC community. Login now to access your exams and dashboard.
            </motion.p>
            <motion.div
              variants={itemVariants}
              initial="hidden"
              animate="visible"
            >
              <Link href="/login">
                <button className="px-6 py-3 bg-white text-blue-600 rounded-md hover:bg-gray-100 transition-colors text-lg font-medium">
                  Login Now
                </button>
              </Link>
            </motion.div>
          </div>
        </section>

        {/* Footer */}
        <footer className="w-full py-6 bg-[#f8fafc] border-t border-[#e2e8f0]">
          <div className="container mx-auto px-4 sm:px-6 lg:px-8 text-center">
            <motion.div
              variants={itemVariants}
              initial="hidden"
              animate="visible"
            >
              <p className="text-gray-600 text-sm mb-2">
                ¬© {new Date().getFullYear()} NIELIT Tezpur EC. All rights reserved.
              </p>
              <div className="flex justify-center space-x-4 text-sm text-gray-500 mb-2">
                <Link href="/about" className="hover:text-blue-600">
                  About
                </Link>
                <Link href="/contact" className="hover:text-blue-600">
                  Contact
                </Link>
                <Link href="/privacy" className="hover:text-blue-600">
                  Privacy Policy
                </Link>
                <Link href="https://www.nielit.gov.in/tezpur/" target="_blank" rel="noopener noreferrer" className="hover:text-blue-600">
                  NIELIT Tezpur EC
                </Link>
              </div>
            </motion.div>
          </div>
        </footer>
      </div>
    </>
  );
};

export default HomePage;-e [1;34m===== ./pages/student/results/[id].jsx =====[0m
import React, { useState, useEffect } from 'react';
import { databases, storage, Query } from '../../../utils/appwrite';
import { getCurrentStudentSession } from '../../../utils/auth';
import { useRouter } from 'next/router';

const BUCKET_ID = 'questions';
const QUERY_TIMEOUT = 10000; // 10 seconds timeout for queries

const ExamResponsesPage = () => {
  const [responses, setResponses] = useState([]);
  const [questions, setQuestions] = useState([]);
  const [exam, setExam] = useState(null);
  const [result, setResult] = useState(null);
  const [studentInfo, setStudentInfo] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [examQuestions, setExamQuestions] = useState([]);
  const [calculatedResult, setCalculatedResult] = useState(null);
  const router = useRouter();
  const { id: examIdRaw } = router.query;

  // Normalize examId to ensure it's a valid string
  const examId = examIdRaw && typeof examIdRaw === 'string' && examIdRaw !== '[object Object]'
    ? examIdRaw
    : null;

  const databaseId = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;
  const studentsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_STUDENTS_COLLECTION_ID;
  const examsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_EXAMS_COLLECTION_ID;
  const examQuestionsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_EXAM_QUESTIONS_COLLECTION_ID;
  const questionsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_QUESTIONS_COLLECTION_ID;
  const responsesCollectionId = process.env.NEXT_PUBLIC_APPWRITE_RESPONSES_COLLECTION_ID;
  const resultsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_RESULTS_COLLECTION_ID;

  // Helper to resolve relationship IDs
  const resolveRelationshipId = (field) => {
    if (!field) return null;
    if (typeof field === 'object' && field?.$id) return field.$id;
    if (Array.isArray(field) && field.length > 0) return field[0]?.$id || field[0];
    if (typeof field === 'string') return field;
    console.warn('Unexpected relationship field format:', field);
    return null;
  };

  // Fetch image URL from Appwrite storage
  const getFileUrl = async (fileId) => {
    try {
      return storage.getFileView(BUCKET_ID, fileId);
    } catch (error) {
      console.error('Error fetching image:', error.message);
      return null;
    }
  };

  // Fetch question order from exam_questions
  const getQuestionOrder = (questionId) => {
    const mapping = examQuestions.find(eq => {
      const qRef = eq.question_id;
      const refId = resolveRelationshipId(qRef);
      return refId === questionId;
    });
    return mapping?.order || 'N/A';
  };

  // Fetch question marks from exam_questions
  const getQuestionMarks = (questionId) => {
    const mapping = examQuestions.find(eq => {
      const qRef = eq.question_id;
      const refId = resolveRelationshipId(qRef);
      return refId === questionId;
    });
    return mapping?.marks || 0;
  };

  // Format date for display
  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
      });
    } catch (err) {
      console.error('Error formatting date:', dateString, err);
      return 'Invalid Date';
    }
  };

  // Format duration for display
  const formatDuration = (minutes) => {
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    return hours > 0 ? `${hours}h ${mins}m` : `${mins}m`;
  };

  // Calculate result based on responses and questions
  const calculateResult = () => {
    let score = 0;
    let totalMarks = 0;

    // Calculate total possible marks and actual score
    examQuestions.forEach(eq => {
      const questionId = resolveRelationshipId(eq.question_id);
      const marks = parseInt(eq.marks) || 0;
      totalMarks += marks;

      const question = questions.find(q => q.$id === questionId);
      const response = responses.find(r => resolveRelationshipId(r.question_id) === questionId);

      if (question && response) {
        const selectedOption = parseInt(response.selected_option);
        const correctOption = question.correct_answer !== undefined ? parseInt(question.correct_answer) : null;

        if (correctOption !== null && selectedOption === correctOption) {
          score += marks;
        }
      }
    });

    const percentage = totalMarks > 0 ? (score / totalMarks) * 100 : 0;
    const status = result?.status || (percentage >= 30 ? 'passed' : 'failed');

    return {
      score,
      total_marks: totalMarks,
      percentage: parseFloat(percentage.toFixed(1)),
      status,
      time_taken: result?.time_taken || 0,
      attempted_at: result?.attempted_at || new Date().toISOString(),
      completed_at: result?.completed_at || new Date().toISOString()
    };
  };

  // Fetch exam responses and related data
  useEffect(() => {
    let timeoutId;
    const fetchResponseData = async () => {
      // Set timeout to prevent infinite loading
      timeoutId = setTimeout(() => {
        setError('Request timed out. Please check your network or try again.');
        setLoading(false);
        router.push('/student/exams');
      }, QUERY_TIMEOUT);

      // Validate examId
      if (!examId) {
        clearTimeout(timeoutId);
        setError('Invalid exam ID. Please select an exam from the results list.');
        setLoading(false);
        return;
      }

      // Validate environment variables
      if (
        !databaseId ||
        !studentsCollectionId ||
        !examsCollectionId ||
        !examQuestionsCollectionId ||
        !questionsCollectionId ||
        !responsesCollectionId ||
        !resultsCollectionId
      ) {
        clearTimeout(timeoutId);
        setError('System configuration error. Please contact your administrator.');
        setLoading(false);
        return;
      }

      try {
        // Validate session
        const session = await getCurrentStudentSession();
        if (!session?.email) {
          clearTimeout(timeoutId);
          console.warn('No valid session found, redirecting to login');
          router.push('/login');
          return;
        }

        // Query 1: Fetch student by email
        const studentResponse = await databases.listDocuments(
          databaseId,
          studentsCollectionId,
          [Query.equal('email', session.email)]
        );

        if (studentResponse.total === 0) {
          throw new Error('Student record not found');
        }

        const student = studentResponse.documents[0];
        setStudentInfo({
          name: student.name,
          email: student.email,
          studentId: student.$id,
        });

        // Query 2: Fetch exam details
        const examResponse = await databases.listDocuments(
          databaseId,
          examsCollectionId,
          [Query.equal('$id', examId)]
        );

        if (examResponse.total === 0) {
          throw new Error(`Exam with ID ${examId} not found. Please check if the exam exists.`);
        }

        setExam(examResponse.documents[0]);

        // Query 3: Fetch exam questions
        const examQuestionsResponse = await databases.listDocuments(
          databaseId,
          examQuestionsCollectionId,
          [Query.orderAsc('order')]
        );

        const filteredExamQuestions = examQuestionsResponse.documents.filter(doc => {
          const examRef = doc.exam_id;
          const refId = resolveRelationshipId(examRef);
          return refId === examId;
        });

        setExamQuestions(filteredExamQuestions);

        // Query 4: Fetch student responses
        const responsesResponse = await databases.listDocuments(
          databaseId,
          responsesCollectionId,
          [
            Query.equal('student_id', student.$id),
            Query.equal('exam_id', examId),
          ]
        );

        setResponses(responsesResponse.documents);

        // Query 5: Fetch questions
        const questionIds = responsesResponse.documents
          .map((res) => resolveRelationshipId(res.question_id))
          .filter((id) => id);

        if (questionIds.length > 0) {
          const questionsResponse = await databases.listDocuments(
            databaseId,
            questionsCollectionId,
            [Query.contains('$id', questionIds), Query.limit(100)]
          );

          const updatedQuestions = await Promise.all(
            questionsResponse.documents.map(async (q) => ({
              ...q,
              imageUrl: q.image_id ? await getFileUrl(q.image_id) : null,
              optionsImageUrls: await Promise.all(
                (q.options_image || []).map(async (imgId) => (imgId ? await getFileUrl(imgId) : null))
              ),
            }))
          );

          setQuestions(updatedQuestions);
        }

        // Query 6: Fetch result from database
        const resultResponse = await databases.listDocuments(
          databaseId,
          resultsCollectionId,
          [
            Query.equal('student_id', student.$id),
            Query.equal('exam_id', examId),
          ]
        );

        if (resultResponse.total > 0) {
          setResult(resultResponse.documents[0]);
        } else {
          console.warn('No result found for student_id:', student.$id, 'and exam_id:', examId);
          setResult(null);
        }

        clearTimeout(timeoutId);
      } catch (err) {
        clearTimeout(timeoutId);
        console.error('Error in fetchResponseData:', {
          message: err.message,
          stack: err.stack,
          timestamp: new Date().toISOString(),
        });
        setError(err.message || 'Failed to load responses. Please try again later.');
      } finally {
        setLoading(false);
      }
    };

    fetchResponseData();
  }, [examId, router]);

  // Calculate the result whenever questions, responses, or examQuestions change
  useEffect(() => {
    if (questions.length > 0 && responses.length > 0 && examQuestions.length > 0) {
      const calculated = calculateResult();
      setCalculatedResult(calculated);
    }
  }, [questions, responses, examQuestions, result]);

  if (loading) {
    return (
      <div className="container mx-auto px-4 py-6">
        <div className="flex justify-center items-center h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
          <span className="ml-3 text-gray-600">Loading responses...</span>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container mx-auto px-4 py-6">
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded">
          <p className="font-medium">Error loading responses:</p>
          <p className="mt-1">{error}</p>
          <p className="mt-1 text-sm">If this is a permissions issue, please contact your administrator.</p>
          <button
            onClick={() => router.push('/student/exams')}
            className="mt-3 text-sm bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded"
          >
            Return to Exams
          </button>
        </div>
      </div>
    );
  }

  if (!exam) {
    return (
      <div className="container mx-auto px-4 py-6">
        <div className="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 rounded">
          <p>Exam details not found.</p>
          <button
            onClick={() => router.push('/student/exams')}
            className="mt-3 text-sm bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded"
          >
            Return to Exams
          </button>
        </div>
      </div>
    );
  }

  // Use calculated result if available, otherwise fall back to stored result
  const displayResult = calculatedResult || result;

  return (
    <div className="container mx-auto px-4 py-6 select-none">
      {/* Header */}
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-2xl font-bold text-gray-800">{exam.name} - Responses</h1>
          <p className="text-sm text-gray-600">
            {studentInfo && `Student: ${studentInfo.name} (${studentInfo.email})`}
          </p>
        </div>
        <button
          onClick={() => router.push('/student/exams')}
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
        >
          Back to Exams
        </button>
      </div>

      {/* Result Summary */}
      <div className="bg-white p-6 rounded-lg shadow mb-6">
        <h2 className="text-lg font-semibold mb-4">Result Summary</h2>
        {displayResult ? (
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="p-4 bg-blue-50 rounded-lg">
              <p className="text-sm text-gray-600">Score</p>
              <p className="text-lg font-semibold">{displayResult.score}/{displayResult.total_marks}</p>
            </div>
            <div className="p-4 bg-green-50 rounded-lg">
              <p className="text-sm text-gray-600">Percentage</p>
              <p className="text-lg font-semibold">{displayResult.percentage}%</p>
            </div>
            <div className={`p-4 rounded-lg ${
              displayResult.status === 'passed' ? 'bg-green-50' : 'bg-red-50'
            }`}>
              <p className="text-sm text-gray-600">Status</p>
              <p className="text-lg font-semibold capitalize">{displayResult.status}</p>
            </div>
            <div className="p-4 bg-purple-50 rounded-lg">
              <p className="text-sm text-gray-600">Time Taken</p>
              <p className="text-lg font-semibold">{formatDuration(displayResult.time_taken)}</p>
            </div>
            <div className="p-4 bg-gray-50 rounded-lg">
              <p className="text-sm text-gray-600">Attempted At</p>
              <p className="text-lg font-semibold">
                {formatDate(displayResult.attempted_at)}
              </p>
            </div>
            <div className="p-4 bg-gray-50 rounded-lg">
              <p className="text-sm text-gray-600">Completed At</p>
              <p className="text-lg font-semibold">
                {formatDate(displayResult.completed_at)}
              </p>
            </div>
          </div>
        ) : (
          <div className="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 rounded">
            <p>No result found for this exam. Please contact your administrator.</p>
          </div>
        )}
      </div>

      {/* Responses */}
      <div className="bg-white p-6 rounded-lg shadow">
        <h2 className="text-lg font-semibold mb-4">Your Responses</h2>
        {responses.length === 0 ? (
          <div className="text-center py-8">
            <p className="text-gray-600">No responses found for this exam.</p>
          </div>
        ) : (
          <div className="space-y-6">
            {responses.map((response) => {
              const questionId = resolveRelationshipId(response.question_id);
              const question = questions.find((q) => q.$id === questionId);
              if (!question) {
                return (
                  <div key={response.$id} className="border border-gray-200 rounded-lg p-4">
                    <p className="text-gray-600">Question data not found for response {response.$id}</p>
                  </div>
                );
              }

              const isCorrect = parseInt(response.selected_option) === parseInt(question.correct_answer);
              const questionMarks = getQuestionMarks(questionId);
              const questionOrder = getQuestionOrder(questionId);

              return (
                <div key={response.$id} className="border border-gray-200 rounded-lg p-4">
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <h3 className="font-medium text-lg">
                        Question {questionOrder} (Marks: {questionMarks})
                      </h3>
                      {question.text && (
                        <p className="text-gray-700 mt-2">{question.text}</p>
                      )}
                      {question.imageUrl && (
                        <img
                          src={question.imageUrl}
                          alt="Question"
                          className="mt-3 max-h-80 w-full object-contain border rounded-lg"
                        />
                      )}
                      <div className="mt-2 flex flex-wrap gap-2">
                        {question.difficulty && (
                          <span className="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs">
                            Difficulty: {question.difficulty}
                          </span>
                        )}
                        {question.tags && Array.isArray(question.tags) && question.tags.map((tag, index) => (
                          <span key={index} className="px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs">
                            Tag: {tag}
                          </span>
                        ))}
                      </div>
                    </div>
                    <div className="flex flex-col items-end space-y-1">
                      <span className="px-2 py-1 bg-gray-100 text-gray-800 rounded-full text-xs">
                        ID: {question.$id}
                      </span>
                      {question.question_id && (
                        <span className="px-2 py-1 bg-yellow-100 text-yellow-800 rounded-full text-xs">
                          Question ID: {question.question_id}
                        </span>
                      )}
                      <span
                        className={`px-2 py-1 rounded-full text-xs ${
                          isCorrect
                            ? 'bg-green-100 text-green-800'
                            : 'bg-red-100 text-red-800'
                        }`}
                      >
                        {isCorrect ? 'Correct' : 'Incorrect'}
                      </span>
                      {isCorrect && (
                        <span className="px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs">
                          +{questionMarks} marks
                        </span>
                      )}
                    </div>
                  </div>
                  <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                    {question.options_text.map((option, optIndex) => {
                      const isSelected = parseInt(response.selected_option) === optIndex;
                      const isCorrectOption = parseInt(question.correct_answer) === optIndex;
                      return (
                        <div
                          key={optIndex}
                          className={`p-3 border rounded-lg ${
                            isSelected && isCorrectOption
                              ? 'border-green-500 bg-green-50'
                              : isSelected
                              ? 'border-red-500 bg-red-50'
                              : isCorrectOption
                              ? 'border-green-500 bg-green-50'
                              : 'border-gray-200'
                          }`}
                        >
                          <div className="flex items-start">
                            <span className="mt-1 h-5 w-5 inline-block mr-2">
                              {isSelected && isCorrectOption && (
                                <svg
                                  className="h-5 w-5 text-green-600"
                                  fill="none"
                                  viewBox="0 0 24 24"
                                  stroke="currentColor"
                                >
                                  <path
                                    strokeLinecap="round"
                                    strokeLinejoin="round"
                                    strokeWidth={2}
                                    d="M5 13l4 4L19 7"
                                  />
                                </svg>
                              )}
                              {isSelected && !isCorrectOption && (
                                <svg
                                  className="h-5 w-5 text-red-600"
                                  fill="none"
                                  viewBox="0 0 24 24"
                                  stroke="currentColor"
                                >
                                  <path
                                    strokeLinecap="round"
                                    strokeLinejoin="round"
                                    strokeWidth={2}
                                    d="M6 18L18 6M6 6l12 12"
                                  />
                                </svg>
                              )}
                              {!isSelected && isCorrectOption && (
                                <svg
                                  className="h-5 w-5 text-green-600"
                                  fill="none"
                                  viewBox="0 0 24 24"
                                  stroke="currentColor"
                                >
                                  <path
                                    strokeLinecap="round"
                                    strokeLinejoin="round"
                                    strokeWidth={2}
                                    d="M5 13l4 4L19 7"
                                  />
                                </svg>
                              )}
                            </span>
                            <div className="flex-1">
                              {option && <p className="text-gray-700">{option}</p>}
                              {question.optionsImageUrls?.[optIndex] && (
                                <img
                                  src={question.optionsImageUrls[optIndex]}
                                  alt={`Option ${optIndex + 1}`}
                                  className="mt-2 max-h-40 w-full object-contain"
                                />
                              )}
                              {isCorrectOption && (
                                <p className="text-sm font-bold text-green-600 mt-1">Correct Answer</p>
                              )}
                              {isSelected && !isCorrectOption && (
                                <p className="text-sm text-red-600 mt-1">Your Answer</p>
                              )}
                            </div>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>
              );
            })}
          </div>
        )}
      </div>
    </div>
  );
};

export default ExamResponsesPage;-e [1;34m===== ./pages/student/results/index.jsx =====[0m
import { useState, useEffect } from 'react';
import { databases, Query } from '../../../utils/appwrite';
import { getCurrentStudentSession } from '../../../utils/auth';
import Link from 'next/link';
import { BarChart2 } from 'lucide-react';
import { useRouter } from 'next/router';

const ResultsListPage = () => {
  const [results, setResults] = useState([]);
  const [exams, setExams] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [studentInfo, setStudentInfo] = useState(null);
  const router = useRouter();

  const databaseId = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;
  const studentsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_STUDENTS_COLLECTION_ID;
  const resultsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_RESULTS_COLLECTION_ID;
  const examsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_EXAMS_COLLECTION_ID;

  const logQuery = (queryName, params, result, error = null) => {
    console.groupCollapsed(`Query: ${queryName}`);
    console.log('Params:', params);
    if (error) {
      console.error('Error:', error);
    } else {
      console.log('Result:', result);
    }
    console.groupEnd();
  };

  const fetchResultsData = async () => {
    try {
      const session = getCurrentStudentSession();
      if (!session?.email) {
        console.warn('No valid session found, redirecting to login');
        router.push('/login');
        return;
      }

      const studentQueryParams = {
        databaseId,
        collectionId: studentsCollectionId,
        queries: [Query.equal('email', session.email)],
      };

      let studentResponse;
      try {
        studentResponse = await databases.listDocuments(
          studentQueryParams.databaseId,
          studentQueryParams.collectionId,
          studentQueryParams.queries
        );
        logQuery('Get Student by Email', studentQueryParams, {
          total: studentResponse.total,
          documents: studentResponse.documents.map((d) => ({
            $id: d.$id,
            name: d.name,
            email: d.email,
          })),
        });
      } catch (err) {
        logQuery('Get Student by Email', studentQueryParams, null, err);
        throw new Error(`Failed to fetch student: ${err.message}`);
      }

      if (studentResponse.total === 0) {
        throw new Error('Student record not found');
      }

      const student = studentResponse.documents[0];
      setStudentInfo({
        name: student.name,
        email: student.email,
        studentId: student.$id,
      });

      const resultsQueryParams = {
        databaseId,
        collectionId: resultsCollectionId,
        queries: [Query.equal('student_id', student.$id)],
      };

      let resultsResponse;
      try {
        resultsResponse = await databases.listDocuments(
          resultsQueryParams.databaseId,
          resultsQueryParams.collectionId,
          resultsQueryParams.queries
        );
        logQuery('Get Student Results', resultsQueryParams, {
          total: resultsResponse.total,
          documents: resultsResponse.documents,
        });
      } catch (err) {
        logQuery('Get Student Results', resultsQueryParams, null, err);
        throw new Error(`Failed to fetch results: ${err.message}`);
      }

      const filteredResults = resultsResponse.documents;
      console.log('Fetched results:', {
        count: filteredResults.length,
        results: filteredResults.map((r) => ({
          $id: r.$id,
          exam_id: r.exam_id,
          score: r.score,
        })),
      });
      setResults(filteredResults);

      const examIds = filteredResults
        .map((result) => {
          if (Array.isArray(result.exam_id)) {
            return result.exam_id[0]?.$id || result.exam_id[0];
          } else if (typeof result.exam_id === 'object' && result.exam_id !== null) {
            return result.exam_id.$id || result.exam_id.id;
          }
          return result.exam_id;
        })
        .filter((id) => id);

      let examsResponse;
      if (examIds.length > 0) {
        const examsQueryParams = {
          databaseId,
          collectionId: examsCollectionId,
          queries: [Query.contains('$id', examIds)],
        };

        try {
          examsResponse = await databases.listDocuments(
          examsQueryParams.databaseId,
          examsQueryParams.collectionId,
          examsQueryParams.queries
        );
        logQuery('Get Exams for Results', examsQueryParams, {
          total: examsResponse.total,
          documents: examsResponse.documents,
        });
      } catch (err) {
        logQuery('Get Exams for Results', examsQueryParams, null, err);
        throw new Error(`Failed to fetch exams: ${err.message}`);
      }
    } else {
      examsResponse = { documents: [] };
    }

    setExams(examsResponse.documents);
  } catch (err) {
    console.error('Error in fetchResultsData:', {
      message: err.message,
      stack: err.stack,
      timestamp: new Date().toISOString(),
    });
    setError(err.message || 'Failed to load your results. Please try again later.');
  } finally {
    setLoading(false);
  }
};

useEffect(() => {
  fetchResultsData();
}, [router]);

const getExamDetails = (examId) => {
  if (!examId) {
    console.warn('No examId provided');
    return null;
  }

  console.log('Raw exam_id:', examId);

  let resolvedExamId;
  if (Array.isArray(examId)) {
    resolvedExamId = examId[0]?.$id || examId[0];
  } else if (typeof examId === 'object' && examId !== null) {
    resolvedExamId = examId.$id || examId.id;
  } else {
    resolvedExamId = examId;
  }

  console.log('Resolved exam_id:', resolvedExamId);

  const exam = exams.find((e) => e.$id === resolvedExamId);
  if (!exam) {
    console.warn('Exam not found for resolved ID:', resolvedExamId);
    return null;
  }

  return exam;
};

const formatDate = (dateString) => {
  if (!dateString) return 'N/A';
  try {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  } catch (err) {
    console.error('Error formatting date:', dateString, err);
    return 'Invalid Date';
  }
};

const formatDuration = (minutes) => {
  return `${minutes} min`; // Show duration in minutes only
};

if (loading) {
  return (
    <div className="container mx-auto px-4 sm:px-6 py-8 font-inter">
      <div className="bg-white rounded-lg shadow-md border border-gray-200 p-6 mb-6">
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3">
          <h1 className="text-2xl sm:text-3xl font-extrabold text-gray-800 flex items-center">
            <BarChart2 className="mr-2 text-blue-600" size={24} />
            My Results
          </h1>
        </div>
      </div>
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        <span className="ml-3 text-gray-600">Loading your results...</span>
      </div>
    </div>
  );
}

if (error) {
  return (
    <div className="container mx-auto px-4 sm:px-6 py-8 font-inter">
      <div className="bg-white rounded-lg shadow-md border border-gray-200 p-6 mb-6">
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3">
          <h1 className="text-2xl sm:text-3xl font-extrabold text-gray-800 flex items-center">
            <BarChart2 className="mr-2 text-blue-600" size={24} />
            My Results
          </h1>
        </div>
      </div>
      <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded-lg shadow-sm">
        <p className="font-semibold">Error loading results:</p>
        <p className="mt-1">{error}</p>
      </div>
    </div>
  );
}

return (
  <div className="container mx-auto px-4 sm:px-6 py-8 font-inter">
    <div className="bg-white rounded-lg shadow-md border border-gray-200 p-6 mb-6">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3">
        <div>
          <h1 className="text-2xl sm:text-3xl font-extrabold text-gray-800 flex items-center">
            <BarChart2 className="mr-2 text-blue-600" size={24} />
            My Results
          </h1>
          {studentInfo && (
            <p className="mt-1 text-sm text-gray-600">
              Welcome, {studentInfo.name} ({studentInfo.email})
            </p>
          )}
        </div>
      </div>
    </div>

    {results.length === 0 ? (
      <div className="bg-blue-50 border-l-4 border-blue-500 text-blue-700 p-4 rounded-lg shadow-sm">
        <p className="font-semibold">No results found</p>
        <p className="mt-1">You don't have any results yet.</p>
      </div>
    ) : (
      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
        {results.map((result) => {
          const exam = getExamDetails(result.exam_id);
          if (!exam) {
            console.warn('Skipping result - exam not found:', result);
            return null;
          }

          const percentage = result.total_marks ? ((result.score / result.total_marks) * 100).toFixed(1) : 0;
          const status = result.status || (percentage >= 30 ? 'passed' : 'failed');

          const resolvedExamId = Array.isArray(result.exam_id)
            ? result.exam_id[0]?.$id || result.exam_id[0]
            : typeof result.exam_id === 'object' && result.exam_id !== null
            ? result.exam_id.$id || result.exam_id.id
            : result.exam_id;

          return (
            <div
              key={result.$id}
              className="p-4 border border-gray-200 bg-white rounded-md shadow-sm hover:bg-gray-50 transition-colors"
            >
              <h2 className="text-lg font-semibold text-gray-800">{exam.name}</h2>
              <div className="mt-2 text-sm text-gray-600">
                <p>
                  <span className="font-semibold">Score:</span> {result.score}/{result.total_marks} ({percentage}%)
                </p>
                <p>
                  <span className="font-semibold">Status:</span>
                  <span
                    className={`ml-2 px-2 py-1 rounded-full text-xs font-semibold ${
                      status === 'passed' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                    }`}
                  >
                    {status}
                  </span>
                </p>
                <p>
                  <span className="font-semibold">Time Taken:</span> {formatDuration(result.time_taken || 0)}
                </p>
                <p>
                  <span className="font-semibold">Completed:</span> {formatDate(result.completed_at || result.attempted_at)}
                </p>
              </div>
              {/* Commented out View Details functionality */}
              {/* <div className="mt-4">
                <Link
                  href={`/student/results/${resolvedExamId}`}
                  className="block w-full text-center px-4 py-2 rounded-md bg-blue-600 text-white hover:bg-blue-700 text-base font-semibold shadow-sm"
                >
                  View Details
                </Link>
              </div> */}
            </div>
          );
        })}
      </div>
    )}
  </div>
);
};

export default ResultsListPage;-e [1;34m===== ./pages/student/index.jsx =====[0m
import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { FiBook, FiAward, FiCalendar, FiClock, FiBarChart2, FiX } from 'react-icons/fi';
import { databases, Query } from '../../utils/appwrite';
import { getCurrentStudentSession } from '../../utils/auth';
import { useRouter } from 'next/router';

const StudentDashboard = () => {
  const router = useRouter();
  const [studentInfo, setStudentInfo] = useState(null);
  const [upcomingExams, setUpcomingExams] = useState([]);
  const [recentResults, setRecentResults] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedExam, setSelectedExam] = useState(null);

  const databaseId = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;
  const studentsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_STUDENTS_COLLECTION_ID;
  const enrollmentsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_EXAM_ENROLLMENTS_COLLECTION_ID;
  const examsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_EXAMS_COLLECTION_ID;
  const resultsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_RESULTS_COLLECTION_ID;

  const logQuery = (queryName, params, result, error = null) => {
    console.groupCollapsed(`Query: ${queryName}`);
    console.log('Params:', params);
    if (error) {
      console.error('Error:', error);
    } else {
      console.log('Result:', result);
    }
    console.groupEnd();
  };

  useEffect(() => {
    const fetchDashboardData = async () => {
      try {
        const session = getCurrentStudentSession();
        if (!session?.email) {
          router.push('/login');
          return;
        }

        const studentQueryParams = {
          databaseId,
          collectionId: studentsCollectionId,
          queries: [Query.equal('email', session.email)]
        };

        let studentResponse;
        try {
          studentResponse = await databases.listDocuments(
            studentQueryParams.databaseId,
            studentQueryParams.collectionId,
            studentQueryParams.queries
          );
          logQuery('Get Student by Email', studentQueryParams, {
            total: studentResponse.total,
            documents: studentResponse.documents.map(d => ({
              $id: d.$id,
              name: d.name,
              email: d.email
            }))
          });
        } catch (err) {
          logQuery('Get Student by Email', studentQueryParams, null, err);
          throw err;
        }

        if (studentResponse.total === 0) {
          throw new Error('Student record not found');
        }

        const student = studentResponse.documents[0];
        setStudentInfo({
          name: student.name,
          email: student.email,
          studentId: student.$id,
        });

        const enrollmentsQueryParams = {
          databaseId,
          collectionId: enrollmentsCollectionId,
          queries: []
        };

        let enrollmentsResponse;
        try {
          enrollmentsResponse = await databases.listDocuments(
            enrollmentsQueryParams.databaseId,
            enrollmentsQueryParams.collectionId,
            enrollmentsQueryParams.queries
          );
          logQuery('Get All Enrollments', enrollmentsQueryParams, {
            total: enrollmentsResponse.total,
            documents: enrollmentsResponse.documents
          });
        } catch (err) {
          logQuery('Get All Enrollments', enrollmentsQueryParams, null, err);
          throw err;
        }

        const filteredEnrollments = enrollmentsResponse.documents.filter(enrollment => {
          const studentRef = enrollment.student_id;
          if (Array.isArray(studentRef)) {
            return studentRef.some(s => s.$id === student.$id);
          } else if (typeof studentRef === 'object' && studentRef !== null) {
            return studentRef.$id === student.$id;
          } else {
            return studentRef === student.$id;
          }
        });

        console.log('Client-side filtered enrollments:', {
          originalCount: enrollmentsResponse.total,
          filteredCount: filteredEnrollments.length,
          enrollments: filteredEnrollments
        });

        const examsQueryParams = {
          databaseId,
          collectionId: examsCollectionId,
          queries: []
        };

        let examsResponse;
        try {
          examsResponse = await databases.listDocuments(
            examsQueryParams.databaseId,
            examsQueryParams.collectionId,
            examsQueryParams.queries
          );
          logQuery('Get All Exams', examsQueryParams, {
            total: examsResponse.total,
            documents: examsResponse.documents
          });
        } catch (err) {
          logQuery('Get All Exams', examsQueryParams, null, err);
          throw err;
        }

        const now = new Date();
        const studentUpcomingExams = examsResponse.documents.filter(exam => {
          const examId = exam.$id;
          const isEnrolled = filteredEnrollments.some(e => {
            const examRef = e.exam_id;
            if (Array.isArray(examRef)) {
              return examRef.some(e => e.$id === examId);
            } else if (typeof examRef === 'object' && examRef !== null) {
              return examRef.$id === examId;
            } else {
              return examRef === examId;
            }
          });
          return isEnrolled && new Date(exam.exam_date) > now;
        }).map(exam => ({
          id: exam.$id,
          name: exam.name,
          date: exam.exam_date,
          duration: exam.duration,
          description: exam.description || 'No description available' // Include description for modal
        }));

        setUpcomingExams(studentUpcomingExams);

        const resultsQueryParams = {
          databaseId,
          collectionId: resultsCollectionId,
          queries: []
        };

        let resultsResponse;
        try {
          resultsResponse = await databases.listDocuments(
            resultsQueryParams.databaseId,
            resultsQueryParams.collectionId,
            resultsQueryParams.queries
          );
          logQuery('Get All Results', resultsQueryParams, {
            total: resultsResponse.total,
            documents: resultsResponse.documents
          });
        } catch (err) {
          logQuery('Get All Results', resultsQueryParams, null, err);
          throw err;
        }

        const studentResults = resultsResponse.documents
          .filter(result => {
            const studentRef = result.student_id;
            if (Array.isArray(studentRef)) {
              return studentRef.some(s => s.$id === student.$id);
            } else if (typeof studentRef === 'object' && studentRef !== null) {
              return studentRef.$id === student.$id;
            } else {
              return studentRef === student.$id;
            }
          })
          .sort((a, b) => new Date(b.attempted_at) - new Date(a.attempted_at))
          .slice(0, 3);

        const resultsWithExamDetails = await Promise.all(
          studentResults.map(async (result) => {
            const examId = result.exam_id?.$id || result.exam_id;
            const exam = examsResponse.documents.find(e => e.$id === examId);
            const percentage = Math.round((result.score / result.total_marks) * 100);
            return {
              id: result.$id,
              examId: exam?.$id || 'unknown',
              exam: exam?.name || 'Unknown Exam',
              score: percentage,
              date: result.attempted_at,
              totalMarks: result.total_marks,
              obtainedMarks: result.score,
              status: result.status || (percentage >= 30 ? 'passed' : 'failed')
            };
          })
        );

        setRecentResults(resultsWithExamDetails);
      } catch (err) {
        console.error('Error in fetchDashboardData:', {
          message: err.message,
          stack: err.stack,
          timestamp: new Date().toISOString()
        });
        setError(err.message || 'Failed to load dashboard data. Please try again later.');
      } finally {
        setLoading(false);
      }
    };

    fetchDashboardData();
  }, [router]);

  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString('en-US', { 
        year: 'numeric', 
        month: 'short', 
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    } catch (err) {
      console.error('Error formatting date:', dateString, err);
      return 'Invalid Date';
    }
  };

  const formatDuration = (minutes) => {
    return `${minutes} min`; // Show duration in minutes only
  };

  const handleViewDetails = (exam) => {
    setSelectedExam(exam);
    setIsModalOpen(true);
  };

  const closeModal = () => {
    setIsModalOpen(false);
    setSelectedExam(null);
  };

  if (loading) {
    return (
      <div className="container mx-auto px-4 sm:px-6 py-8 font-inter">
        <div className="flex justify-center items-center h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
          <span className="ml-3 text-gray-600">Loading your dashboard...</span>
        </div>
      </div>
    );
  }

  if (!studentInfo) {
    return (
      <div className="container mx-auto px-4 sm:px-6 py-8 font-inter">
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded-lg shadow-sm">
          <p>Student data not available. Please login again.</p>
          <button
            onClick={() => router.push('/login')}
            className="mt-2 text-sm bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md font-semibold shadow-sm"
          >
            Go to Login
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 sm:px-6 py-8 font-inter">
      {/* Welcome Banner */}
      <div className="bg-white rounded-lg shadow-md border border-gray-200 p-6 mb-6">
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3">
          <div>
            <h1 className="text-2xl sm:text-3xl font-extrabold text-gray-800 mb-2">
              Welcome back, {studentInfo.name}!
            </h1>
            <p className="text-gray-600">
              {upcomingExams.length > 0 
                ? `You have ${upcomingExams.length} upcoming exam${upcomingExams.length !== 1 ? 's' : ''}` 
                : 'No upcoming exams'}
            </p>
          </div>
        </div>
      </div>

      {error && (
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6 rounded-lg shadow-sm">
          <p>{error}</p>
        </div>
      )}

      {/* Quick Actions */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
        <Link href="/student/exams" passHref>
          <div className="bg-white p-6 rounded-lg border border-gray-200 shadow-md hover:bg-gray-50 transition-all cursor-pointer flex items-start">
            <div className="bg-blue-100 p-3 rounded-md mr-4">
              <FiBook className="text-blue-600 text-xl" />
            </div>
            <div>
              <h2 className="text-lg font-semibold text-gray-800">My Exams</h2>
              <p className="mt-1 text-gray-600 text-sm">View and take upcoming exams</p>
            </div>
          </div>
        </Link>

        <Link href="/student/results" passHref>
          <div className="bg-white p-6 rounded-lg border border-gray-200 shadow-md hover:bg-gray-50 transition-all cursor-pointer flex items-start">
            <div className="bg-green-100 p-3 rounded-md mr-4">
              <FiAward className="text-green-600 text-xl" />
            </div>
            <div>
              <h2 className="text-lg font-semibold text-gray-800">Results</h2>
              <p className="mt-1 text-gray-600 text-sm">Check your exam results</p>
            </div>
          </div>
        </Link>
      </div>

      {/* Upcoming Exams Section */}
      <div className="bg-white rounded-lg shadow-md border border-gray-200 p-6 mb-6">
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-3">
          <h2 className="text-xl font-semibold text-gray-800 flex items-center">
            <FiCalendar className="mr-2 text-blue-600 text-xl" />
            Upcoming Exams
          </h2>
          <Link href="/student/exams" passHref>
            <span className="text-sm text-blue-600 hover:underline cursor-pointer">View All</span>
          </Link>
        </div>

        {upcomingExams.length > 0 ? (
          <div className="space-y-4">
            {upcomingExams.map((exam) => (
              <div key={exam.id} className="border border-gray-200 rounded-md p-4 hover:bg-gray-50 transition-colors">
                <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3">
                  <div>
                    <h3 className="font-semibold text-gray-800">{exam.name}</h3>
                    <p className="text-sm text-gray-600 mt-1 flex items-center gap-2">
                      <span className="flex items-center">
                        <FiClock className="mr-1 text-gray-500" /> {formatDuration(exam.duration)}
                      </span>
                    </p>
                  </div>
                  <div className="text-right">
                    <p className="text-sm text-gray-600">{formatDate(exam.date)}</p>
                    <button
                      onClick={() => handleViewDetails(exam)}
                      className="mt-2 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors text-base font-semibold shadow-sm"
                    >
                      View Details
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div className="text-center py-8">
            <p className="text-gray-600 mb-4">No upcoming exams scheduled</p>
            <Link href="/student/exams" passHref>
              <button className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors text-base font-semibold shadow-sm">
                Browse Available Exams
              </button>
            </Link>
          </div>
        )}
      </div>

      {/* Recent Results Section */}
      <div className="bg-white rounded-lg shadow-md border border-gray-200 p-6">
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-3">
          <h2 className="text-xl font-semibold text-gray-800 flex items-center">
            <FiBarChart2 className="mr-2 text-green-600 text-xl" />
            Recent Results
          </h2>
          <Link href="/student/results" passHref>
            <span className="text-sm text-blue-600 hover:underline cursor-pointer">View All</span>
          </Link>
        </div>

        {recentResults.length > 0 ? (
          <div className="space-y-4">
            {recentResults.map((result) => (
              <div key={result.id} className="border border-gray-200 rounded-md p-4 hover:bg-gray-50 transition-colors">
                <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3">
                  <div>
                    <h3 className="font-semibold text-gray-800">{result.exam}</h3>
                    <p className="text-sm text-gray-600 mt-1">{formatDate(result.date)}</p>
                    <p className="text-sm text-gray-600 mt-1">
                      Score: {result.obtainedMarks}/{result.totalMarks}
                    </p>
                  </div>
                  <div className="text-right flex flex-col items-end gap-2">
                    <span className={`inline-block px-3 py-1 rounded-full text-sm font-semibold ${
                      result.score >= 80 
                        ? 'bg-green-100 text-green-800' 
                        : result.score >= 50 
                          ? 'bg-yellow-100 text-yellow-800' 
                          : 'bg-red-100 text-red-800'
                    }`}>
                      {result.score}%
                    </span>
                    <Link href={`/student/results/${result.examId}`} passHref>
                      <button className="px-4 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 transition-colors text-sm">
                        View Details
                      </button>
                    </Link>
                  </div>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div className="text-center py-8">
            <p className="text-gray-600 mb-4">No results available yet</p>
            <Link href="/student/exams" passHref>
              <button className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors text-base font-semibold shadow-sm">
                Take an Exam
              </button>
            </Link>
          </div>
        )}
      </div>

      {/* Exam Description Modal */}
      {isModalOpen && selectedExam && (
        <div className="fixed inset-0 flex justify-center items-center z-50 bg-black bg-opacity-50">
          <div className="bg-white rounded-lg shadow-xl p-6 max-w-lg w-full mx-4">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-xl font-bold text-gray-800">{selectedExam.name}</h3>
              <button
                onClick={closeModal}
                className="text-gray-500 hover:text-gray-700"
                aria-label="Close modal"
              >
                <FiX size={24} />
              </button>
            </div>
            <div className="mb-4">
              <p className="text-gray-600 font-semibold">Description:</p>
              <p className="text-gray-700 mt-1">{selectedExam.description}</p>
            </div>
            <div className="flex justify-end">
              <button
                onClick={closeModal}
                className="bg-gray-500 text-white px-4 py-2 rounded-md hover:bg-gray-600 transition-colors"
              >
                Close
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default StudentDashboard;-e [1;34m===== ./pages/student/exams/[id].jsx =====[0m
import React, { useState, useEffect, useCallback } from 'react';
import { databases, storage, Query, ID } from '../../../utils/appwrite';
import { getCurrentStudentSession } from '../../../utils/auth';
import { useRouter } from 'next/router';

const BUCKET_ID = 'questions';
const MAX_TAB_SWITCHES = 3;

const ExamTakingPage = () => {
  const [exam, setExam] = useState(null);
  const [examQuestions, setExamQuestions] = useState([]);
  const [questions, setQuestions] = useState([]);
  const [answers, setAnswers] = useState({});
  const [markedForReview, setMarkedForReview] = useState({});
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [studentInfo, setStudentInfo] = useState(null);
  const [timeRemaining, setTimeRemaining] = useState(null);
  const [isFullScreen, setIsFullScreen] = useState(false);
  const [showSubmitConfirm, setShowSubmitConfirm] = useState(false);
  const [tabSwitchCount, setTabSwitchCount] = useState(0);
  const [examStartTime, setExamStartTime] = useState(null);
  const router = useRouter();
  const { id: examId } = router.query;

  const databaseId = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;
  const studentsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_STUDENTS_COLLECTION_ID;
  const examQuestionsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_EXAM_QUESTIONS_COLLECTION_ID;
  const questionsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_QUESTIONS_COLLECTION_ID;
  const examsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_EXAMS_COLLECTION_ID;
  const responsesCollectionId = process.env.NEXT_PUBLIC_APPWRITE_RESPONSES_COLLECTION_ID;
  const resultsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_RESULTS_COLLECTION_ID;

  useEffect(() => {
    console.log('Environment Variables:', {
      databaseId,
      studentsCollectionId,
      examsCollectionId,
      examQuestionsCollectionId,
      questionsCollectionId,
      responsesCollectionId,
      resultsCollectionId,
      endpoint: process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT,
      projectId: process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID
    });
  }, []);

  const logQuery = (queryName, params, result, error = null) => {
    console.groupCollapsed(`Query: ${queryName}`);
    console.log('Params:', params);
    if (error) {
      console.error('Error:', error.message, 'Code:', error.code, 'Type:', error.type);
    } else {
      console.log('Result:', result);
    }
    console.groupEnd();
  };

  const getFileUrl = async (fileId) => {
    try {
      return storage.getFileView(BUCKET_ID, fileId);
    } catch (error) {
      console.error('Error fetching image:', error.message);
      return null;
    }
  };

  const generateResultId = (examId, studentId) => {
    const shortExamId = examId.substring(0, 10);
    const shortStudentId = studentId.substring(0, 10);
    const timestamp = Date.now().toString(36).substring(0, 6);
    const random = Math.random().toString(36).substring(2, 6);
    return `res_${shortExamId}_${shortStudentId}_${timestamp}_${random}`.substring(0, 36);
  };

  const resolveRelationshipId = (field) => {
    if (!field) return null;
    if (typeof field === 'object' && field.$id) return field.$id;
    if (Array.isArray(field) && field.length > 0) return field[0]?.$id || field[0];
    return field;
  };

  useEffect(() => {
    const preventCopyPaste = (e) => {
      e.preventDefault();
      alert('Copying and pasting are disabled during the exam.');
    };

    const preventRightClick = (e) => {
      e.preventDefault();
    };

    document.addEventListener('copy', preventCopyPaste);
    document.addEventListener('paste', preventCopyPaste);
    document.addEventListener('contextmenu', preventRightClick);

    return () => {
      document.removeEventListener('copy', preventCopyPaste);
      document.removeEventListener('paste', preventCopyPaste);
      document.removeEventListener('contextmenu', preventRightClick);
    };
  }, []);

  useEffect(() => {
    const handleVisibilityChange = () => {
      if (document.hidden) {
        setTabSwitchCount(prev => {
          const newCount = prev + 1;
          if (newCount >= MAX_TAB_SWITCHES) {
            alert(`Warning: Maximum tab switches (${MAX_TAB_SWITCHES}) reached. Please remain on the exam page.`);
          } else {
            alert(`Warning: Tab switch detected (${newCount}/${MAX_TAB_SWITCHES}).`);
          }
          return newCount;
        });
      }
    };

    document.addEventListener('visibilitychange', handleVisibilityChange);
    return () => document.removeEventListener('visibilitychange', handleVisibilityChange);
  }, []);

  const toggleFullScreen = useCallback(async () => {
    try {
      if (!document.fullscreenElement) {
        await document.documentElement.requestFullscreen();
        setIsFullScreen(true);
      } else {
        await document.exitFullscreen();
        setIsFullScreen(false);
      }
    } catch (err) {
      console.error('Full-screen error:', err.message);
      setError('Failed to toggle full-screen mode. Please try again or continue without full-screen.');
    }
  }, []);

  useEffect(() => {
    const fetchExamData = async () => {
      if (!examId) {
        setError('No exam ID provided');
        setLoading(false);
        return;
      }

      if (!databaseId || !studentsCollectionId || !examsCollectionId || !examQuestionsCollectionId || !questionsCollectionId || !responsesCollectionId || !resultsCollectionId) {
        setError('Missing required environment variables. Please contact your administrator.');
        setLoading(false);
        return;
      }

      try {
        setExamStartTime(new Date().toISOString());
        const session = await getCurrentStudentSession();
        console.log('Session:', session);
        if (!session?.email) {
          console.warn('No valid session found, redirecting to login');
          router.push('/login');
          return;
        }

        const studentQueryParams = {
          databaseId,
          collectionId: studentsCollectionId,
          queries: [Query.equal('email', session.email)]
        };

        let studentResponse;
        try {
          studentResponse = await databases.listDocuments(
            studentQueryParams.databaseId,
            studentQueryParams.collectionId,
            studentQueryParams.queries
          );
          logQuery('Get Student by Email', studentQueryParams, {
            total: studentResponse.total,
            documents: studentResponse.documents.map(d => ({
              $id: d.$id,
              name: d.name,
              email: d.email
            }))
          });
        } catch (err) {
          logQuery('Get Student by Email', studentQueryParams, null, err);
          throw new Error(`Student query failed: ${err.message}. Check permissions for students collection.`);
        }

        if (studentResponse.total === 0) {
          throw new Error('Student record not found');
        }

        const student = studentResponse.documents[0];
        setStudentInfo({
          name: student.name,
          email: student.email,
          studentId: student.$id,
        });

        const examQueryParams = {
          databaseId,
          collectionId: examsCollectionId,
          queries: [Query.equal('$id', examId)]
        };

        let examResponse;
        try {
          examResponse = await databases.listDocuments(
            examQueryParams.databaseId,
            examQueryParams.collectionId,
            examQueryParams.queries
          );
          logQuery('Get Exam', examQueryParams, {
            total: examResponse.total,
            documents: examResponse.documents
          });
        } catch (err) {
          logQuery('Get Exam', examQueryParams, null, err);
          throw new Error(`Exam query failed: ${err.message}. Check permissions for exams collection.`);
        }

        if (examResponse.total === 0) {
          throw new Error('Exam not found');
        }

        const examData = examResponse.documents[0];
        setExam(examData);
        setTimeRemaining(examData.duration * 60);

        const examQuestionsQueryParams = {
          databaseId,
          collectionId: examQuestionsCollectionId,
          queries: [Query.orderAsc('order')]
        };

        let examQuestionsResponse;
        try {
          examQuestionsResponse = await databases.listDocuments(
            examQuestionsQueryParams.databaseId,
            examQuestionsQueryParams.collectionId,
            examQuestionsQueryParams.queries
          );
          logQuery('Get Exam Questions', examQuestionsQueryParams, {
            total: examQuestionsResponse.total,
            documents: examQuestionsResponse.documents
          });
        } catch (err) {
          logQuery('Get Exam Questions', examQuestionsQueryParams, null, err);
          throw new Error(`Exam questions query failed: ${err.message}. Check permissions for exam_questions collection.`);
        }

        const filteredExamQuestions = examQuestionsResponse.documents.filter(doc => {
          const examRef = doc.exam_id;
          if (Array.isArray(examRef)) {
            return examRef.some(ref => ref.$id === examId || ref === examId);
          } else if (typeof examRef === 'object' && examRef !== null) {
            return examRef.$id === examId;
          }
          return examRef === examId;
        });

        setExamQuestions(filteredExamQuestions);

        const questionIds = filteredExamQuestions.map(eq => resolveRelationshipId(eq.question_id)).filter(id => id);

        if (questionIds.length > 0) {
          const questionsQueryParams = {
            databaseId,
            collectionId: questionsCollectionId,
            queries: [Query.limit(100)]
          };

          let questionsResponse;
          try {
            questionsResponse = await databases.listDocuments(
              questionsQueryParams.databaseId,
              questionsQueryParams.collectionId,
              questionsQueryParams.queries
            );
            logQuery('Get Questions', questionsQueryParams, {
              total: questionsResponse.total,
              documents: questionsResponse.documents
            });
          } catch (err) {
            logQuery('Get Questions', questionsQueryParams, null, err);
            throw new Error(`Questions query failed: ${err.message}. Check permissions for questions collection.`);
          }

          const updatedQuestions = await Promise.all(
            questionsResponse.documents
              .filter(q => questionIds.includes(q.$id) || questionIds.includes(q.question_id))
              .map(async (q) => ({
                ...q,
                imageUrl: q.image_id ? await getFileUrl(q.image_id) : null,
                optionsImageUrls: await Promise.all(
                  (q.options_image || []).map(async (imgId) => 
                    imgId ? await getFileUrl(imgId) : null
                  )
                )
              }))
          );

          setQuestions(updatedQuestions);
        }
      } catch (err) {
        console.error('Error in fetchExamData:', {
          message: err.message,
          stack: err.stack,
          timestamp: new Date().toISOString()
        });
        setError(err.message || 'Failed to load exam. Please check your permissions or try again later.');
      } finally {
        setLoading(false);
      }
    };

    fetchExamData();
  }, [examId, router]);

  useEffect(() => {
    if (timeRemaining === null || timeRemaining <= 0) return;

    const timer = setInterval(() => {
      setTimeRemaining(prev => {
        if (prev <= 1) {
          clearInterval(timer);
          handleSubmit(true);
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, [timeRemaining]);

  const getQuestionById = (questionId) => {
    return questions.find(q => q.$id === questionId) || 
           questions.find(q => q.question_id === questionId);
  };

  const getQuestionMarks = (questionId) => {
    const mapping = examQuestions.find(eq => {
      const qRef = eq.question_id;
      const qRefId = resolveRelationshipId(qRef);
      return qRefId === questionId;
    });
    return mapping?.marks || 0;
  };

  const handleAnswerChange = (questionId, optionIndex) => {
    setAnswers(prev => ({
      ...prev,
      [questionId]: optionIndex
    }));
    setMarkedForReview(prev => ({
      ...prev,
      [questionId]: false
    }));
  };

  const handleMarkForReview = (questionId) => {
    setMarkedForReview(prev => ({
      ...prev,
      [questionId]: !prev[questionId]
    }));
  };

  const handleSkip = () => {
    if (currentQuestionIndex < questions.length - 1) {
      setCurrentQuestionIndex(prev => prev + 1);
    }
  };

  const handleJumpToQuestion = (index) => {
    setCurrentQuestionIndex(index);
  };

  const calculateResult = async () => {
    let score = 0;
    let total_marks = 0;

    console.group('Result Calculation Debug');
    console.log('Exam Questions:', examQuestions.map(eq => ({
      $id: eq.$id,
      question_id: resolveRelationshipId(eq.question_id),
      marks: eq.marks,
      order: eq.order
    })));
    console.log('Questions:', questions.map(q => ({
      $id: q.$id,
      question_id: q.question_id,
      text: q.text?.substring(0, 50),
      correct_answer: q.correct_answer
    })));
    console.log('Answers:', answers);

    for (const eq of examQuestions) {
      const questionId = resolveRelationshipId(eq.question_id);
      const marks = parseInt(eq.marks) || 0;
      total_marks += marks;

      const question = getQuestionById(questionId);
      if (question && answers[questionId] !== undefined) {
        const selectedOption = parseInt(answers[questionId]);
        const correctOption = question.correct_answer !== undefined ? parseInt(question.correct_answer) : null;

        console.log(`Question ${questionId}:`, {
          selectedOption,
          correctOption,
          marks,
          hasCorrectOption: correctOption !== null
        });

        if (correctOption !== null && selectedOption === correctOption) {
          score += marks;
        } else if (correctOption === null) {
          console.warn(`Question ${questionId} missing correct_answer, awarding 0 marks`);
        }
      } else {
        console.log(`Question ${questionId}: No answer or question not found`);
      }
    }

    const percentage = total_marks > 0 ? (score / total_marks) * 100 : 0;
    const status = percentage >= 30 ? 'passed' : 'failed';

    console.log('Final Result:', { score, total_marks, percentage: percentage.toFixed(1), status });
    console.groupEnd();

    return { score, total_marks, percentage, status };
  };

  const handleSubmit = async (autoSubmit = false) => {
    if (!autoSubmit && !confirm('Are you sure you want to submit the exam?')) {
      return;
    }

    try {
      if (!databaseId || !responsesCollectionId || !resultsCollectionId) {
        throw new Error('Missing required environment variables for submission.');
      }

      const endTime = new Date();
      const startTime = new Date(examStartTime);
      const timeTakenMinutes = autoSubmit ? (exam.duration || 60) : Math.round((endTime - startTime) / (1000 * 60));

      const responsePromises = Object.entries(answers).map(async ([questionId, selectedOption]) => {
        const responseData = {
          response_id: ID.unique(),
          student_id: studentInfo.studentId,
          exam_id: examId,
          question_id: questionId,
          selected_option: parseInt(selectedOption)
        };

        try {
          const response = await databases.createDocument(
            databaseId,
            responsesCollectionId,
            ID.unique(),
            responseData
          );
          logQuery('Submit Response', { databaseId, collectionId: responsesCollectionId, responseData }, response);
          return response;
        } catch (err) {
          logQuery('Submit Response', { databaseId, collectionId: responsesCollectionId, responseData }, null, err);
          throw new Error(`Failed to submit response for question ${questionId}: ${err.message}`);
        }
      });

      await Promise.all(responsePromises);

      const { score, total_marks, percentage, status } = await calculateResult();
      const resultId = generateResultId(examId, studentInfo.studentId);
      const resultData = {
        result_id: resultId,
        student_id: studentInfo.studentId,
        exam_id: examId,
        score: parseInt(score),
        total_marks: parseInt(total_marks),
        percentage: parseFloat(percentage.toFixed(1)),
        status,
        time_taken: parseInt(timeTakenMinutes),
        attempted_at: startTime.toISOString(),
        completed_at: endTime.toISOString(),
        created_at: endTime.toISOString()
      };

      try {
        const result = await databases.createDocument(
          databaseId,
          resultsCollectionId,
          ID.unique(),
          resultData
        );
        logQuery('Submit Result', { databaseId, collectionId: resultsCollectionId, resultData }, result);
      } catch (err) {
        logQuery('Submit Result', { databaseId, collectionId: resultsCollectionId, resultData }, null, err);
        throw new Error(`Failed to submit result: ${err.message}`);
      }

      router.push('/student/exams?submitted=true');
    } catch (err) {
      console.error('Error submitting exam:', {
        message: err.message,
        stack: err.stack,
        timestamp: new Date().toISOString()
      });
      setError(err.message || 'Failed to submit exam. Please try again or contact your administrator.');
    }
  };

  const formatTime = (seconds) => {
    const minutes = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${minutes}:${secs < 10 ? '0' : ''}${secs}`;
  };

  const answeredCount = Object.keys(answers).length;
  const markedCount = Object.values(markedForReview).filter(v => v).length;
  const notVisitedCount = questions.length - answeredCount - markedCount;
  const progressPercentage = questions.length > 0 ? (answeredCount / questions.length) * 100 : 0;

  if (loading) {
    return (
      <div className="container mx-auto px-4 py-6">
        <div className="flex justify-center items-center h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
          <span className="ml-3 text-gray-600">Loading exam...</span>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container mx-auto px-4 py-6">
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded">
          <p className="font-medium">Error loading exam:</p>
          <p className="mt-1">{error}</p>
          <p className="mt-1 text-sm">If this is a permissions issue, please contact your administrator.</p>
          <button
            onClick={() => router.push('/student/exams')}
            className="mt-3 text-sm bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded"
          >
            Return to Exams
          </button>
        </div>
      </div>
    );
  }

  if (!exam || exam.status !== 'active') {
    return (
      <div className="container mx-auto px-4 py-6">
        <div className="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 rounded">
          <p>This exam is not currently available.</p>
          <button
            onClick={() => router.push('/student/exams')}
            className="mt-3 text-sm bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded"
          >
            Return to Exams
          </button>
        </div>
      </div>
    );
  }

  const currentQuestion = questions[currentQuestionIndex];

  return (
    <div className="container mx-auto px-4 py-6 select-none">
      {showSubmitConfirm && (
        <div className="fixed inset-0 flex items-center justify-center bg-gray-900 bg-opacity-50 z-50">
          <div className="bg-white p-6 rounded-lg shadow-xl w-96">
            <h3 className="text-lg font-semibold mb-4">Confirm Submission</h3>
            <p className="text-gray-600 mb-6">
              Are you sure you want to submit the exam? You cannot make changes after submission.
            </p>
            <div className="flex justify-end gap-3">
              <button
                onClick={() => setShowSubmitConfirm(false)}
                className="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400"
              >
                Cancel
              </button>
              <button
                onClick={() => {
                  setShowSubmitConfirm(false);
                  handleSubmit();
                }}
                className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700"
              >
                Submit
              </button>
            </div>
          </div>
        </div>
      )}

      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-2xl font-bold text-gray-800">{exam.name}</h1>
          <p className="text-sm text-gray-600">
            {studentInfo && `Student: ${studentInfo.name} (${studentInfo.email})`}
          </p>
          <p className="text-sm text-gray-600 mt-1">
            Question {currentQuestionIndex + 1} of {questions.length}
          </p>
        </div>
        <div className="text-right">
          <p className="text-sm font-medium text-red-600">
            Time Remaining: {formatTime(timeRemaining)}
          </p>
        </div>
      </div>

      <div className="mb-6">
        <div className="w-full bg-gray-200 rounded-full h-2.5">
          <div
            className="bg-blue-600 h-2.5 rounded-full"
            style={{ width: `${progressPercentage}%` }}
          ></div>
        </div>
        <p className="text-sm text-gray-600 mt-1">
          Progress: {answeredCount}/{questions.length} questions answered
        </p>
      </div>

      <div className="flex gap-6">
        <div className="flex-1">
          <div className="bg-white p-6 rounded-lg shadow">
            <h2 className="text-lg font-semibold mb-4">Current Question</h2>
            {questions.length === 0 ? (
              <div className="text-center py-8">
                <p className="text-gray-600">No questions found for this exam.</p>
              </div>
            ) : (
              <div className="space-y-6">
                {currentQuestion && (
                  <div className="border border-gray-200 rounded-lg p-4">
                    <div className="flex justify-between items-start mb-4">
                      <div>
                        {currentQuestion.text && (
                          <p className="text-gray-700 mt-2">{currentQuestion.text}</p>
                        )}
                        {currentQuestion.imageUrl && (
                          <img
                            src={currentQuestion.imageUrl}
                            alt="Question"
                            className="mt-3 max-h-80 w-full object-contain border rounded-lg"
                          />
                        )}
                        <div className="mt-2 flex flex-wrap gap-2">
                          {currentQuestion.difficulty && (
                            <span className="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs">
                              Difficulty: {currentQuestion.difficulty}
                            </span>
                          )}
                          {currentQuestion.tags && Array.isArray(currentQuestion.tags) && currentQuestion.tags.map((tag, index) => (
                            <span key={index} className="px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs">
                              Tag: {tag}
                            </span>
                          ))}
                        </div>
                      </div>
                      <div className="flex flex-col items-end">
                        <span className="px-2 py-1 bg-gray-100 text-gray-800 rounded-full text-xs">
                          Marks: {getQuestionMarks(currentQuestion.$id)}
                        </span>
                      </div>
                    </div>
                    <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                      {currentQuestion.options_text.map((option, index) => (
                        <label
                          key={index}
                          className={`flex items-start p-3 border rounded-lg cursor-pointer hover:bg-gray-50 ${
                            answers[currentQuestion.$id] === index
                              ? 'border-blue-500 bg-blue-50'
                              : 'border-gray-200'
                          }`}
                        >
                          <input
                            type="radio"
                            name={`question-${currentQuestion.$id}`}
                            checked={answers[currentQuestion.$id] === index}
                            onChange={() => handleAnswerChange(currentQuestion.$id, index)}
                            className="mt-1 h-4 w-4 text-blue-600 focus:ring-blue-500"
                          />
                          <div className="ml-3 flex-1">
                            {option && <p className="text-gray-700">{option}</p>}
                            {currentQuestion.optionsImageUrls?.[index] && (
                              <img
                                src={currentQuestion.optionsImageUrls[index]}
                                alt={`Option ${index + 1}`}
                                className="mt-2 max-h-40 w-full object-contain"
                              />
                            )}
                          </div>
                        </label>
                      ))}
                    </div>
                    <div className="mt-4 flex gap-3">
                      <button
                        onClick={() => handleMarkForReview(currentQuestion.$id)}
                        className={`py-2 px-4 rounded-md text-white ${
                          markedForReview[currentQuestion.$id]
                            ? 'bg-yellow-600 hover:bg-yellow-700'
                            : 'bg-yellow-500 hover:bg-yellow-600'
                        }`}
                      >
                        {markedForReview[currentQuestion.$id] ? 'Unmark Review' : 'Mark for Review'}
                      </button>
                      <button
                        onClick={handleSkip}
                        className="py-2 px-4 bg-gray-500 hover:bg-gray-600 text-white rounded-md"
                      >
                        Skip
                      </button>
                    </div>
                  </div>
                )}
                <div className="mt-6 flex justify-between items-center">
                  <button
                    onClick={() => setCurrentQuestionIndex(prev => Math.max(0, prev - 1))}
                    disabled={currentQuestionIndex === 0}
                    className={`py-2 px-4 rounded-md text-white ${
                      currentQuestionIndex === 0
                        ? 'bg-gray-400 cursor-not-allowed'
                        : 'bg-blue-600 hover:bg-blue-700'
                    }`}
                  >
                    Previous
                  </button>
                  <div className="flex gap-3">
                    {currentQuestionIndex < questions.length - 1 ? (
                      <button
                        onClick={() => setCurrentQuestionIndex(prev => prev + 1)}
                        className="py-2 px-4 bg-blue-600 hover:bg-blue-700 text-white rounded-md"
                      >
                        Next
                      </button>
                    ) : null}
                    <button
                      onClick={() => setShowSubmitConfirm(true)}
                      className="py-2 px-4 bg-green-600 hover:bg-green-700 text-white rounded-md"
                    >
                      Submit Exam
                    </button>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
        <div className="w-80">
          <div className="bg-white p-4 rounded-lg shadow sticky top-4">
            <h3 className="font-semibold mb-4">Question Palette</h3>
            <div className="mb-4">
              <h4 className="text-sm font-medium text-gray-700">Progress</h4>
              <div className="mt-2 text-sm">
                <p>Answered: {answeredCount}</p>
                <p>Marked for Review: {markedCount}</p>
                <p>Not Visited: {notVisitedCount}</p>
              </div>
            </div>
            <div className="grid grid-cols-5 gap-2">
              {questions.map((q, index) => {
                const isAnswered = answers[q.$id] !== undefined;
                const isMarked = markedForReview[q.$id];
                return (
                  <button
                    key={q.$id}
                    onClick={() => handleJumpToQuestion(index)}
                    className={`p-2 rounded text-white text-sm ${
                      index === currentQuestionIndex
                        ? 'bg-blue-600'
                        : isAnswered
                        ? 'bg-green-500'
                        : isMarked
                        ? 'bg-yellow-500'
                        : 'bg-gray-400'
                    }`}
                    title={`Question ${index + 1}: ${
                      index === currentQuestionIndex
                        ? 'Current'
                        : isAnswered
                        ? 'Answered'
                        : isMarked
                        ? 'Marked for Review'
                        : 'Not Visited'
                    }`}
                  >
                    {index + 1}
                  </button>
                );
              })}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ExamTakingPage;-e [1;34m===== ./pages/student/exams/index.jsx =====[0m
import React, { useState, useEffect } from 'react';
import { databases, Query } from '../../../utils/appwrite';
import { getCurrentStudentSession } from '../../../utils/auth';
import { useRouter } from 'next/router';
import { FileText } from 'lucide-react';

const StudentExamsPage = () => {
  const [enrollments, setEnrollments] = useState([]);
  const [exams, setExams] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [studentInfo, setStudentInfo] = useState(null);
  const router = useRouter();

  const databaseId = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;
  const studentsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_STUDENTS_COLLECTION_ID;
  const enrollmentsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_EXAM_ENROLLMENTS_COLLECTION_ID;
  const examsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_EXAMS_COLLECTION_ID;

  const logQuery = (queryName, params, result, error = null) => {
    console.groupCollapsed(`Query: ${queryName}`);
    console.log('Params:', params);
    if (error) {
      console.error('Error:', error);
    } else {
      console.log('Result:', result);
    }
    console.groupEnd();
  };

  const fetchStudentData = async () => {
    try {
      const session = getCurrentStudentSession();
      if (!session?.email) {
        router.push('/login');
        return;
      }

      const studentQueryParams = {
        databaseId,
        collectionId: studentsCollectionId,
        queries: [Query.equal('email', session.email)]
      };

      let studentResponse;
      try {
        studentResponse = await databases.listDocuments(
          studentQueryParams.databaseId,
          studentQueryParams.collectionId,
          studentQueryParams.queries
        );
        logQuery('Get Student by Email', studentQueryParams, {
          total: studentResponse.total,
          documents: studentResponse.documents.map(d => ({
            $id: d.$id,
            name: d.name,
            email: d.email
          }))
        });
      } catch (err) {
        logQuery('Get Student by Email', studentQueryParams, null, err);
        throw err;
      }

      if (studentResponse.total === 0) {
        throw new Error('Student record not found');
      }

      const student = studentResponse.documents[0];
      setStudentInfo({
        name: student.name,
        email: student.email,
        studentId: student.$id,
      });

      const enrollmentsQueryParams = {
        databaseId,
        collectionId: enrollmentsCollectionId,
        queries: []
      };

      let enrollmentsResponse;
      try {
        enrollmentsResponse = await databases.listDocuments(
          enrollmentsQueryParams.databaseId,
          enrollmentsQueryParams.collectionId,
          enrollmentsQueryParams.queries
        );
        logQuery('Get All Enrollments', enrollmentsQueryParams, {
          total: enrollmentsResponse.total,
          documents: enrollmentsResponse.documents.map(e => ({
            $id: e.$id,
            student_id: e.student_id,
            exam_id: e.exam_id,
            enrolled_at: e.enrolled_at
          }))
        });
      } catch (err) {
        logQuery('Get All Enrollments', enrollmentsQueryParams, null, err);
        throw err;
      }

      const filteredEnrollments = enrollmentsResponse.documents.filter(enrollment => {
        const studentRef = enrollment.student_id;
        if (Array.isArray(studentRef)) {
          return studentRef.some(s => s.$id === student.$id);
        } else if (typeof studentRef === 'object' && studentRef !== null) {
          return studentRef.$id === student.$id;
        } else {
          return studentRef === student.$id;
        }
      });

      console.log('Client-side filtered enrollments:', {
        originalCount: enrollmentsResponse.total,
        filteredCount: filteredEnrollments.length,
        enrollments: filteredEnrollments
      });

      const examsQueryParams = {
        databaseId,
        collectionId: examsCollectionId,
        queries: []
      };

      let examsResponse;
      try {
        examsResponse = await databases.listDocuments(
          examsQueryParams.databaseId,
          examsQueryParams.collectionId,
          examsQueryParams.queries
        );
        logQuery('Get All Exams', examsQueryParams, {
          total: examsResponse.total,
          documents: examsResponse.documents.map(e => ({
            $id: e.$id,
            exam_id: e.exam_id,
            name: e.name,
            status: e.status
          }))
        });
      } catch (err) {
        logQuery('Get All Exams', examsQueryParams, null, err);
        throw err;
      }

      setExams(examsResponse.documents);
      setEnrollments(filteredEnrollments);
    } catch (err) {
      console.error('Error in fetchStudentData:', {
        message: err.message,
        stack: err.stack,
        timestamp: new Date().toISOString()
      });
      setError(err.message || 'Failed to load your enrollments. Please try again later.');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchStudentData();
  }, [router]);

  const getExamDetails = (examId) => {
    if (!examId) return null;
    let resolvedExamId;
    if (Array.isArray(examId)) {
      resolvedExamId = examId[0]?.$id || examId[0];
    } else if (typeof examId === 'object' && examId !== null) {
      resolvedExamId = examId.$id;
    } else {
      resolvedExamId = examId;
    }

    const exam = exams.find(e => e.$id === resolvedExamId || e.exam_id === resolvedExamId);
    if (!exam) {
      console.warn('Exam not found for ID:', examId);
      return null;
    }
    return exam;
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    } catch (err) {
      console.error('Error formatting date:', dateString, err);
      return 'Invalid Date';
    }
  };

  const handleStartExam = (examId) => {
    console.log('Starting exam with ID:', examId);
    router.push(`/student/exams/${examId}`);
  };

  if (loading) {
    return (
      <div className="container mx-auto px-4 sm:px-6 py-8 font-inter">
        <div className="bg-white rounded-lg shadow-md border border-gray-200 p-6 mb-6">
          <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3">
            <h1 className="text-2xl sm:text-3xl font-extrabold text-gray-800 flex items-center">
              <FileText className="mr-2 text-blue-600" size={24} />
              My Exams
            </h1>
          </div>
        </div>
        <div className="flex justify-center items-center h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
          <span className="ml-3 text-gray-600">Loading your exams...</span>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container mx-auto px-4 sm:px-6 py-8 font-inter">
        <div className="bg-white rounded-lg shadow-md border border-gray-200 p-6 mb-6">
          <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3">
            <h1 className="text-2xl sm:text-3xl font-extrabold text-gray-800 flex items-center">
              <FileText className="mr-2 text-blue-600" size={24} />
              My Exams
            </h1>
          </div>
        </div>
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded-lg shadow-sm">
          <p className="font-semibold">Error loading exams:</p>
          <p className="mt-1">{error}</p>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 sm:px-6 py-8 font-inter">
      <div className="bg-white rounded-lg shadow-md border border-gray-200 p-6 mb-6">
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3">
          <div>
            <h1 className="text-2xl sm:text-3xl font-extrabold text-gray-800 flex items-center">
              <FileText className="mr-2 text-blue-600" size={24} />
              My Exams
            </h1>
            {studentInfo && (
              <p className="mt-1 text-sm text-gray-600">
                Welcome, {studentInfo.name} ({studentInfo.email})
              </p>
            )}
          </div>
        </div>
      </div>

      {enrollments.length === 0 ? (
        <div className="bg-blue-50 border-l-4 border-blue-500 text-blue-700 p-4 rounded-lg shadow-sm">
          <p className="font-semibold">No enrollments found</p>
          <p className="mt-1">You are not currently enrolled in any exams.</p>
        </div>
      ) : (
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {enrollments.map((enrollment) => {
            const exam = getExamDetails(enrollment.exam_id);
            if (!exam) {
              console.warn('Skipping enrollment - exam not found:', enrollment);
              return null;
            }

            return (
              <div
                key={enrollment.$id}
                className="p-4 border border-gray-200 bg-white rounded-md shadow-sm hover:bg-gray-50 transition-colors"
              >
                <h2 className="text-lg font-semibold text-gray-800">{exam.name}</h2>
                <div className="mt-2 space-y-2 text-sm text-gray-600">
                  <p><span className="font-semibold">Exam ID:</span> {exam.exam_id || exam.$id}</p>
                  <p><span className="font-semibold">Date:</span> {formatDate(exam.exam_date)}</p>
                  <p><span className="font-semibold">Duration:</span> {exam.duration} minutes</p>
                  <p>
                    <span className="font-semibold">Status:</span>
                    <span
                      className={`ml-1 px-2 py-1 rounded-full text-xs font-semibold ${
                        exam.status === 'active'
                          ? 'bg-green-100 text-green-800'
                          : exam.status === 'completed'
                          ? 'bg-gray-100 text-gray-800'
                          : 'bg-yellow-100 text-yellow-800'
                      }`}
                    >
                      {exam.status}
                    </span>
                  </p>
                  <p><span className="font-semibold">Enrolled on:</span> {formatDate(enrollment.enrolled_at)}</p>
                </div>
                <div className="mt-4">
                  <button
                    onClick={() => handleStartExam(exam.$id)}
                    disabled={exam.status !== 'active'}
                    className={`w-full px-4 py-2 rounded-md text-base font-semibold shadow-sm text-white ${
                      exam.status === 'active'
                        ? 'bg-blue-600 hover:bg-blue-700'
                        : 'bg-gray-400 cursor-not-allowed'
                    }`}
                  >
                    {exam.status === 'active' ? 'Start Exam' : 'Exam Not Available'}
                  </button>
                </div>
              </div>
            );
          })}
        </div>
      )}
    </div>
  );
};

export default StudentExamsPage;-e [1;34m===== ./pages/student/exams/take/[id].jsx =====[0m
import { useRouter } from 'next/router';
import { useState, useEffect } from 'react';
import { databases, Query, ID } from '../../../utils/appwrite';
import StudentLayout from '../../../components/StudentLayout';

const TakeExamPage = () => {
  const router = useRouter();
  const { id } = router.query;
  const [exam, setExam] = useState(null);
  const [questions, setQuestions] = useState([]);
  const [answers, setAnswers] = useState({});
  const [timeLeft, setTimeLeft] = useState(0);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [submitting, setSubmitting] = useState(false);

  useEffect(() => {
    if (!id) return;

    const fetchExamData = async () => {
      try {
        const examData = await databases.getDocument(
          process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
          process.env.NEXT_PUBLIC_APPWRITE_EXAMS_COLLECTION_ID,
          id
        );

        const examQuestions = await databases.listDocuments(
          process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
          process.env.NEXT_PUBLIC_APPWRITE_EXAM_QUESTIONS_COLLECTION_ID,
          [Query.equal('exam_id', id)]
        );

        const questionIds = examQuestions.documents.map(q => q.question_id);
        const questionsData = await databases.listDocuments(
          process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
          process.env.NEXT_PUBLIC_APPWRITE_QUESTIONS_COLLECTION_ID,
          [Query.equal('$id', questionIds)]
        );

        const questionsWithDetails = questionsData.documents.map(question => {
          const examQuestion = examQuestions.documents.find(
            eq => eq.question_id === question.$id
          );
          return {
            ...question,
            marks: examQuestion?.marks || 1,
            order: examQuestion?.order || 0
          };
        }).sort((a, b) => a.order - b.order);

        const initialAnswers = {};
        questionsWithDetails.forEach(q => {
          initialAnswers[q.$id] = null;
        });

        const endTime = new Date(examData.exam_date).getTime() + examData.duration * 60000;
        const remaining = Math.max(0, Math.floor((endTime - Date.now()) / 60000));

        setExam(examData);
        setQuestions(questionsWithDetails);
        setAnswers(initialAnswers);
        setTimeLeft(remaining);
      } catch (err) {
        setError('Failed to load exam data');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchExamData();

    const timer = setInterval(() => {
      setTimeLeft(prev => {
        if (prev <= 1) {
          clearInterval(timer);
          handleSubmit();
          return 0;
        }
        return prev - 1;
      });
    }, 60000);

    return () => clearInterval(timer);
  }, [id]);

  const handleAnswerChange = (questionId, answer) => {
    setAnswers(prev => ({
      ...prev,
      [questionId]: answer
    }));
  };

  const handleSubmit = async () => {
    if (submitting) return;
    setSubmitting(true);

    try {
      const studentSession = JSON.parse(localStorage.getItem('studentSession'));
      if (!studentSession) {
        throw new Error('Student session not found');
      }

      let score = 0;
      questions.forEach(question => {
        if (question.correct_answer === answers[question.$id]) {
          score += question.marks || 1;
        }
      });

      await databases.createDocument(
        process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
        process.env.NEXT_PUBLIC_APPWRITE_RESULTS_COLLECTION_ID,
        ID.unique(),
        {
          exam_id: id,
          student_id: studentSession.$id,
          student_name: studentSession.name,
          score,
          total_marks: questions.reduce((sum, q) => sum + (q.marks || 1), 0),
          answers: JSON.stringify(answers),
          submitted_at: new Date().toISOString()
        }
      );

      router.push(`/student/results/${id}`);
    } catch (err) {
      setError('Failed to submit exam: ' + err.message);
      console.error(err);
    } finally {
      setSubmitting(false);
    }
  };

  if (loading) {
    return (
      <StudentLayout>
        <div className="flex justify-center items-center h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
      </StudentLayout>
    );
  }

  if (error) {
    return (
      <StudentLayout>
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4">
          <p>{error}</p>
        </div>
      </StudentLayout>
    );
  }

  return (
    <StudentLayout>
      <div className="container mx-auto px-4 py-6">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-2xl font-bold text-gray-800">{exam?.name}</h1>
          <div className="bg-red-100 text-red-800 px-3 py-1 rounded-full">
            Time Left: {timeLeft} minute{timeLeft !== 1 ? 's' : ''}
          </div>
        </div>

        <div className="bg-white rounded-lg shadow p-6 mb-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h2 className="text-sm font-medium text-gray-500">Exam ID</h2>
              <p className="mt-1 text-gray-800">{exam?.exam_id}</p>
            </div>
            <div>
              <h2 className="text-sm font-medium text-gray-500">Duration</h2>
              <p className="mt-1 text-gray-800">{exam?.duration} minutes</p>
            </div>
          </div>
        </div>

        <div className="space-y-6">
          {questions.map((question, index) => (
            <div key={question.$id} className="bg-white rounded-lg shadow p-6">
              <div className="flex justify-between items-start mb-4">
                <h2 className="text-lg font-medium text-gray-800">
                  Question {index + 1} ({question.marks} mark{question.marks !== 1 ? 's' : ''})
                </h2>
                <span className={`px-2 py-1 rounded-full text-xs ${
                  question.difficulty === 'easy' ? 'bg-green-100 text-green-800' :
                  question.difficulty === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                  'bg-red-100 text-red-800'
                }`}>
                  {question.difficulty}
                </span>
              </div>

              <p className="mb-4 text-gray-800">{question.text}</p>

              {question.type === 'mcq' && question.options_text && (
                <div className="space-y-2">
                  {question.options_text.map((option, i) => (
                    <div key={i} className="flex items-center">
                      <input
                        type="radio"
                        id={`q${question.$id}-opt${i}`}
                        name={`q${question.$id}`}
                        checked={answers[question.$id] === i}
                        onChange={() => handleAnswerChange(question.$id, i)}
                        className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300"
                      />
                      <label htmlFor={`q${question.$id}-opt${i}`} className="ml-2 block text-sm text-gray-700">
                        {String.fromCharCode(65 + i)}. {option}
                      </label>
                    </div>
                  ))}
                </div>
              )}

              {question.type === 'text' && (
                <textarea
                  value={answers[question.$id] || ''}
                  onChange={(e) => handleAnswerChange(question.$id, e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  rows={4}
                  placeholder="Type your answer here..."
                />
              )}
            </div>
          ))}
        </div>

        <div className="mt-6 flex justify-end">
          <button
            onClick={handleSubmit}
            disabled={submitting}
            className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-md disabled:opacity-50"
          >
            {submitting ? 'Submitting...' : 'Submit Exam'}
          </button>
        </div>
      </div>
    </StudentLayout>
  );
};

export default TakeExamPage;-e [1;34m===== ./pages/student/profile.jsx =====[0m
import { useState, useEffect } from 'react';
import { account } from '../../utils/appwrite';
import StudentLayout from '../../components/StudentLayout';

const StudentProfilePage = () => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    department: '',
    studentId: ''
  });
  const [isEditing, setIsEditing] = useState(false);

  useEffect(() => {
    const fetchUser = async () => {
      try {
        const studentSession = JSON.parse(localStorage.getItem('studentSession'));
        if (!studentSession) {
          throw new Error('Student session not found');
        }

        setUser(studentSession);
        setFormData({
          name: studentSession.name || '',
          email: studentSession.email || '',
          phone: studentSession.phone || '',
          department: studentSession.department || '',
          studentId: studentSession.studentId || ''
        });
      } catch (err) {
        setError('Failed to load profile data');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchUser();
  }, []);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    
    try {
      const studentSession = JSON.parse(localStorage.getItem('studentSession'));
      if (!studentSession) {
        throw new Error('Student session not found');
      }

      // Update local session data
      const updatedSession = {
        ...studentSession,
        name: formData.name,
        phone: formData.phone,
        department: formData.department,
        studentId: formData.studentId
      };

      localStorage.setItem('studentSession', JSON.stringify(updatedSession));
      setUser(updatedSession);

      setSuccess('Profile updated successfully!');
      setIsEditing(false);
    } catch (err) {
      setError(err.message || 'Failed to update profile');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  if (loading && !user) {
    return (
      <StudentLayout>
        <div className="flex justify-center items-center h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
      </StudentLayout>
    );
  }

  return (
    <StudentLayout>
      <div className="container mx-auto px-4 py-6">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-2xl font-bold text-gray-800">My Profile</h1>
          {!isEditing && (
            <button
              onClick={() => setIsEditing(true)}
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
            >
              Edit Profile
            </button>
          )}
        </div>

        {error && (
          <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4">
            <p>{error}</p>
          </div>
        )}

        {success && (
          <div className="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-4">
            <p>{success}</p>
          </div>
        )}

        {isEditing ? (
          <form onSubmit={handleSubmit} className="bg-white shadow rounded-lg p-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-1">
                  Full Name
                </label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  value={formData.name}
                  onChange={handleInputChange}
                  required
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                />
              </div>

              <div>
                <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
                  Email
                </label>
                <input
                  type="email"
                  id="email"
                  name="email"
                  value={formData.email}
                  disabled
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm bg-gray-100 cursor-not-allowed"
                />
              </div>

              <div>
                <label htmlFor="studentId" className="block text-sm font-medium text-gray-700 mb-1">
                  Student ID
                </label>
                <input
                  type="text"
                  id="studentId"
                  name="studentId"
                  value={formData.studentId}
                  onChange={handleInputChange}
                  required
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                />
              </div>

              <div>
                <label htmlFor="department" className="block text-sm font-medium text-gray-700 mb-1">
                  Department
                </label>
                <select
                  id="department"
                  name="department"
                  value={formData.department}
                  onChange={handleInputChange}
                  required
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="">Select Department</option>
                  <option value="Computer Science">Computer Science</option>
                  <option value="Electrical Engineering">Electrical Engineering</option>
                  <option value="Mechanical Engineering">Mechanical Engineering</option>
                  <option value="Business Administration">Business Administration</option>
                </select>
              </div>

              <div>
                <label htmlFor="phone" className="block text-sm font-medium text-gray-700 mb-1">
                  Phone Number
                </label>
                <input
                  type="tel"
                  id="phone"
                  name="phone"
                  value={formData.phone}
                  onChange={handleInputChange}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
            </div>

            <div className="mt-6 flex justify-end space-x-3">
              <button
                type="button"
                onClick={() => {
                  setIsEditing(false);
                  setError(null);
                  setSuccess(null);
                }}
                className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300"
              >
                Cancel
              </button>
              <button
                type="submit"
                disabled={loading}
                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50"
              >
                {loading ? 'Saving...' : 'Save Changes'}
              </button>
            </div>
          </form>
        ) : (
          <div className="bg-white shadow rounded-lg p-6">
            <div className="flex items-center space-x-4 mb-6">
              <div className="w-20 h-20 rounded-full bg-blue-100 flex items-center justify-center text-blue-600 text-2xl font-bold">
                {user?.name?.charAt(0)?.toUpperCase() || 'U'}
              </div>
              <div>
                <h2 className="text-xl font-semibold">{user?.name}</h2>
                <p className="text-gray-600">{user?.email}</p>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h3 className="text-sm font-medium text-gray-500">Student ID</h3>
                <p className="mt-1 text-gray-800">{formData.studentId || 'Not set'}</p>
              </div>

              <div>
                <h3 className="text-sm font-medium text-gray-500">Department</h3>
                <p className="mt-1 text-gray-800">{formData.department || 'Not set'}</p>
              </div>

              <div>
                <h3 className="text-sm font-medium text-gray-500">Phone Number</h3>
                <p className="mt-1 text-gray-800">{formData.phone || 'Not set'}</p>
              </div>

              <div>
                <h3 className="text-sm font-medium text-gray-500">Account Created</h3>
                <p className="mt-1 text-gray-800">
                  {new Date(user?.$createdAt).toLocaleDateString()}
                </p>
              </div>
            </div>
          </div>
        )}
      </div>
    </StudentLayout>
  );
};

export default StudentProfilePage;-e [1;34m===== ./pages/api/hello.js =====[0m
// Next.js API route support: https://nextjs.org/docs/api-routes/introduction

export default function handler(req, res) {
  res.status(200).json({ name: "John Doe" });
}
-e [1;34m===== ./pages/exams/upcoming.jsx =====[0m
import React from 'react';
import { Calendar, Clock, AlertCircle } from 'lucide-react';

const UpcomingExams = () => {
  const exams = [
    {
      id: 1,
      title: 'Physics Mid-term',
      course: 'Physics 101',
      date: '2025-03-15',
      time: '10:00 AM',
      duration: '2 hours',
      topics: ['Mechanics', 'Thermodynamics', 'Waves'],
      instructions: ['Bring calculator', 'No phones allowed'],
    },
    // Add more upcoming exams here
  ];

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold text-gray-800 mb-6">Upcoming Exams</h1>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2 space-y-6">
          {exams.map((exam) => (
            <div key={exam.id} className="bg-white rounded-xl shadow-sm overflow-hidden">
              <div className="p-6">
                <div className="flex items-center justify-between mb-4">
                  <div>
                    <h2 className="text-xl font-semibold text-gray-900">{exam.title}</h2>
                    <p className="text-gray-500">{exam.course}</p>
                  </div>
                  <div className="flex items-center gap-2">
                    <Clock size={20} className="text-gray-400" />
                    <span className="text-gray-600">{exam.duration}</span>
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4 mb-6">
                  <div className="flex items-center gap-3">
                    <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                      <Calendar className="text-blue-600" size={20} />
                    </div>
                    <div>
                      <p className="text-sm text-gray-500">Date</p>
                      <p className="font-medium text-gray-900">{exam.date}</p>
                    </div>
                  </div>
                  <div className="flex items-center gap-3">
                    <div className="w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center">
                      <Clock className="text-purple-600" size={20} />
                    </div>
                    <div>
                      <p className="text-sm text-gray-500">Time</p>
                      <p className="font-medium text-gray-900">{exam.time}</p>
                    </div>
                  </div>
                </div>

                <div className="border-t border-gray-100 pt-4">
                  <h3 className="font-medium text-gray-900 mb-2">Topics Covered</h3>
                  <div className="flex flex-wrap gap-2">
                    {exam.topics.map((topic, index) => (
                      <span
                        key={index}
                        className="px-3 py-1 bg-gray-50 rounded-full text-sm text-gray-600"
                      >
                        {topic}
                      </span>
                    ))}
                  </div>
                </div>

                <div className="border-t border-gray-100 mt-4 pt-4">
                  <h3 className="font-medium text-gray-900 mb-2">Instructions</h3>
                  <ul className="space-y-2">
                    {exam.instructions.map((instruction, index) => (
                      <li key={index} className="flex items-center gap-2 text-gray-600">
                        <AlertCircle size={16} className="text-amber-500" />
                        {instruction}
                      </li>
                    ))}
                  </ul>
                </div>
              </div>

              <div className="bg-gray-50 px-6 py-4">
                <button className="w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                  Prepare for Exam
                </button>
              </div>
            </div>
          ))}
        </div>

        {/* Right Sidebar */}
        <div className="space-y-6">
          <div className="bg-white rounded-xl shadow-sm p-6">
            <h2 className="text-lg font-semibold text-gray-800 mb-4">Exam Calendar</h2>
            {/* Calendar component would go here */}
            <div className="border border-gray-200 rounded-lg p-4 text-center text-gray-500">
              Calendar Component
            </div>
          </div>

          <div className="bg-amber-50 rounded-xl shadow-sm p-6">
            <div className="flex items-center gap-3 mb-4">
              <div className="w-10 h-10 bg-amber-100 rounded-full flex items-center justify-center">
                <AlertCircle className="text-amber-600" size={20} />
              </div>
              <h2 className="text-lg font-semibold text-amber-900">Important Notice</h2>
            </div>
            <p className="text-amber-800 mb-4">
              Make sure to review all course materials and complete practice tests before your exams.
            </p>
            <button className="w-full px-4 py-2 bg-amber-600 text-white rounded-lg hover:bg-amber-700 transition-colors">
              View Study Resources
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default UpcomingExams;
-e [1;34m===== ./pages/exams/completed.jsx =====[0m
import React from 'react';
import { CheckCircle, Search, Filter, Download } from 'lucide-react';

const Completed = () => {
  const exams = [
    {
      id: 1,
      title: 'Mathematics Final',
      course: 'Mathematics 101',
      date: '2025-03-01',
      score: 85,
      duration: '2 hours',
      questions: 50,
      correct: 42,
    },
    // Add more completed exams here
  ];

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold text-gray-800">Completed Exams</h1>
        <div className="flex items-center gap-4">
          <button className="flex items-center gap-2 px-4 py-2 border border-gray-200 rounded-lg hover:bg-gray-50">
            <Download size={20} />
            <span>Export Results</span>
          </button>
        </div>
      </div>

      <div className="bg-white rounded-xl shadow-sm">
        <div className="p-4 border-b border-gray-200">
          <div className="flex items-center gap-4">
            <div className="flex-1 relative">
              <input
                type="text"
                placeholder="Search exams..."
                className="w-full pl-10 pr-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
              <Search className="absolute left-3 top-2.5 text-gray-400" size={20} />
            </div>
            <button className="flex items-center gap-2 px-4 py-2 border border-gray-200 rounded-lg hover:bg-gray-50">
              <Filter size={20} />
              <span>Filters</span>
            </button>
          </div>
        </div>

        <div className="p-4">
          <div className="space-y-4">
            {exams.map((exam) => (
              <div
                key={exam.id}
                className="border border-gray-100 rounded-lg p-4 hover:bg-gray-50"
              >
                <div className="flex items-center justify-between mb-4">
                  <div className="flex items-center gap-4">
                    <div className="w-12 h-12 bg-emerald-100 rounded-lg flex items-center justify-center">
                      <CheckCircle className="text-emerald-600" size={24} />
                    </div>
                    <div>
                      <h3 className="font-medium text-gray-900">{exam.title}</h3>
                      <p className="text-sm text-gray-500">{exam.course}</p>
                    </div>
                  </div>
                  <div className="text-right">
                    <div className="text-2xl font-semibold text-emerald-600">
                      {exam.score}%
                    </div>
                    <p className="text-sm text-gray-500">Final Score</p>
                  </div>
                </div>

                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  <div>
                    <p className="text-sm text-gray-500">Date Completed</p>
                    <p className="font-medium text-gray-900">{exam.date}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500">Duration</p>
                    <p className="font-medium text-gray-900">{exam.duration}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500">Questions</p>
                    <p className="font-medium text-gray-900">{exam.questions}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500">Correct Answers</p>
                    <p className="font-medium text-gray-900">{exam.correct}</p>
                  </div>
                </div>

                <div className="mt-4 flex justify-end">
                  <button className="text-blue-600 hover:text-blue-700 font-medium text-sm">
                    View Details
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Completed;
-e [1;34m===== ./pages/exams/take.jsx =====[0m
import React, { useState } from 'react';
import { Clock, AlertCircle, ChevronLeft, ChevronRight } from 'lucide-react';

const TakeExam = () => {
  const [currentQuestion, setCurrentQuestion] = useState(0);

  const exam = {
    title: 'Mathematics Final Exam',
    duration: '2 hours',
    totalQuestions: 50,
    questions: [
      {
        id: 1,
        question: 'What is the solution to the equation 2x + 5 = 13?',
        options: ['x = 4', 'x = 6', 'x = 8', 'x = 10'],
        type: 'single',
      },
      {
        id: 2,
        question: 'solution to the equation 2x + 5 = 13?',
        options: ['x = 4', 'x = 6', 'x = 8', 'x = 10'],
        type: 'single',
      },
      // Add more questions here
    ],
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b border-gray-200 px-6 py-4">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-xl font-bold text-gray-800">{exam.title}</h1>
            <p className="text-sm text-gray-500">
              Question {currentQuestion + 1} of {exam.totalQuestions}
            </p>
          </div>
          <div className="flex items-center gap-6">
            <div className="flex items-center gap-2">
              <Clock size={20} className="text-gray-400" />
              <span className="text-lg font-medium text-gray-900">01:45:30</span>
            </div>
            <button className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors">
              Submit Exam
            </button>
          </div>
        </div>

        {/* Progress bar */}
        <div className="mt-4 h-1 bg-gray-200 rounded-full overflow-hidden">
          <div
            className="h-full bg-blue-600"
            style={{ width: `${((currentQuestion + 1) / exam.totalQuestions) * 100}%` }}
          ></div>
        </div>
      </div>

      {/* Question Area */}
      <div className="max-w-4xl mx-auto p-6">
        <div className="bg-white rounded-xl shadow-sm p-6">
          <div className="space-y-6">
            <div>
              <h2 className="text-lg font-medium text-gray-900 mb-4">
                {exam.questions[currentQuestion].question}
              </h2>
              <div className="space-y-3">
                {exam.questions[currentQuestion].options.map((option, index) => (
                  <label
                    key={index}
                    className="flex items-center gap-3 p-4 border border-gray-200 rounded-lg cursor-pointer hover:bg-gray-50"
                  >
                    <input
                      type="radio"
                      name={`question-${currentQuestion}`}
                      className="w-4 h-4 text-blue-600"
                    />
                    <span className="text-gray-700">{option}</span>
                  </label>
                ))}
              </div>
            </div>

            <div className="flex items-center justify-between pt-6 border-t border-gray-200">
              <button
                onClick={() => setCurrentQuestion(Math.max(0, currentQuestion - 1))}
                disabled={currentQuestion === 0}
                className="flex items-center gap-2 px-4 py-2 text-gray-600 hover:text-gray-900 disabled:opacity-50"
              >
                <ChevronLeft size={20} />
                Previous
              </button>
              <button
                onClick={() => setCurrentQuestion(Math.min(exam.totalQuestions - 1, currentQuestion + 1))}
                disabled={currentQuestion === exam.totalQuestions - 1}
                className="flex items-center gap-2 px-4 py-2 text-gray-600 hover:text-gray-900 disabled:opacity-50"
              >
                Next
                <ChevronRight size={20} />
              </button>
            </div>
          </div>
        </div>

        {/* Question Navigation */}
        <div className="mt-6 bg-white rounded-xl shadow-sm p-6">
          <h3 className="text-sm font-medium text-gray-700 mb-4">Question Navigation</h3>
          <div className="grid grid-cols-10 gap-2">
            {Array.from({ length: exam.totalQuestions }).map((_, index) => (
              <button
                key={index}
                onClick={() => setCurrentQuestion(index)}
                className={`w-10 h-10 rounded-lg flex items-center justify-center text-sm font-medium ${
                  currentQuestion === index
                    ? 'bg-blue-600 text-white'
                    : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                }`}
              >
                {index + 1}
              </button>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default TakeExam;
-e [1;34m===== ./pages/test/students-test.js =====[0m
// pages/students-test.js
import { useState, useEffect } from 'react';
import { databases } from '../../utils/appwrite';
import { ID } from 'appwrite';

const StudentsTestPage = () => {
  const [students, setStudents] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [formData, setFormData] = useState({
    student_id: '',
    name: '',
    email: '',
    password: '',
    status: 'active',
    registered_at: new Date().toISOString(),
    registered_by: 'test-user'
  });
  const [editingId, setEditingId] = useState(null);

  const databaseId = '67a5a946002e8a51f8fe';
  const collectionId = 'students';

  const fetchStudents = async () => {
    setLoading(true);
    try {
      const response = await databases.listDocuments(databaseId, collectionId);
      setStudents(response.documents);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      if (editingId) {
        // Update existing student
        await databases.updateDocument(
          databaseId,
          collectionId,
          editingId,
          {
            ...formData,
            // Don't update password unless it's changed (you might want to add password change logic)
            password: formData.password || students.find(s => s.$id === editingId).password
          }
        );
      } else {
        // Create new student
        await databases.createDocument(
          databaseId, 
          collectionId,
          ID.unique(),
          formData
        );
      }
      await fetchStudents();
      resetForm();
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleEdit = (student) => {
    setFormData({
      student_id: student.student_id,
      name: student.name,
      email: student.email,
      password: '', // Don't show password when editing (or you could show a placeholder)
      status: student.status,
      registered_at: student.registered_at,
      registered_by: student.registered_by
    });
    setEditingId(student.$id);
  };

  const handleDelete = async (id) => {
    if (!window.confirm('Are you sure you want to delete this student?')) return;
    
    setLoading(true);
    try {
      await databases.deleteDocument(databaseId, collectionId, id);
      await fetchStudents();
      if (editingId === id) {
        resetForm();
      }
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const resetForm = () => {
    setFormData({
      student_id: '',
      name: '',
      email: '',
      password: '',
      status: 'active',
      registered_at: new Date().toISOString(),
      registered_by: 'test-user'
    });
    setEditingId(null);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  useEffect(() => {
    fetchStudents();
  }, []);

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-6">Students Management</h1>
      
      {error && (
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4 rounded">
          <p>{error}</p>
        </div>
      )}
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        {/* Form */}
        <div className="bg-white p-6 rounded-lg shadow">
          <h2 className="text-xl font-semibold mb-4">
            {editingId ? 'Edit Student' : 'Add New Student'}
          </h2>
          <form onSubmit={handleSubmit}>
            <div className="mb-4">
              <label className="block mb-2">Student ID</label>
              <input
                type="text"
                name="student_id"
                value={formData.student_id}
                onChange={handleChange}
                className="w-full p-2 border rounded"
                required
                disabled={editingId} // Disable editing of student_id
              />
            </div>
            <div className="mb-4">
              <label className="block mb-2">Name</label>
              <input
                type="text"
                name="name"
                value={formData.name}
                onChange={handleChange}
                className="w-full p-2 border rounded"
                required
              />
            </div>
            <div className="mb-4">
              <label className="block mb-2">Email</label>
              <input
                type="email"
                name="email"
                value={formData.email}
                onChange={handleChange}
                className="w-full p-2 border rounded"
                required
              />
            </div>
            <div className="mb-4">
              <label className="block mb-2">Password</label>
              <input
                type="password"
                name="password"
                value={formData.password}
                onChange={handleChange}
                className="w-full p-2 border rounded"
                placeholder={editingId ? "Leave blank to keep current" : ""}
                required={!editingId}
              />
            </div>
            <div className="mb-4">
              <label className="block mb-2">Status</label>
              <select
                name="status"
                value={formData.status}
                onChange={handleChange}
                className="w-full p-2 border rounded"
              >
                <option value="active">Active</option>
                <option value="inactive">Inactive</option>
              </select>
            </div>
            <div className="flex space-x-2">
              <button
                type="submit"
                disabled={loading}
                className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 flex-1"
              >
                {loading ? 'Saving...' : editingId ? 'Update Student' : 'Add Student'}
              </button>
              {editingId && (
                <button
                  type="button"
                  onClick={resetForm}
                  className="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600"
                >
                  Cancel
                </button>
              )}
            </div>
          </form>
        </div>
        
        {/* Data Display */}
        <div className="bg-white p-6 rounded-lg shadow">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold">Students List</h2>
            <button 
              onClick={fetchStudents}
              disabled={loading}
              className="text-sm bg-gray-100 hover:bg-gray-200 px-3 py-1 rounded"
            >
              Refresh
            </button>
          </div>
          {loading ? (
            <p>Loading students...</p>
          ) : students.length === 0 ? (
            <p>No students found</p>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full">
                <thead>
                  <tr className="border-b">
                    <th className="text-left p-2">ID</th>
                    <th className="text-left p-2">Name</th>
                    <th className="text-left p-2">Email</th>
                    <th className="text-left p-2">Status</th>
                    <th className="text-left p-2">Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {students.map(student => (
                    <tr key={student.$id} className="border-t hover:bg-gray-50">
                      <td className="p-2">{student.student_id}</td>
                      <td className="p-2">{student.name}</td>
                      <td className="p-2">{student.email}</td>
                      <td className="p-2">
                        <span className={`px-2 py-1 rounded-full text-xs ${
                          student.status === 'active' ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
                        }`}>
                          {student.status}
                        </span>
                      </td>
                      <td className="p-2">
                        <div className="flex space-x-2">
                          <button
                            onClick={() => handleEdit(student)}
                            className="text-blue-600 hover:text-blue-800 text-sm"
                          >
                            Edit
                          </button>
                          <button
                            onClick={() => handleDelete(student.$id)}
                            className="text-red-600 hover:text-red-800 text-sm"
                          >
                            Delete
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default StudentsTestPage;-e [1;34m===== ./pages/test/exam/fetch-data.js =====[0m
// pages/test/fetch-data.js
import { useState, useEffect } from "react";
import { databases } from "../../../utils/appwrite";

const FetchDataTest = () => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const databaseId = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;
  const collectionId = process.env.NEXT_PUBLIC_APPWRITE_EXAMS_COLLECTION_ID;

  const fetchData = async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await databases.listDocuments(databaseId, collectionId);
      setData(response.documents);
    } catch (err) {
      console.error("Error fetching data:", err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">Data Fetching Test</h1>
      
      <div className="mb-4">
        <button
          onClick={fetchData}
          className="bg-blue-500 text-white px-4 py-2 rounded"
          disabled={loading}
        >
          {loading ? "Loading..." : "Refresh Data"}
        </button>
      </div>

      {error && (
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4">
          <p>{error}</p>
        </div>
      )}

      <div className="bg-white shadow rounded-lg overflow-hidden">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                ID
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Name
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Date
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {data.map((item) => (
              <tr key={item.$id}>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {item.exam_id}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                  {item.name}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {new Date(item.exam_date).toLocaleString()}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default FetchDataTest;-e [1;34m===== ./pages/test/exam/update-data.js =====[0m
// pages/test/update-data.js
import { useState, useEffect } from "react";
import { databases } from "../../../utils/appwrite";

const UpdateDataTest = () => {
  const [documents, setDocuments] = useState([]);
  const [selectedDoc, setSelectedDoc] = useState(null);
  const [formData, setFormData] = useState({
    name: "",
    description: "",
    status: "active",
  });
  const [loading, setLoading] = useState(false);
  const [success, setSuccess] = useState(false);
  const [error, setError] = useState(null);

  const databaseId = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;
  const collectionId = process.env.NEXT_PUBLIC_APPWRITE_EXAMS_COLLECTION_ID;

  const fetchDocuments = async () => {
    setLoading(true);
    try {
      const response = await databases.listDocuments(databaseId, collectionId);
      setDocuments(response.documents);
    } catch (err) {
      console.error("Error fetching documents:", err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchDocuments();
  }, []);

  const handleSelect = (doc) => {
    setSelectedDoc(doc);
    setFormData({
      name: doc.name,
      description: doc.description,
      status: doc.status,
    });
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!selectedDoc) return;

    setLoading(true);
    setError(null);
    setSuccess(false);

    try {
      await databases.updateDocument(
        databaseId,
        collectionId,
        selectedDoc.$id,
        formData
      );
      setSuccess(true);
      fetchDocuments();
    } catch (err) {
      console.error("Error updating document:", err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">Data Update Test</h1>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <h2 className="text-xl font-semibold mb-2">Select Document</h2>
          {loading && !documents.length ? (
            <p>Loading documents...</p>
          ) : (
            <div className="space-y-2">
              {documents.map((doc) => (
                <div
                  key={doc.$id}
                  onClick={() => handleSelect(doc)}
                  className={`p-3 border rounded cursor-pointer ${
                    selectedDoc?.$id === doc.$id
                      ? "bg-blue-100 border-blue-300"
                      : "bg-white hover:bg-gray-50"
                  }`}
                >
                  <h3 className="font-medium">{doc.name}</h3>
                  <p className="text-sm text-gray-600">{doc.exam_id}</p>
                </div>
              ))}
            </div>
          )}
        </div>

        <div>
          {selectedDoc ? (
            <form onSubmit={handleSubmit}>
              <h2 className="text-xl font-semibold mb-2">Edit Document</h2>
              <div className="mb-4">
                <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="name">
                  Name
                </label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  value={formData.name}
                  onChange={handleChange}
                  className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                  required
                />
              </div>

              <div className="mb-4">
                <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="description">
                  Description
                </label>
                <textarea
                  id="description"
                  name="description"
                  value={formData.description}
                  onChange={handleChange}
                  className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                />
              </div>

              <div className="mb-4">
                <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="status">
                  Status
                </label>
                <select
                  id="status"
                  name="status"
                  value={formData.status}
                  onChange={handleChange}
                  className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                >
                  <option value="active">Active</option>
                  <option value="inactive">Inactive</option>
                  <option value="completed">Completed</option>
                </select>
              </div>

              {error && (
                <div className="mb-4 bg-red-100 border-l-4 border-red-500 text-red-700 p-4">
                  <p>{error}</p>
                </div>
              )}

              {success && (
                <div className="mb-4 bg-green-100 border-l-4 border-green-500 text-green-700 p-4">
                  <p>Document updated successfully!</p>
                </div>
              )}

              <button
                type="submit"
                className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
                disabled={loading}
              >
                {loading ? "Updating..." : "Update Document"}
              </button>
            </form>
          ) : (
            <div className="bg-gray-100 p-4 rounded">
              <p>Select a document to edit</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default UpdateDataTest;-e [1;34m===== ./pages/test/exam/delete-data.js =====[0m
// pages/test/delete-data.js
import { useState, useEffect } from "react";
import { databases } from "../../../utils/appwrite";

const DeleteDataTest = () => {
  const [documents, setDocuments] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(false);
  const [selectedDoc, setSelectedDoc] = useState(null);

  const databaseId = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;
  const collectionId = process.env.NEXT_PUBLIC_APPWRITE_EXAMS_COLLECTION_ID;

  const fetchDocuments = async () => {
    setLoading(true);
    try {
      const response = await databases.listDocuments(databaseId, collectionId);
      setDocuments(response.documents);
    } catch (err) {
      console.error("Error fetching documents:", err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchDocuments();
  }, []);

  const handleDelete = async () => {
    if (!selectedDoc) return;
    if (!confirm(`Are you sure you want to delete "${selectedDoc.name}"?`)) return;

    setLoading(true);
    setError(null);
    setSuccess(false);

    try {
      await databases.deleteDocument(databaseId, collectionId, selectedDoc.$id);
      setSuccess(true);
      setSelectedDoc(null);
      fetchDocuments();
    } catch (err) {
      console.error("Error deleting document:", err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">Data Deletion Test</h1>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <h2 className="text-xl font-semibold mb-2">Documents</h2>
          {loading && !documents.length ? (
            <p>Loading documents...</p>
          ) : (
            <div className="space-y-2">
              {documents.map((doc) => (
                <div
                  key={doc.$id}
                  onClick={() => setSelectedDoc(doc)}
                  className={`p-3 border rounded cursor-pointer ${
                    selectedDoc?.$id === doc.$id
                      ? "bg-red-100 border-red-300"
                      : "bg-white hover:bg-gray-50"
                  }`}
                >
                  <h3 className="font-medium">{doc.name}</h3>
                  <p className="text-sm text-gray-600">{doc.exam_id}</p>
                </div>
              ))}
            </div>
          )}
        </div>

        <div>
          {selectedDoc ? (
            <div>
              <h2 className="text-xl font-semibold mb-2">Delete Document</h2>
              <div className="bg-white p-4 rounded shadow">
                <h3 className="text-lg font-medium mb-2">{selectedDoc.name}</h3>
                <p className="text-gray-600 mb-2">ID: {selectedDoc.exam_id}</p>
                <p className="text-gray-600 mb-4">
                  Created: {new Date(selectedDoc.$createdAt).toLocaleString()}
                </p>
                <p className="mb-4">{selectedDoc.description}</p>

                {error && (
                  <div className="mb-4 bg-red-100 border-l-4 border-red-500 text-red-700 p-4">
                    <p>{error}</p>
                  </div>
                )}

                {success && (
                  <div className="mb-4 bg-green-100 border-l-4 border-green-500 text-green-700 p-4">
                    <p>Document deleted successfully!</p>
                  </div>
                )}

                <button
                  onClick={handleDelete}
                  className="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
                  disabled={loading}
                >
                  {loading ? "Deleting..." : "Delete Document"}
                </button>
              </div>
            </div>
          ) : (
            <div className="bg-gray-100 p-4 rounded">
              <p>Select a document to delete</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default DeleteDataTest;-e [1;34m===== ./pages/test/exam/relationships.js =====[0m
// pages/test/relationships.js
import { useState, useEffect } from "react";
import { databases, Query } from "../../../utils/appwrite";

const RelationshipsTest = () => {
  const [exams, setExams] = useState([]);
  const [questions, setQuestions] = useState([]);
  const [examQuestions, setExamQuestions] = useState([]);
  const [selectedExam, setSelectedExam] = useState(null);
  const [selectedQuestions, setSelectedQuestions] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(false);

  const databaseId = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;
  const examsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_EXAMS_COLLECTION_ID;
  const questionsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_QUESTIONS_COLLECTION_ID;
  const examQuestionsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_EXAM_QUESTIONS_COLLECTION_ID;

  const fetchExams = async () => {
    setLoading(true);
    try {
      const response = await databases.listDocuments(databaseId, examsCollectionId);
      setExams(response.documents);
    } catch (err) {
      console.error("Error fetching exams:", err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const fetchQuestions = async () => {
    try {
      const response = await databases.listDocuments(databaseId, questionsCollectionId);
      setQuestions(response.documents);
    } catch (err) {
      console.error("Error fetching questions:", err);
      setError(err.message);
    }
  };

  const fetchExamQuestions = async (examId) => {
    try {
      const response = await databases.listDocuments(
        databaseId,
        examQuestionsCollectionId,
        [Query.equal("exam_id", examId)]
      );
      setExamQuestions(response.documents);
      return response.documents.map(q => q.question_id);
    } catch (err) {
      console.error("Error fetching exam questions:", err);
      setError(err.message);
      return [];
    }
  };

  useEffect(() => {
    fetchExams();
    fetchQuestions();
  }, []);

  const handleSelectExam = async (exam) => {
    setSelectedExam(exam);
    setLoading(true);
    try {
      const questionIds = await fetchExamQuestions(exam.$id);
      setSelectedQuestions(questionIds);
    } catch (err) {
      console.error("Error:", err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleQuestionToggle = (questionId) => {
    setSelectedQuestions(prev => 
      prev.includes(questionId)
        ? prev.filter(id => id !== questionId)
        : [...prev, questionId]
    );
  };

  const saveRelationships = async () => {
    if (!selectedExam) return;

    setLoading(true);
    setError(null);
    setSuccess(false);

    try {
      // First delete existing relationships
      await Promise.all(
        examQuestions.map(q => 
          databases.deleteDocument(databaseId, examQuestionsCollectionId, q.$id)
        )
      );

      // Then create new relationships
      await Promise.all(
        selectedQuestions.map((questionId, index) => 
          databases.createDocument(
            databaseId,
            examQuestionsCollectionId,
            ID.unique(),
            {
              exam_id: selectedExam.$id,
              question_id: questionId,
              order: index + 1,
              marks: 1 // Default marks
            }
          )
        )
      );

      setSuccess(true);
      fetchExamQuestions(selectedExam.$id);
    } catch (err) {
      console.error("Error saving relationships:", err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">Relationship Management Test</h1>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="md:col-span-1">
          <h2 className="text-xl font-semibold mb-2">Exams</h2>
          {loading && !exams.length ? (
            <p>Loading exams...</p>
          ) : (
            <div className="space-y-2">
              {exams.map((exam) => (
                <div
                  key={exam.$id}
                  onClick={() => handleSelectExam(exam)}
                  className={`p-3 border rounded cursor-pointer ${
                    selectedExam?.$id === exam.$id
                      ? "bg-blue-100 border-blue-300"
                      : "bg-white hover:bg-gray-50"
                  }`}
                >
                  <h3 className="font-medium">{exam.name}</h3>
                  <p className="text-sm text-gray-600">{exam.exam_id}</p>
                </div>
              ))}
            </div>
          )}
        </div>

        <div className="md:col-span-1">
          <h2 className="text-xl font-semibold mb-2">All Questions</h2>
          {loading && !questions.length ? (
            <p>Loading questions...</p>
          ) : (
            <div className="space-y-2 max-h-96 overflow-y-auto">
              {questions.map((question) => (
                <div
                  key={question.$id}
                  className={`p-3 border rounded ${
                    selectedQuestions.includes(question.$id)
                      ? "bg-green-100 border-green-300"
                      : "bg-white"
                  }`}
                >
                  <div className="flex items-start space-x-2">
                    <input
                      type="checkbox"
                      checked={selectedQuestions.includes(question.$id)}
                      onChange={() => handleQuestionToggle(question.$id)}
                      className="mt-1"
                    />
                    <div>
                      <h3 className="font-medium">{question.text || "Question"}</h3>
                      <p className="text-sm text-gray-600">ID: {question.question_id}</p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>

        <div className="md:col-span-1">
          <h2 className="text-xl font-semibold mb-2">Current Exam Questions</h2>
          {selectedExam ? (
            <div className="space-y-2">
              {loading ? (
                <p>Loading exam questions...</p>
              ) : examQuestions.length > 0 ? (
                examQuestions.map((eq) => {
                  const question = questions.find(q => q.$id === eq.question_id);
                  return (
                    <div key={eq.$id} className="p-3 border rounded bg-gray-50">
                      {question ? (
                        <>
                          <h3 className="font-medium">{question.text || "Question"}</h3>
                          <p className="text-sm text-gray-600">ID: {question.question_id}</p>
                          <p className="text-sm">Order: {eq.order}</p>
                        </>
                      ) : (
                        <p>Question not found</p>
                      )}
                    </div>
                  );
                })
              ) : (
                <p>No questions assigned to this exam</p>
              )}

              {error && (
                <div className="mt-4 bg-red-100 border-l-4 border-red-500 text-red-700 p-4">
                  <p>{error}</p>
                </div>
              )}

              {success && (
                <div className="mt-4 bg-green-100 border-l-4 border-green-500 text-green-700 p-4">
                  <p>Relationships updated successfully!</p>
                </div>
              )}

              <button
                onClick={saveRelationships}
                className="mt-4 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
                disabled={loading || !selectedExam}
              >
                {loading ? "Saving..." : "Save Relationships"}
              </button>
            </div>
          ) : (
            <div className="bg-gray-100 p-4 rounded">
              <p>Select an exam to view its questions</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default RelationshipsTest;-e [1;34m===== ./pages/test/exam/querying.js =====[0m
// pages/test/querying.js
import { useState, useEffect } from "react";
import { databases, Query } from "../../../utils/appwrite";

const QueryingTest = () => {
  const [questions, setQuestions] = useState([]);
  const [filteredQuestions, setFilteredQuestions] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [difficultyFilter, setDifficultyFilter] = useState("all");
  const [tagFilter, setTagFilter] = useState("all");
  const [availableTags, setAvailableTags] = useState([]);

  const databaseId = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;
  const collectionId = process.env.NEXT_PUBLIC_APPWRITE_QUESTIONS_COLLECTION_ID;

  const fetchQuestions = async () => {
    setLoading(true);
    try {
      const response = await databases.listDocuments(databaseId, collectionId);
      setQuestions(response.documents);
      setFilteredQuestions(response.documents);

      // Extract unique tags
      const tags = new Set();
      response.documents.forEach(question => {
        if (question.tags && Array.isArray(question.tags)) {
          question.tags.forEach(tag => tags.add(tag));
        }
      });
      setAvailableTags(Array.from(tags).sort());
    } catch (err) {
      console.error("Error fetching questions:", err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchQuestions();
  }, []);

  useEffect(() => {
    let results = questions;
    
    if (searchTerm) {
      results = results.filter(question => 
        question.text?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        question.question_id?.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }
    
    if (difficultyFilter !== "all") {
      results = results.filter(question => 
        question.difficulty === difficultyFilter
      );
    }
    
    if (tagFilter !== "all") {
      results = results.filter(question => 
        question.tags && question.tags.includes(tagFilter)
      );
    }
    
    setFilteredQuestions(results);
  }, [searchTerm, difficultyFilter, tagFilter, questions]);

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">Querying Test</h1>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <div>
          <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="search">
            Search
          </label>
          <input
            type="text"
            id="search"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            placeholder="Search questions..."
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
          />
        </div>

        <div>
          <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="difficulty">
            Difficulty
          </label>
          <select
            id="difficulty"
            value={difficultyFilter}
            onChange={(e) => setDifficultyFilter(e.target.value)}
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
          >
            <option value="all">All Difficulties</option>
            <option value="easy">Easy</option>
            <option value="medium">Medium</option>
            <option value="hard">Hard</option>
          </select>
        </div>

        <div>
          <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="tags">
            Tags
          </label>
          <select
            id="tags"
            value={tagFilter}
            onChange={(e) => setTagFilter(e.target.value)}
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
          >
            <option value="all">All Tags</option>
            {availableTags.map(tag => (
              <option key={tag} value={tag}>{tag}</option>
            ))}
          </select>
        </div>
      </div>

      {error && (
        <div className="mb-4 bg-red-100 border-l-4 border-red-500 text-red-700 p-4">
          <p>{error}</p>
        </div>
      )}

      <div className="bg-white shadow rounded-lg overflow-hidden">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                ID
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Question
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Difficulty
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Tags
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {loading && !questions.length ? (
              <tr>
                <td colSpan="4" className="px-6 py-4 text-center">
                  Loading questions...
                </td>
              </tr>
            ) : filteredQuestions.length > 0 ? (
              filteredQuestions.map((question) => (
                <tr key={question.$id}>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {question.question_id}
                  </td>
                  <td className="px-6 py-4 text-sm text-gray-900">
                    {question.text || "No text provided"}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm">
                    <span className={`px-2 py-1 rounded-full text-xs ${
                      question.difficulty === "easy" 
                        ? "bg-green-100 text-green-800" 
                        : question.difficulty === "medium" 
                          ? "bg-yellow-100 text-yellow-800" 
                          : "bg-red-100 text-red-800"
                    }`}>
                      {question.difficulty}
                    </span>
                  </td>
                  <td className="px-6 py-4 text-sm text-gray-500">
                    {question.tags && question.tags.length > 0 ? (
                      <div className="flex flex-wrap gap-1">
                        {question.tags.map(tag => (
                          <span key={tag} className="px-2 py-0.5 bg-gray-100 text-gray-700 rounded-full text-xs">
                            {tag}
                          </span>
                        ))}
                      </div>
                    ) : (
                      "No tags"
                    )}
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan="4" className="px-6 py-4 text-center">
                  No questions found matching your criteria
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      <div className="mt-4">
        <p className="text-sm text-gray-600">
          Showing {filteredQuestions.length} of {questions.length} questions
        </p>
      </div>
    </div>
  );
};

export default QueryingTest;-e [1;34m===== ./pages/test/exam/create-data.js =====[0m
// pages/test/create-data.js
import { useState } from "react";
import { databases, ID } from "../../../utils/appwrite";

const CreateDataTest = () => {
  const [formData, setFormData] = useState({
    exam_id: "",
    name: "",
    description: "",
    exam_date: "",
    duration: "",
  });
  const [loading, setLoading] = useState(false);
  const [success, setSuccess] = useState(false);
  const [error, setError] = useState(null);

  const databaseId = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;
  const collectionId = process.env.NEXT_PUBLIC_APPWRITE_EXAMS_COLLECTION_ID;

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    setSuccess(false);

    try {
      await databases.createDocument(
        databaseId,
        collectionId,
        ID.unique(),
        {
          ...formData,
          duration: parseInt(formData.duration),
          status: "active",
        }
      );
      setSuccess(true);
      setFormData({
        exam_id: "",
        name: "",
        description: "",
        exam_date: "",
        duration: "",
      });
    } catch (err) {
      console.error("Error creating document:", err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">Data Creation Test</h1>
      
      <form onSubmit={handleSubmit} className="max-w-md mx-auto">
        <div className="mb-4">
          <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="exam_id">
            Exam ID
          </label>
          <input
            type="text"
            id="exam_id"
            name="exam_id"
            value={formData.exam_id}
            onChange={handleChange}
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            required
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="name">
            Exam Name
          </label>
          <input
            type="text"
            id="name"
            name="name"
            value={formData.name}
            onChange={handleChange}
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            required
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="description">
            Description
          </label>
          <textarea
            id="description"
            name="description"
            value={formData.description}
            onChange={handleChange}
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="exam_date">
            Exam Date
          </label>
          <input
            type="datetime-local"
            id="exam_date"
            name="exam_date"
            value={formData.exam_date}
            onChange={handleChange}
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            required
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="duration">
            Duration (minutes)
          </label>
          <input
            type="number"
            id="duration"
            name="duration"
            value={formData.duration}
            onChange={handleChange}
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            required
            min="1"
          />
        </div>

        {error && (
          <div className="mb-4 bg-red-100 border-l-4 border-red-500 text-red-700 p-4">
            <p>{error}</p>
          </div>
        )}

        {success && (
          <div className="mb-4 bg-green-100 border-l-4 border-green-500 text-green-700 p-4">
            <p>Document created successfully!</p>
          </div>
        )}

        <button
          type="submit"
          className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
          disabled={loading}
        >
          {loading ? "Creating..." : "Create Document"}
        </button>
      </form>
    </div>
  );
};

export default CreateDataTest;-e [1;34m===== ./pages/test/exam/exams.jsx =====[0m
// pages/admin/exams/index.js
import React, { useState, useEffect, useCallback } from "react";
import AdminLayout from "../../../components/AdminLayout";
import Modal from "../../../components/Modal";
import { databases, ID, Query, Permission, Role } from "../../../utils/appwrite";
import { account } from "../../../utils/appwrite";

const ExamsPage = () => {
  const [exams, setExams] = useState([]);
  const [filteredExams, setFilteredExams] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isQuestionModalOpen, setIsQuestionModalOpen] = useState(false);
  const [isViewQuestionsModalOpen, setIsViewQuestionsModalOpen] = useState(false);
  const [selectedExam, setSelectedExam] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [selectedExamDetail, setSelectedExamDetail] = useState(null);
  const [questions, setQuestions] = useState([]);
  const [filteredQuestions, setFilteredQuestions] = useState([]);
  const [selectedQuestions, setSelectedQuestions] = useState([]);
  const [questionMarks, setQuestionMarks] = useState({});
  const [searchTerm, setSearchTerm] = useState("");
  const [difficultyFilter, setDifficultyFilter] = useState("all");
  const [tagFilter, setTagFilter] = useState("all");
  const [availableTags, setAvailableTags] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const questionsPerPage = 10;

  const initialFormData = {
    exam_id: "",
    name: "",
    description: "",
    exam_date: "",
    duration: "",
    status: "active",
  };

  const [formData, setFormData] = useState(initialFormData);

  // Environment variables
  const databaseId = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;
  const examsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_EXAMS_COLLECTION_ID;
  const questionsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_QUESTIONS_COLLECTION_ID;
  const examQuestionsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_EXAM_QUESTIONS_COLLECTION_ID;

  // Fetch exams with all columns
  const fetchExams = useCallback(async () => {
    setIsLoading(true);
    try {
      const response = await databases.listDocuments(databaseId, examsCollectionId);
      const examsWithDates = response.documents.map(exam => ({
        ...exam,
        exam_date_obj: new Date(exam.exam_date),
        created_at_obj: new Date(exam.created_at),
        modified_at_obj: exam.modified_at ? new Date(exam.modified_at) : null
      }));
      
      const sortedExams = examsWithDates.sort((a, b) => {
        const now = new Date();
        const aIsExpired = a.exam_date_obj < now;
        const bIsExpired = b.exam_date_obj < now;
        
        if (aIsExpired && !bIsExpired) return 1;
        if (!aIsExpired && bIsExpired) return -1;
        return a.exam_date_obj - b.exam_date_obj;
      });

      setExams(sortedExams);
      setFilteredExams(sortedExams);
    } catch (err) {
      console.error("Error fetching exams:", err);
      setError("Failed to load exams. Please try again.");
    } finally {
      setIsLoading(false);
    }
  }, [databaseId, examsCollectionId]);

  // Fetch all questions with all columns
  const fetchQuestions = useCallback(async () => {
    try {
      const response = await databases.listDocuments(databaseId, questionsCollectionId);
      setQuestions(response.documents);
      setFilteredQuestions(response.documents);
      
      const tags = new Set();
      response.documents.forEach(question => {
        if (question.tags && Array.isArray(question.tags)) {
          question.tags.forEach(tag => tags.add(tag));
        }
      });
      setAvailableTags(Array.from(tags).sort());
    } catch (err) {
      console.error("Error fetching questions:", err);
      setError("Failed to load questions");
    }
  }, [databaseId, questionsCollectionId]);

  // Fetch questions for a specific exam with all columns
  const fetchExamQuestions = useCallback(async (examId) => {
    try {
      const response = await databases.listDocuments(
        databaseId,
        examQuestionsCollectionId,
        [Query.equal("exam_id", examId)]
      );

      const marksMap = {};
      const questionIds = [];
      response.documents.forEach(q => {
        marksMap[q.question_id] = q.marks;
        questionIds.push(q.question_id);
      });

      setQuestionMarks(marksMap);
      return { documents: response.documents, questionIds };
    } catch (err) {
      console.error("Error fetching exam questions:", err);
      setError("Failed to load exam questions. Please try again.");
      return { documents: [], questionIds: [] };
    }
  }, [databaseId, examQuestionsCollectionId]);

  // Fetch full question details for an exam with all columns
  const fetchQuestionsForExam = useCallback(async (examId) => {
    try {
      const examQuestions = await databases.listDocuments(
        databaseId,
        examQuestionsCollectionId,
        [Query.equal("exam_id", examId)]
      );

      if (examQuestions.documents.length > 0) {
        const questionIds = examQuestions.documents.map(q => q.question_id);
        const questionsResponse = await databases.listDocuments(
          databaseId,
          questionsCollectionId,
          [Query.equal("$id", questionIds)]
        );

        const marksMap = {};
        examQuestions.documents.forEach(q => {
          marksMap[q.question_id] = q.marks;
        });

        return {
          questions: questionsResponse.documents,
          marks: marksMap,
          examQuestions: examQuestions.documents
        };
      }

      return { questions: [], marks: {}, examQuestions: [] };
    } catch (err) {
      console.error("Error fetching questions for exam:", err);
      setError("Failed to load exam questions");
      return { questions: [], marks: {}, examQuestions: [] };
    }
  }, [databaseId, questionsCollectionId, examQuestionsCollectionId]);

  useEffect(() => {
    fetchExams();
    fetchQuestions();
  }, [fetchExams, fetchQuestions]);

  // Filter questions
  useEffect(() => {
    let results = questions;
    
    if (searchTerm) {
      results = results.filter(question => 
        question.text?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        question.question_id?.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }
    
    if (difficultyFilter !== "all") {
      results = results.filter(question => 
        question.difficulty === difficultyFilter
      );
    }
    
    if (tagFilter !== "all") {
      results = results.filter(question => 
        question.tags && question.tags.includes(tagFilter)
      );
    }
    
    setFilteredQuestions(results);
    setCurrentPage(1);
  }, [searchTerm, difficultyFilter, tagFilter, questions]);

  // Modal handlers
  const openModal = (exam = null) => {
    setSelectedExam(exam);
    setFormData(
      exam ? {
        exam_id: exam.exam_id || "",
        name: exam.name || "",
        description: exam.description || "",
        exam_date: exam.exam_date ? new Date(exam.exam_date).toISOString().slice(0, 16) : "",
        duration: exam.duration?.toString() || "",
        status: exam.status || "active",
      } : initialFormData
    );
    setIsModalOpen(true);
  };

  const openQuestionModal = async (exam) => {
    setSelectedExam(exam);
    setIsLoading(true);
    try {
      const { questionIds, documents } = await fetchExamQuestions(exam.$id);
      setSelectedQuestions(questionIds);
      
      const marksMap = {};
      documents.forEach(q => {
        marksMap[q.question_id] = q.marks;
      });
      setQuestionMarks(marksMap);
      
      setIsQuestionModalOpen(true);
    } catch (err) {
      setError("Failed to load exam questions");
    } finally {
      setIsLoading(false);
    }
  };

  const openViewQuestionsModal = async (exam) => {
    setSelectedExam(exam);
    setIsLoading(true);
    try {
      const { questions: examQuestions } = await fetchQuestionsForExam(exam.$id);
      setFilteredQuestions(examQuestions);
      setIsViewQuestionsModalOpen(true);
    } catch (err) {
      setError("Failed to load exam questions");
    } finally {
      setIsLoading(false);
    }
  };

  // Close modal handlers
  const closeModal = () => {
    setIsModalOpen(false);
    setSelectedExam(null);
    setFormData(initialFormData);
    setError(null);
  };

  const closeQuestionModal = () => {
    setIsQuestionModalOpen(false);
    setSelectedExam(null);
    setSelectedQuestions([]);
    setQuestionMarks({});
    setSearchTerm("");
    setDifficultyFilter("all");
    setTagFilter("all");
  };

  const closeViewQuestionsModal = () => {
    setIsViewQuestionsModalOpen(false);
    setSelectedExam(null);
    setFilteredQuestions(questions);
  };

  // Other handlers
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleQuestionSelect = (questionId) => {
    setSelectedQuestions(prev => {
      if (prev.includes(questionId)) {
        const newMarks = {...questionMarks};
        delete newMarks[questionId];
        setQuestionMarks(newMarks);
        return prev.filter(id => id !== questionId);
      } else {
        return [...prev, questionId];
      }
    });
  };

  const handleMarksChange = (questionId, value) => {
    setQuestionMarks(prev => ({
      ...prev,
      [questionId]: parseInt(value) || 1
    }));
  };

  // Form validation
  const validateForm = (data) => {
    if (!data.exam_id.trim()) return "Exam ID is required";
    if (!data.name.trim()) return "Exam name is required";
    if (!data.exam_date) return "Exam date is required";
    if (!data.duration || isNaN(parseInt(data.duration))) return "Duration must be a valid number";
    return null;
  };

  // Save exam with all columns
  const handleSave = async (data) => {
    const validationError = validateForm(data);
    if (validationError) {
      setError(validationError);
      return;
    }

    setIsLoading(true);
    setError(null);

    try {
      const user = await account.get();
      if (!user) throw new Error("Authentication required");

      const durationInt = parseInt(data.duration, 10);
      const timestamp = new Date().toISOString();

      if (selectedExam) {
        await databases.updateDocument(
          databaseId,
          examsCollectionId,
          selectedExam.$id,
          { 
            ...data, 
            duration: durationInt, 
            modified_at: timestamp 
          }
        );
      } else {
        await databases.createDocument(
          databaseId,
          examsCollectionId,
          ID.unique(),
          {
            ...data,
            duration: durationInt,
            created_by: user.$id,
            created_at: timestamp,
            modified_at: timestamp,
          },
          [
            Permission.read(Role.any()),
            Permission.update(Role.user(user.$id)),
            Permission.delete(Role.user(user.$id))
          ]
        );
      }

      closeModal();
      await fetchExams();
    } catch (err) {
      console.error("Error saving exam:", err);
      setError(err.message || "Failed to save exam");
    } finally {
      setIsLoading(false);
    }
  };

  // Save exam questions with all columns
  const handleSaveQuestions = async () => {
    if (!selectedExam) return;

    setIsLoading(true);
    setError(null);

    try {
      const user = await account.get();
      if (!user) throw new Error("Authentication required");

      const existingQuestions = await fetchExamQuestions(selectedExam.$id);
      
      // Delete removed questions
      const questionsToDelete = existingQuestions.documents.filter(
        q => !selectedQuestions.includes(q.question_id)
      );
      
      await Promise.all(
        questionsToDelete.map(q => 
          databases.deleteDocument(databaseId, examQuestionsCollectionId, q.$id)
        )
      );

      // Add/update questions
      await Promise.all(
        selectedQuestions.map(async (questionId, index) => {
          const existing = existingQuestions.documents.find(
            q => q.question_id === questionId
          );
          
          if (existing) {
            await databases.updateDocument(
              databaseId,
              examQuestionsCollectionId,
              existing.$id,
              { 
                order: index + 1, 
                marks: questionMarks[questionId] || 1 
              }
            );
          } else {
            await databases.createDocument(
              databaseId,
              examQuestionsCollectionId,
              ID.unique(),
              {
                exam_id: selectedExam.$id,
                question_id: questionId,
                order: index + 1,
                marks: questionMarks[questionId] || 1
              },
              [
                Permission.read(Role.any()),
                Permission.update(Role.user(user.$id)),
                Permission.delete(Role.user(user.$id))
              ]
            );
          }
        })
      );

      closeQuestionModal();
    } catch (err) {
      console.error("Error saving exam questions:", err);
      setError(err.message || "Failed to save exam questions");
    } finally {
      setIsLoading(false);
    }
  };

  // Delete exam
  const deleteExam = async (examId) => {
    if (!confirm("Are you sure you want to delete this exam?")) return;

    setIsLoading(true);
    try {
      const user = await account.get();
      if (!user) throw new Error("Authentication required");

      const examQuestions = await fetchExamQuestions(examId);
      await Promise.all(
        examQuestions.documents.map(q => 
          databases.deleteDocument(databaseId, examQuestionsCollectionId, q.$id)
        )
      );

      await databases.deleteDocument(databaseId, examsCollectionId, examId);
      await fetchExams();
      closeExamDetails();
    } catch (err) {
      console.error("Error deleting exam:", err);
      setError(err.message || "Failed to delete exam");
    } finally {
      setIsLoading(false);
    }
  };

  // Helper functions
  const formatDate = (dateString) => {
    if (!dateString) return "N/A";
    const options = { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric', 
      hour: '2-digit', 
      minute: '2-digit' 
    };
    return new Date(dateString).toLocaleDateString(undefined, options);
  };

  const getExamStatus = (examDate) => {
    if (!examDate) return "Unknown";
    const now = new Date();
    const examDateObj = new Date(examDate);
    return examDateObj < now ? "Expired" : "Upcoming";
  };

  // Pagination
  const indexOfLastQuestion = currentPage * questionsPerPage;
  const indexOfFirstQuestion = indexOfLastQuestion - questionsPerPage;
  const currentQuestions = filteredQuestions.slice(indexOfFirstQuestion, indexOfLastQuestion);
  const totalPages = Math.ceil(filteredQuestions.length / questionsPerPage);

  // View components
  const viewExamDetails = (exam) => {
    setSelectedExamDetail(exam);
  };

  const closeExamDetails = () => {
    setSelectedExamDetail(null);
  };

  // Render
  return (
    <AdminLayout>
      <div className="container mx-auto px-4 py-6">
        {/* Header and Add Exam button */}
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-2xl font-bold text-gray-800">Manage Exams</h2>
          <button
            onClick={() => openModal()}
            className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition-colors"
          >
            + Add Exam
          </button>
        </div>

        {/* Error display */}
        {error && (
          <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4">
            <p>{error}</p>
          </div>
        )}

        {/* Loading state */}
        {isLoading && !exams.length ? (
          <div className="flex justify-center items-center h-64">
            <p className="text-gray-500">Loading exams...</p>
          </div>
        ) : (
          <div className="space-y-4">
            {filteredExams.map((exam) => (
              <div 
                key={exam.$id}
                onClick={() => viewExamDetails(exam)}
                className={`p-4 border rounded-lg cursor-pointer transition-all hover:shadow-md ${
                  getExamStatus(exam.exam_date) === "Expired" 
                    ? "bg-gray-50 border-gray-200" 
                    : "bg-white border-blue-100"
                }`}
              >
                <div className="flex justify-between items-start">
                  <div>
                    <h3 className="text-lg font-semibold text-gray-800">{exam.name}</h3>
                    <p className="text-sm text-gray-600">ID: {exam.exam_id}</p>
                    <p className="text-sm text-gray-600">Created by: {exam.created_by}</p>
                  </div>
                  <div className="flex items-center space-x-2">
                    <span className={`px-2 py-1 rounded-full text-xs ${
                      exam.status === "active" 
                        ? "bg-green-100 text-green-800" 
                        : exam.status === "completed" 
                          ? "bg-blue-100 text-blue-800" 
                          : "bg-gray-100 text-gray-800"
                    }`}>
                      {exam.status}
                    </span>
                    <span className={`px-2 py-1 rounded-full text-xs ${
                      getExamStatus(exam.exam_date) === "Expired" 
                        ? "bg-red-100 text-red-800" 
                        : "bg-green-100 text-green-800"
                    }`}>
                      {getExamStatus(exam.exam_date)}
                    </span>
                  </div>
                </div>
                <div className="mt-2 text-sm text-gray-600">
                  <p>Date: {formatDate(exam.exam_date)} ‚Ä¢ Duration: {exam.duration} minutes</p>
                  <p>Created: {formatDate(exam.created_at)} ‚Ä¢ Modified: {exam.modified_at ? formatDate(exam.modified_at) : "Never"}</p>
                  {exam.description && (
                    <p className="mt-1 line-clamp-2">{exam.description}</p>
                  )}
                </div>
                <div className="mt-3 flex space-x-2">
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      openQuestionModal(exam);
                    }}
                    className="text-sm bg-purple-600 hover:bg-purple-700 text-white px-3 py-1 rounded"
                  >
                    Manage Questions
                  </button>
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      openViewQuestionsModal(exam);
                    }}
                    className="text-sm bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded"
                  >
                    View Questions
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}

        {/* Exam Modal */}
        {isModalOpen && (
          <Modal
            isOpen={isModalOpen}
            title={selectedExam ? "Edit Exam" : "Add Exam"}
            onClose={closeModal}
            onSave={handleSave}
            initialData={formData}
            fields={[
              { name: "exam_id", label: "Exam ID", type: "text", required: true },
              { name: "name", label: "Exam Name", type: "text", required: true },
              { name: "description", label: "Description", type: "textarea" },
              { name: "exam_date", label: "Exam Date", type: "datetime-local", required: true },
              { name: "duration", label: "Duration (minutes)", type: "number", required: true },
              {
                name: "status",
                label: "Status",
                type: "select",
                options: ["active", "inactive", "completed"],
                required: true,
              },
            ]}
            onChange={handleInputChange}
            isLoading={isLoading}
            error={error}
          />
        )}

        {/* Question Management Modal */}
        {isQuestionModalOpen && selectedExam && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] overflow-y-auto">
              <div className="p-6">
                <div className="flex justify-between items-start mb-4">
                  <div>
                    <h3 className="text-xl font-bold text-gray-800">
                      Manage Questions for {selectedExam.name}
                    </h3>
                    <p className="text-sm text-gray-600">
                      {selectedQuestions.length} question(s) selected
                    </p>
                  </div>
                  <button
                    onClick={closeQuestionModal}
                    className="text-gray-500 hover:text-gray-700"
                  >
                    <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>

                {error && (
                  <div className="mb-4 p-3 bg-red-100 border-l-4 border-red-500 text-red-700">
                    <p>{error}</p>
                  </div>
                )}

                <div className="mb-4 grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div>
                    <label htmlFor="search" className="block text-sm font-medium text-gray-700 mb-1">
                      Search Questions
                    </label>
                    <input
                      type="text"
                      id="search"
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      placeholder="Search by text or ID..."
                      className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                  <div>
                    <label htmlFor="difficulty" className="block text-sm font-medium text-gray-700 mb-1">
                      Filter by Difficulty
                    </label>
                    <select
                      id="difficulty"
                      value={difficultyFilter}
                      onChange={(e) => setDifficultyFilter(e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                    >
                      <option value="all">All Difficulties</option>
                      <option value="easy">Easy</option>
                      <option value="medium">Medium</option>
                      <option value="hard">Hard</option>
                    </select>
                  </div>
                  <div>
                    <label htmlFor="tags" className="block text-sm font-medium text-gray-700 mb-1">
                      Filter by Tag
                    </label>
                    <div className="relative">
                      <select
                        id="tags"
                        value={tagFilter}
                        onChange={(e) => setTagFilter(e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                      >
                        <option value="all">All Tags</option>
                        {availableTags.map(tag => (
                          <option key={tag} value={tag}>{tag}</option>
                        ))}
                      </select>
                    </div>
                  </div>
                </div>

                <div className="space-y-3">
                  {currentQuestions.length > 0 ? (
                    currentQuestions.map((question) => (
                      <div 
                        key={question.$id} 
                        className={`p-4 border rounded-lg transition-colors ${
                          selectedQuestions.includes(question.$id) 
                            ? "bg-blue-50 border-blue-200" 
                            : "bg-white border-gray-200 hover:bg-gray-50"
                        }`}
                      >
                        <div className="flex items-start space-x-3">
                          <input
                            type="checkbox"
                            checked={selectedQuestions.includes(question.$id)}
                            onChange={() => handleQuestionSelect(question.$id)}
                            className="mt-1 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                          />
                          <div className="flex-1">
                            <div className="flex justify-between items-start">
                              <h4 className="font-medium text-gray-800">
                                {question.text || "Question"}
                              </h4>
                              <span className={`px-2 py-1 text-xs rounded-full ${
                                question.difficulty === "easy" 
                                  ? "bg-green-100 text-green-800" 
                                  : question.difficulty === "medium" 
                                    ? "bg-yellow-100 text-yellow-800" 
                                    : "bg-red-100 text-red-800"
                              }`}>
                                {question.difficulty}
                              </span>
                            </div>
                            <div className="mt-1 text-sm text-gray-600">
                              <span className="mr-2">ID: {question.question_id}</span>
                              <span>Type: {question.type}</span>
                              <span>Created by: {question.created_by}</span>
                              {question.tags && question.tags.length > 0 && (
                                <div className="mt-1 flex flex-wrap gap-1">
                                  {question.tags.map(tag => (
                                    <span key={tag} className="px-2 py-0.5 bg-gray-100 text-gray-700 rounded-full text-xs">
                                      {tag}
                                    </span>
                                  ))}
                                </div>
                              )}
                            </div>
                            
                            {selectedQuestions.includes(question.$id) && (
                              <div className="mt-3 flex items-center">
                                <label htmlFor={`marks-${question.$id}`} className="mr-2 text-sm text-gray-700">
                                  Marks:
                                </label>
                                <input
                                  type="number"
                                  id={`marks-${question.$id}`}
                                  min="1"
                                  max="10"
                                  value={questionMarks[question.$id] || 1}
                                  onChange={(e) => handleMarksChange(question.$id, e.target.value)}
                                  className="w-20 px-2 py-1 border border-gray-300 rounded-md text-sm"
                                />
                              </div>
                            )}
                            
                            {question.options_text && (
                              <div className="mt-2 grid grid-cols-1 md:grid-cols-2 gap-2">
                                {question.options_text.map((option, index) => (
                                  <div 
                                    key={index} 
                                    className={`text-sm p-2 rounded ${
                                      question.correct_answer === index 
                                        ? "bg-green-100 text-green-800" 
                                        : "bg-gray-100 text-gray-800"
                                    }`}
                                  >
                                    {option}
                                  </div>
                                ))}
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    ))
                  ) : (
                    <div className="text-center py-8 text-gray-500">
                      No questions found matching your criteria
                    </div>
                  )}
                </div>

                {/* Pagination */}
                {filteredQuestions.length > questionsPerPage && (
                  <div className="mt-6 flex justify-between items-center">
                    <button
                      onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
                      disabled={currentPage === 1}
                      className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors disabled:opacity-50"
                    >
                      Previous
                    </button>
                    <span className="text-sm text-gray-700">
                      Page {currentPage} of {totalPages}
                    </span>
                    <button
                      onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}
                      disabled={currentPage === totalPages}
                      className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors disabled:opacity-50"
                    >
                      Next
                    </button>
                  </div>
                )}

                <div className="mt-6 flex justify-end space-x-3">
                  <button
                    onClick={closeQuestionModal}
                    className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors"
                    disabled={isLoading}
                  >
                    Cancel
                  </button>
                  <button
                    onClick={handleSaveQuestions}
                    className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors disabled:opacity-50"
                    disabled={isLoading}
                  >
                    {isLoading ? 'Saving...' : 'Save Questions'}
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* View Questions Modal */}
        {isViewQuestionsModalOpen && selectedExam && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] overflow-y-auto">
              <div className="p-6">
                <div className="flex justify-between items-start mb-4">
                  <div>
                    <h3 className="text-xl font-bold text-gray-800">
                      Questions for {selectedExam.name}
                    </h3>
                    <p className="text-sm text-gray-600">
                      {filteredQuestions.length} question(s)
                    </p>
                  </div>
                  <button
                    onClick={closeViewQuestionsModal}
                    className="text-gray-500 hover:text-gray-700"
                  >
                    <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>

                {error && (
                  <div className="mb-4 p-3 bg-red-100 border-l-4 border-red-500 text-red-700">
                    <p>{error}</p>
                  </div>
                )}

                <div className="space-y-4">
                  {filteredQuestions.length > 0 ? (
                    filteredQuestions.map((question) => (
                      <div key={question.$id} className="p-4 border border-gray-200 rounded-lg bg-white">
                        <div className="flex justify-between items-start">
                          <h4 className="font-medium text-gray-800">
                            {question.text || "Question"}
                          </h4>
                          <div className="flex items-center space-x-2">
                            <span className={`px-2 py-1 rounded-full text-xs ${
                              question.difficulty === "easy" 
                                ? "bg-green-100 text-green-800" 
                                : question.difficulty === "medium" 
                                  ? "bg-yellow-100 text-yellow-800" 
                                  : "bg-red-100 text-red-800"
                            }`}>
                              {question.difficulty}
                            </span>
                            <span className="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs">
                              Marks: {questionMarks[question.$id] || 1}
                            </span>
                          </div>
                        </div>
                        <div className="mt-1 text-sm text-gray-600">
                          <span className="mr-2">ID: {question.question_id}</span>
                          <span>Type: {question.type}</span>
                          <span>Created by: {question.created_by}</span>
                          {question.tags && question.tags.length > 0 && (
                            <div className="mt-1 flex flex-wrap gap-1">
                              {question.tags.map(tag => (
                                <span key={tag} className="px-2 py-0.5 bg-gray-100 text-gray-700 rounded-full text-xs">
                                  {tag}
                                </span>
                              ))}
                            </div>
                          )}
                        </div>
                        
                        {question.options_text && (
                          <div className="mt-3 grid grid-cols-1 md:grid-cols-2 gap-2">
                            {question.options_text.map((option, index) => (
                              <div 
                                key={index} 
                                className={`text-sm p-2 rounded ${
                                  question.correct_answer === index 
                                    ? "bg-green-100 text-green-800" 
                                    : "bg-gray-100 text-gray-800"
                                }`}
                              >
                                {option}
                              </div>
                            ))}
                          </div>
                        )}
                      </div>
                    ))
                  ) : (
                    <div className="text-center py-8 text-gray-500">
                      No questions found for this exam
                    </div>
                  )}
                </div>

                <div className="mt-6 flex justify-end">
                  <button
                    onClick={closeViewQuestionsModal}
                    className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors"
                  >
                    Close
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Exam Details Modal */}
        {selectedExamDetail && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] overflow-y-auto">
              <div className="p-6">
                <div className="flex justify-between items-start mb-4">
                  <div>
                    <h3 className="text-xl font-bold text-gray-800">{selectedExamDetail.name}</h3>
                    <p className="text-sm text-gray-600">ID: {selectedExamDetail.exam_id}</p>
                  </div>
                  <div className="flex items-center space-x-3">
                    <span className={`px-3 py-1 rounded-full text-xs ${
                      selectedExamDetail.status === "active" 
                        ? "bg-green-100 text-green-800" 
                        : selectedExamDetail.status === "completed" 
                          ? "bg-blue-100 text-blue-800" 
                          : "bg-gray-100 text-gray-800"
                    }`}>
                      {selectedExamDetail.status}
                    </span>
                    <span className={`px-3 py-1 rounded-full text-xs ${
                      getExamStatus(selectedExamDetail.exam_date) === "Expired" 
                        ? "bg-red-100 text-red-800" 
                        : "bg-green-100 text-green-800"
                    }`}>
                      {getExamStatus(selectedExamDetail.exam_date)}
                    </span>
                    <button
                      onClick={closeExamDetails}
                      className="text-gray-500 hover:text-gray-700"
                    >
                      <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                      </svg>
                    </button>
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">
                  <div>
                    <h4 className="text-sm font-medium text-gray-500">Exam Date</h4>
                    <p className="mt-1 text-gray-800">{formatDate(selectedExamDetail.exam_date)}</p>
                  </div>
                  <div>
                    <h4 className="text-sm font-medium text-gray-500">Duration</h4>
                    <p className="mt-1 text-gray-800">{selectedExamDetail.duration} minutes</p>
                  </div>
                  <div>
                    <h4 className="text-sm font-medium text-gray-500">Created By</h4>
                    <p className="mt-1 text-gray-800">{selectedExamDetail.created_by}</p>
                  </div>
                  <div>
                    <h4 className="text-sm font-medium text-gray-500">Created At</h4>
                    <p className="mt-1 text-gray-800">{new Date(selectedExamDetail.created_at).toLocaleString()}</p>
                  </div>
                  <div>
                    <h4 className="text-sm font-medium text-gray-500">Last Modified</h4>
                    <p className="mt-1 text-gray-800">
                      {selectedExamDetail.modified_at 
                        ? new Date(selectedExamDetail.modified_at).toLocaleString() 
                        : "Never"}
                    </p>
                  </div>
                </div>

                <div className="mt-8 flex justify-end space-x-3">
                  <button
                    onClick={() => openModal(selectedExamDetail)}
                    className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
                  >
                    Edit Exam
                  </button>
                  <button
                    onClick={() => deleteExam(selectedExamDetail.$id)}
                    className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors"
                  >
                    Delete Exam
                  </button>
                  <button
                    onClick={() => openViewQuestionsModal(selectedExamDetail)}
                    className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors"
                  >
                    View Questions
                  </button>
                  <button
                    onClick={closeExamDetails}
                    className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors"
                  >
                    Close
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </AdminLayout>
  );
};

export default ExamsPage;-e [1;34m===== ./pages/test/questions-test.js =====[0m
// pages/test/questions-test.js
import { useState, useEffect, useCallback } from 'react';
import { databases, storage } from '../../utils/appwrite';
import { ID } from 'appwrite';
import { Query } from 'appwrite';

const QuestionsTestPage = () => {
  const [questions, setQuestions] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [formData, setFormData] = useState({
    question_id: '',
    text: '',
    image_id: '',
    options_text: ['', '', '', ''],
    options_image: ['', '', '', ''],
    correct_answer: 0,
    difficulty: 'easy',
    tags: [],
    created_by: 'test-user'
  });
  const [newTag, setNewTag] = useState('');
  const [optionImageFiles, setOptionImageFiles] = useState([null, null, null, null]);
  const [questionImageFile, setQuestionImageFile] = useState(null);
  const [editingId, setEditingId] = useState(null);
  const [questionImagePreview, setQuestionImagePreview] = useState(null);
  const [optionImagePreviews, setOptionImagePreviews] = useState([null, null, null, null]);

  const BUCKET_ID = 'questions';
  const databaseId = '67a5a946002e8a51f8fe';
  const collectionId = 'questions';

  const fetchQuestions = useCallback(async () => {
    setLoading(true);
    try {
      // const response = await databases.listDocuments(databaseId, collectionId);
      const response = await databases.listDocuments(databaseId, collectionId, [
        Query.limit(100) // Increase this number as needed
      ]);
      
      const questionsWithImages = await Promise.all(
        response.documents.map(async (question) => {
          const imageUrl = question.image_id ? await getFileUrl(question.image_id) : null;
          const optionsImageUrls = await Promise.all(
            question.options_image.map(async (imgId) => 
              imgId ? await getFileUrl(imgId) : null
            )
          );
          
          return {
            ...question,
            imageUrl,
            optionsImageUrls
          };
        })
      );
      
      setQuestions(questionsWithImages);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  }, []);

  const getFileUrl = async (fileId) => {
    try {
      return storage.getFileView(BUCKET_ID, fileId);
    } catch (err) {
      console.error("Error fetching image:", err.message);
      return null;
    }
  };

  useEffect(() => {
    fetchQuestions();
  }, [fetchQuestions]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    
    try {
      // Handle image uploads
      let questionImageId = formData.image_id;
      if (questionImageFile) {
        // Delete old image if editing
        if (editingId && formData.image_id) {
          try {
            await storage.deleteFile(BUCKET_ID, formData.image_id);
          } catch (err) {
            console.error("Error deleting old image:", err.message);
          }
        }
        const uploadResponse = await storage.createFile(BUCKET_ID, ID.unique(), questionImageFile);
        questionImageId = uploadResponse.$id;
      }

      // Handle option images
      const uploadedOptionImages = await Promise.all(
        optionImageFiles.map(async (file, index) => {
          if (file) {
            // Delete old image if editing
            if (editingId && formData.options_image[index]) {
              try {
                await storage.deleteFile(BUCKET_ID, formData.options_image[index]);
              } catch (err) {
                console.error("Error deleting old option image:", err.message);
              }
            }
            const uploadResponse = await storage.createFile(BUCKET_ID, ID.unique(), file);
            return uploadResponse.$id;
          }
          return formData.options_image[index] || '';
        })
      );

      // Create or update document
      if (editingId) {
        await databases.updateDocument(
          databaseId, 
          collectionId,
          editingId,
          {
            ...formData,
            image_id: questionImageId,
            options_text: formData.options_text.filter(opt => opt.trim() !== ''),
            options_image: uploadedOptionImages,
            tags: formData.tags
          }
        );
      } else {
        await databases.createDocument(
          databaseId, 
          collectionId,
          ID.unique(),
          {
            ...formData,
            image_id: questionImageId,
            options_text: formData.options_text.filter(opt => opt.trim() !== ''),
            options_image: uploadedOptionImages,
            tags: formData.tags
          }
        );
      }
      
      await fetchQuestions();
      resetForm();
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleEdit = (question) => {
    setEditingId(question.$id);
    setFormData({
      question_id: question.question_id,
      text: question.text,
      image_id: question.image_id,
      options_text: question.options_text || ['', '', '', ''],
      options_image: question.options_image || ['', '', '', ''],
      correct_answer: question.correct_answer || 0,
      difficulty: question.difficulty || 'easy',
      tags: question.tags || [],
      created_by: question.created_by || 'test-user'
    });
    setQuestionImagePreview(question.imageUrl || null);
    setOptionImagePreviews(question.optionsImageUrls || [null, null, null, null]);
  };

  const deleteQuestion = async (questionId) => {
    if (!window.confirm("Are you sure you want to delete this question?")) return;
    
    setLoading(true);
    try {
      // First get the question to delete its images
      const questionToDelete = questions.find(q => q.$id === questionId);
      
      // Delete question image if exists
      if (questionToDelete.image_id) {
        try {
          await storage.deleteFile(BUCKET_ID, questionToDelete.image_id);
        } catch (err) {
          console.error("Error deleting question image:", err.message);
        }
      }
      
      // Delete option images if exist
      await Promise.all(
        questionToDelete.options_image.map(async (imgId) => {
          if (imgId) {
            try {
              await storage.deleteFile(BUCKET_ID, imgId);
            } catch (err) {
              console.error("Error deleting option image:", err.message);
            }
          }
        })
      );
      
      // Delete the document
      await databases.deleteDocument(databaseId, collectionId, questionId);
      await fetchQuestions();
      
      // Reset form if editing the deleted question
      if (editingId === questionId) {
        resetForm();
      }
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const resetForm = () => {
    setFormData({
      question_id: '',
      text: '',
      image_id: '',
      options_text: ['', '', '', ''],
      options_image: ['', '', '', ''],
      correct_answer: 0,
      difficulty: 'easy',
      tags: [],
      created_by: 'test-user'
    });
    setOptionImageFiles([null, null, null, null]);
    setQuestionImageFile(null);
    setNewTag('');
    setEditingId(null);
    setQuestionImagePreview(null);
    setOptionImagePreviews([null, null, null, null]);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleOptionChange = (index, value) => {
    const newOptions = [...formData.options_text];
    newOptions[index] = value;
    setFormData(prev => ({ ...prev, options_text: newOptions }));
  };

  const handleQuestionImageChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setQuestionImageFile(file);
      setQuestionImagePreview(URL.createObjectURL(file));
    }
  };

  const handleOptionImageChange = (index, e) => {
    const file = e.target.files[0];
    if (file) {
      const newOptionFiles = [...optionImageFiles];
      newOptionFiles[index] = file;
      setOptionImageFiles(newOptionFiles);
      
      const newPreviews = [...optionImagePreviews];
      newPreviews[index] = URL.createObjectURL(file);
      setOptionImagePreviews(newPreviews);
    }
  };

  const handleAddTag = () => {
    if (newTag.trim() && !formData.tags.includes(newTag.trim())) {
      setFormData(prev => ({ ...prev, tags: [...prev.tags, newTag.trim()] }));
      setNewTag('');
    }
  };

  const handleRemoveTag = (tagToRemove) => {
    setFormData(prev => ({
      ...prev,
      tags: prev.tags.filter(tag => tag !== tagToRemove)
    }));
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-6">Questions Management</h1>
      
      {error && (
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4 rounded">
          <p>{error}</p>
        </div>
      )}
      
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* Form */}
        <div className="bg-white p-6 rounded-lg shadow">
          <h2 className="text-xl font-semibold mb-4">
            {editingId ? 'Edit Question' : 'Add New Question'}
          </h2>
          <form onSubmit={handleSubmit}>
            <div className="mb-4">
              <label className="block mb-2">Question ID</label>
              <input
                type="text"
                name="question_id"
                value={formData.question_id}
                onChange={handleChange}
                className="w-full p-2 border rounded"
                required
                disabled={editingId}
              />
            </div>
            
            <div className="mb-4">
              <label className="block mb-2">Question Text</label>
              <textarea
                name="text"
                value={formData.text}
                onChange={handleChange}
                className="w-full p-2 border rounded"
                rows="3"
                required
              />
            </div>
            
            <div className="mb-4">
              <label className="block mb-2">Question Image</label>
              <input
                type="file"
                onChange={handleQuestionImageChange}
                className="w-full p-2 border rounded"
                accept="image/*"
              />
              {questionImagePreview && (
                <div className="mt-2">
                  <img 
                    src={questionImagePreview} 
                    alt="Preview" 
                    className="max-h-40 w-auto rounded border"
                  />
                  <p className="text-sm text-gray-500 mt-1">Image preview</p>
                </div>
              )}
            </div>
            
            <div className="mb-4">
              <label className="block mb-2">Options</label>
              {formData.options_text.map((option, index) => (
                <div key={index} className="mb-4 p-3 border rounded-lg">
                  <div className="mb-2">
                    <label className="block text-sm text-gray-600 mb-1">Option {index + 1} Text</label>
                    <input
                      type="text"
                      value={option}
                      onChange={(e) => handleOptionChange(index, e.target.value)}
                      className="w-full p-2 border rounded"
                      placeholder={`Option ${index + 1}`}
                      required
                    />
                  </div>
                  
                  <div className="mb-2">
                    <label className="block text-sm text-gray-600 mb-1">Option {index + 1} Image</label>
                    <input
                      type="file"
                      onChange={(e) => handleOptionImageChange(index, e)}
                      className="w-full p-2 border rounded"
                      accept="image/*"
                    />
                    {optionImagePreviews[index] && (
                      <div className="mt-2">
                        <img 
                          src={optionImagePreviews[index]} 
                          alt={`Option ${index + 1} preview`} 
                          className="max-h-20 w-auto rounded border"
                        />
                        <p className="text-sm text-gray-500">Image preview</p>
                      </div>
                    )}
                  </div>
                  
                  <label className="inline-flex items-center mt-2">
                    <input
                      type="radio"
                      name="correct_answer"
                      checked={formData.correct_answer === index}
                      onChange={() => setFormData(prev => ({ ...prev, correct_answer: index }))}
                      className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                    />
                    <span className="ml-2 text-sm text-gray-700">Correct Answer</span>
                  </label>
                </div>
              ))}
            </div>
            
            <div className="mb-4">
              <label className="block mb-2">Difficulty</label>
              <select
                name="difficulty"
                value={formData.difficulty}
                onChange={handleChange}
                className="w-full p-2 border rounded"
              >
                <option value="easy">Easy</option>
                <option value="medium">Medium</option>
                <option value="hard">Hard</option>
              </select>
            </div>
            
            <div className="mb-4">
              <label className="block mb-2">Tags</label>
              <div className="flex mb-2">
                <input
                  type="text"
                  value={newTag}
                  onChange={(e) => setNewTag(e.target.value)}
                  className="flex-1 p-2 border rounded-l"
                  placeholder="Add tag"
                />
                <button
                  type="button"
                  onClick={handleAddTag}
                  className="bg-gray-200 px-4 rounded-r hover:bg-gray-300"
                >
                  Add
                </button>
              </div>
              <div className="flex flex-wrap gap-2">
                {formData.tags.map(tag => (
                  <span key={tag} className="bg-gray-100 px-3 py-1 rounded-full text-sm flex items-center">
                    {tag}
                    <button
                      type="button"
                      onClick={() => handleRemoveTag(tag)}
                      className="ml-2 text-gray-500 hover:text-gray-700"
                    >
                      √ó
                    </button>
                  </span>
                ))}
              </div>
            </div>
            
            <div className="flex space-x-2">
              <button
                type="submit"
                disabled={loading}
                className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 flex-1"
              >
                {loading ? 'Saving...' : editingId ? 'Update Question' : 'Add Question'}
              </button>
              {editingId && (
                <button
                  type="button"
                  onClick={resetForm}
                  className="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600"
                >
                  Cancel
                </button>
              )}
            </div>
          </form>
        </div>
        
        {/* Data Display */}
        <div className="bg-white p-6 rounded-lg shadow">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold">Questions List</h2>
            <button 
              onClick={fetchQuestions}
              disabled={loading}
              className="text-sm bg-gray-100 hover:bg-gray-200 px-3 py-1 rounded"
            >
              Refresh
            </button>
          </div>
          {loading ? (
            <p>Loading questions...</p>
          ) : questions.length === 0 ? (
            <p>No questions found</p>
          ) : (
            <div className="space-y-4">
              {questions.map(question => (
                <div 
                  key={question.$id} 
                  className="border p-4 rounded-lg hover:bg-gray-50 cursor-pointer"
                  onClick={() => handleEdit(question)}
                >
                  <div className="flex justify-between items-start">
                    <div>
                      <h3 className="font-medium">{question.question_id}</h3>
                      <div className="flex items-center gap-2 mt-1">
                        <span className={`px-2 py-0.5 rounded-full text-xs ${
                          question.difficulty === 'easy' ? 'bg-green-100 text-green-800' :
                          question.difficulty === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                          'bg-red-100 text-red-800'
                        }`}>
                          {question.difficulty}
                        </span>
                        <button
                          onClick={(e) => {
                            e.stopPropagation();
                            deleteQuestion(question.$id);
                          }}
                          className="text-red-500 hover:text-red-700 text-sm"
                          disabled={loading}
                        >
                          Delete
                        </button>
                      </div>
                    </div>
                    <span className="text-sm text-gray-500">
                      {new Date(question.$createdAt).toLocaleDateString()}
                    </span>
                  </div>
                  
                  <div className="mt-3">
                    {question.text && (
                      <p className="text-gray-700 mb-3">{question.text}</p>
                    )}
                    
                    {question.imageUrl && (
                      <div className="mb-3">
                        <img 
                          src={question.imageUrl} 
                          alt="Question" 
                          className="max-h-40 w-auto rounded border"
                        />
                      </div>
                    )}
                    
                    <div className="space-y-2">
                      {question.options_text?.map((option, index) => (
                        <div 
                          key={index} 
                          className={`p-2 rounded text-sm ${
                            question.correct_answer === index ? 
                            'bg-green-100 text-green-800 border border-green-300' : 
                            'bg-gray-100 text-gray-800'
                          }`}
                        >
                          <div className="flex items-start gap-3">
                            <div className="flex-1">
                              <p>Option {index + 1}: {option || "N/A"}</p>
                            </div>
                            {question.optionsImageUrls[index] && (
                              <div className="w-16 h-16 flex-shrink-0">
                                <img 
                                  src={question.optionsImageUrls[index]} 
                                  alt={`Option ${index + 1}`} 
                                  className="w-full h-full object-contain"
                                />
                              </div>
                            )}
                          </div>
                        </div>
                      ))}
                    </div>
                    
                    {question.tags && question.tags.length > 0 && (
                      <div className="mt-3 flex flex-wrap gap-1">
                        {question.tags.map(tag => (
                          <span key={tag} className="bg-gray-100 px-2 py-0.5 rounded-full text-xs">
                            {tag}
                          </span>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default QuestionsTestPage;-e [1;34m===== ./pages/test/exams-test.js =====[0m
// pages/exams-test.js
import { useState, useEffect } from 'react';
import { databases } from '../../utils/appwrite';
import { ID } from 'appwrite';

const ExamsTestPage = () => {
  const [exams, setExams] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [formData, setFormData] = useState({
    exam_id: '',
    name: '',
    description: '',
    exam_date: '',
    duration: 60,
    status: 'active',
    created_by: 'test-user'
  });
  const [editingId, setEditingId] = useState(null);

  const databaseId = '67a5a946002e8a51f8fe';
  const collectionId = 'exams';

  const fetchExams = async () => {
    setLoading(true);
    try {
      const response = await databases.listDocuments(databaseId, collectionId);
      setExams(response.documents);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      if (editingId) {
        // Update existing exam
        await databases.updateDocument(
          databaseId,
          collectionId,
          editingId,
          {
            ...formData,
            duration: parseInt(formData.duration),
            modified_at: new Date().toISOString()
          }
        );
      } else {
        // Create new exam
        await databases.createDocument(
          databaseId, 
          collectionId,
          ID.unique(),
          {
            ...formData,
            duration: parseInt(formData.duration),
            created_at: new Date().toISOString(),
            modified_at: new Date().toISOString()
          }
        );
      }
      await fetchExams();
      resetForm();
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleEdit = (exam) => {
    setFormData({
      exam_id: exam.exam_id,
      name: exam.name,
      description: exam.description,
      exam_date: exam.exam_date.substring(0, 16), // Format for datetime-local input
      duration: exam.duration,
      status: exam.status,
      created_by: exam.created_by
    });
    setEditingId(exam.$id);
  };

  const handleDelete = async (id) => {
    if (!window.confirm('Are you sure you want to delete this exam?')) return;
    
    setLoading(true);
    try {
      await databases.deleteDocument(databaseId, collectionId, id);
      await fetchExams();
      if (editingId === id) {
        resetForm();
      }
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const resetForm = () => {
    setFormData({
      exam_id: '',
      name: '',
      description: '',
      exam_date: '',
      duration: 60,
      status: 'active',
      created_by: 'test-user'
    });
    setEditingId(null);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleString();
  };

  useEffect(() => {
    fetchExams();
  }, []);

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-6">Exams Management</h1>
      
      {error && (
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4 rounded">
          <p>{error}</p>
        </div>
      )}
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        {/* Form */}
        <div className="bg-white p-6 rounded-lg shadow">
          <h2 className="text-xl font-semibold mb-4">
            {editingId ? 'Edit Exam' : 'Add New Exam'}
          </h2>
          <form onSubmit={handleSubmit}>
            <div className="mb-4">
              <label className="block mb-2">Exam ID</label>
              <input
                type="text"
                name="exam_id"
                value={formData.exam_id}
                onChange={handleChange}
                className="w-full p-2 border rounded"
                required
                disabled={editingId} // Disable editing of exam_id
              />
            </div>
            <div className="mb-4">
              <label className="block mb-2">Exam Name</label>
              <input
                type="text"
                name="name"
                value={formData.name}
                onChange={handleChange}
                className="w-full p-2 border rounded"
                required
              />
            </div>
            <div className="mb-4">
              <label className="block mb-2">Description</label>
              <textarea
                name="description"
                value={formData.description}
                onChange={handleChange}
                className="w-full p-2 border rounded"
                rows="3"
              />
            </div>
            <div className="mb-4">
              <label className="block mb-2">Exam Date</label>
              <input
                type="datetime-local"
                name="exam_date"
                value={formData.exam_date}
                onChange={handleChange}
                className="w-full p-2 border rounded"
                required
              />
            </div>
            <div className="mb-4">
              <label className="block mb-2">Duration (minutes)</label>
              <input
                type="number"
                name="duration"
                value={formData.duration}
                onChange={handleChange}
                className="w-full p-2 border rounded"
                min="1"
                required
              />
            </div>
            <div className="mb-4">
              <label className="block mb-2">Status</label>
              <select
                name="status"
                value={formData.status}
                onChange={handleChange}
                className="w-full p-2 border rounded"
              >
                <option value="active">Active</option>
                <option value="inactive">Inactive</option>
                <option value="completed">Completed</option>
              </select>
            </div>
            <div className="flex space-x-2">
              <button
                type="submit"
                disabled={loading}
                className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 flex-1"
              >
                {loading ? 'Saving...' : editingId ? 'Update Exam' : 'Add Exam'}
              </button>
              {editingId && (
                <button
                  type="button"
                  onClick={resetForm}
                  disabled={loading}
                  className="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600"
                >
                  Cancel
                </button>
              )}
            </div>
          </form>
        </div>
        
        {/* Data Display */}
        <div className="bg-white p-6 rounded-lg shadow">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold">Exams List</h2>
            <button 
              onClick={fetchExams}
              disabled={loading}
              className="text-sm bg-gray-100 hover:bg-gray-200 px-3 py-1 rounded"
            >
              Refresh
            </button>
          </div>
          {loading ? (
            <p>Loading exams...</p>
          ) : exams.length === 0 ? (
            <p>No exams found</p>
          ) : (
            <div className="space-y-4">
              {exams.map(exam => (
                <div key={exam.$id} className="border p-4 rounded hover:bg-gray-50">
                  <div className="flex justify-between items-start">
                    <div>
                      <h3 className="font-medium">{exam.name}</h3>
                      <p className="text-sm text-gray-600">ID: {exam.exam_id}</p>
                    </div>
                    <div className="flex space-x-2">
                      <button
                        onClick={() => handleEdit(exam)}
                        className="text-blue-600 hover:text-blue-800 text-sm"
                      >
                        Edit
                      </button>
                      <button
                        onClick={() => handleDelete(exam.$id)}
                        className="text-red-600 hover:text-red-800 text-sm"
                      >
                        Delete
                      </button>
                    </div>
                  </div>
                  
                  <div className="mt-3 grid grid-cols-2 gap-2 text-xs">
                    <div>
                      <span className="font-semibold">Document ID:</span> {exam.$id}
                    </div>
                    <div>
                      <span className="font-semibold">Created:</span> {formatDate(exam.$createdAt)}
                    </div>
                    <div>
                      <span className="font-semibold">Updated:</span> {formatDate(exam.$updatedAt)}
                    </div>
                    <div>
                      <span className="font-semibold">Permissions:</span> {exam.$permissions?.join(', ') || 'N/A'}
                    </div>
                    <div>
                      <span className="font-semibold">Database:</span> {exam.$databaseId}
                    </div>
                    <div>
                      <span className="font-semibold">Collection:</span> {exam.$collectionId}
                    </div>
                  </div>
                  
                  <div className="mt-3 grid grid-cols-2 gap-2">
                    <div>
                      <p className="text-sm">
                        <span className="font-semibold">Date:</span> {formatDate(exam.exam_date)}
                      </p>
                      <p className="text-sm">
                        <span className="font-semibold">Duration:</span> {exam.duration} minutes
                      </p>
                    </div>
                    <div>
                      <span className={`inline-block px-2 py-1 rounded-full text-xs ${
                        exam.status === 'active' ? 'bg-green-100 text-green-800' :
                        exam.status === 'completed' ? 'bg-blue-100 text-blue-800' :
                        'bg-gray-100 text-gray-800'
                      }`}>
                        Status: {exam.status}
                      </span>
                      <p className="text-sm mt-1">
                        <span className="font-semibold">Created by:</span> {exam.created_by}
                      </p>
                    </div>
                  </div>
                  
                  {exam.description && (
                    <div className="mt-2 p-2 bg-gray-50 rounded">
                      <p className="text-sm text-gray-700">
                        <span className="font-semibold">Description:</span> {exam.description}
                      </p>
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ExamsTestPage;-e [1;34m===== ./pages/test/exam_question_viewer-test.js =====[0m
import { useState, useEffect } from 'react';
import { databases } from '../../utils/appwrite';
import { Query } from 'appwrite';

const ExamQuestionsViewerPage = () => {
  const [exams, setExams] = useState([]);
  const [selectedExamId, setSelectedExamId] = useState('');
  const [examQuestions, setExamQuestions] = useState([]);
  const [questions, setQuestions] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const databaseId = '67a5a946002e8a51f8fe';
  const examQuestionsCollectionId = 'exam_questions';
  const questionsCollectionId = 'questions';
  const examsCollectionId = 'exams';

  const fetchExams = async () => {
    setLoading(true);
    try {
      const response = await databases.listDocuments(databaseId, examsCollectionId, [Query.limit(100)]);
      setExams(response.documents);
    } catch (err) {
      setError(err.message);
      console.error('Error fetching exams:', err);
    } finally {
      setLoading(false);
    }
  };

  const fetchQuestionsForExam = async (examId) => {
    if (!examId) return;
    
    setLoading(true);
    try {
      // First, get all exam_question documents
      const examQuestionsResponse = await databases.listDocuments(
        databaseId, 
        examQuestionsCollectionId,
        [Query.orderAsc('order')]
      );
      
      // Filter locally for this exam
      const filteredExamQuestions = examQuestionsResponse.documents.filter(doc => {
        // Handle both array and direct reference formats
        const examRef = doc.exam_id;
        if (Array.isArray(examRef)) {
          return examRef.some(ref => ref.$id === examId || ref === examId);
        } else if (typeof examRef === 'object') {
          return examRef.$id === examId;
        }
        return examRef === examId;
      });

      setExamQuestions(filteredExamQuestions);

      // Get all the questions referenced in these mappings
      const questionIds = filteredExamQuestions.map(eq => {
        const questionRef = eq.question_id;
        if (Array.isArray(questionRef)) {
          return questionRef[0]?.$id || questionRef[0];
        } else if (typeof questionRef === 'object') {
          return questionRef.$id;
        }
        return questionRef;
      }).filter(id => id);

      if (questionIds.length > 0) {
        // Fetch all questions at once
        const questionsResponse = await databases.listDocuments(
          databaseId,
          questionsCollectionId,
          [Query.limit(100)]
        );
        
        // Filter questions locally to match our questionIds
        const filteredQuestions = questionsResponse.documents.filter(q => 
          questionIds.includes(q.$id) || questionIds.includes(q.question_id)
        );
        setQuestions(filteredQuestions);
      } else {
        setQuestions([]);
      }
    } catch (err) {
      setError(err.message);
      console.error('Error fetching questions for exam:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleExamChange = (e) => {
    const examId = e.target.value;
    setSelectedExamId(examId);
    fetchQuestionsForExam(examId);
  };

  const getQuestionById = (questionId) => {
    return questions.find(q => q.$id === questionId) || 
           questions.find(q => q.question_id === questionId);
  };

  const getQuestionOrder = (questionId) => {
    const mapping = examQuestions.find(eq => {
      const qRef = eq.question_id;
      const refId = Array.isArray(qRef) ? qRef[0]?.$id || qRef[0] : 
                   (typeof qRef === 'object' ? qRef.$id : qRef);
      return refId === questionId;
    });
    return mapping?.order || 'N/A';
  };

  const getQuestionMarks = (questionId) => {
    const mapping = examQuestions.find(eq => {
      const qRef = eq.question_id;
      const refId = Array.isArray(qRef) ? qRef[0]?.$id || qRef[0] : 
                   (typeof qRef === 'object' ? qRef.$id : qRef);
      return refId === questionId;
    });
    return mapping?.marks || 'N/A';
  };

  useEffect(() => {
    fetchExams();
  }, []);

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-6">Exam Questions Viewer</h1>

      {error && (
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4">
          <p>{error}</p>
        </div>
      )}

      <div className="bg-white p-6 rounded-lg shadow mb-6">
        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-700 mb-1">Select Exam</label>
          <select
            value={selectedExamId}
            onChange={handleExamChange}
            className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
            disabled={loading}
          >
            <option value="">Choose an exam</option>
            {exams.map((exam) => (
              <option key={exam.$id} value={exam.$id}>
                {exam.name} ({exam.exam_id})
              </option>
            ))}
          </select>
        </div>

        {selectedExamId && (
          <div className="mt-4">
            <h2 className="text-xl font-semibold mb-2">
              Questions for {exams.find(e => e.$id === selectedExamId)?.name || 'Selected Exam'}
            </h2>
            <p className="text-sm text-gray-600 mb-4">
              Exam ID: {selectedExamId}
            </p>

            {loading && questions.length === 0 ? (
              <div className="text-center py-8">
                <p>Loading questions...</p>
              </div>
            ) : questions.length === 0 ? (
              <div className="text-center py-8">
                <p>No questions found for this exam</p>
              </div>
            ) : (
              <div className="space-y-4">
                {questions.map((question) => (
                  <div key={question.$id} className="border border-gray-200 rounded-lg p-4 hover:bg-gray-50">
                    <div className="flex justify-between items-start">
                      <div>
                        <h3 className="font-medium">
                          Question {getQuestionOrder(question.$id)} (Marks: {getQuestionMarks(question.$id)})
                        </h3>
                        <p className="text-gray-700 mt-1">{question.text}</p>
                        <div className="mt-2 flex flex-wrap gap-2">
                          {question.difficulty && (
                            <span className="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs">
                              Difficulty: {question.difficulty}
                            </span>
                          )}
                          {question.topic && (
                            <span className="px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs">
                              Topic: {question.topic}
                            </span>
                          )}
                          {question.type && (
                            <span className="px-2 py-1 bg-purple-100 text-purple-800 rounded-full text-xs">
                              Type: {question.type}
                            </span>
                          )}
                        </div>
                      </div>
                      <div className="flex flex-col items-end space-y-1">
                        <span className="px-2 py-1 bg-gray-100 text-gray-800 rounded-full text-xs">
                          ID: {question.$id}
                        </span>
                        {question.question_id && (
                          <span className="px-2 py-1 bg-yellow-100 text-yellow-800 rounded-full text-xs">
                            Question ID: {question.question_id}
                          </span>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default ExamQuestionsViewerPage;-e [1;34m===== ./pages/test/exam-questions-test.js =====[0m
import { useState, useEffect } from 'react';
import { databases } from '../../utils/appwrite';
import { ID, Query } from 'appwrite';

const ExamQuestionsTestPage = () => {
  const [examQuestions, setExamQuestions] = useState([]);
  const [exams, setExams] = useState([]);
  const [questions, setQuestions] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [formData, setFormData] = useState({
    exam_id: '',
    question_id: '',
    order: 1,
    marks: 1
  });
  const [editingId, setEditingId] = useState(null);

  const databaseId = '67a5a946002e8a51f8fe';
  const collectionId = 'exam_questions';

  // Collection attributes
  const collectionAttributes = [
    { name: 'exam_id', type: 'relationship', description: 'Reference to the exam document' },
    { name: 'question_id', type: 'relationship', description: 'Reference to the question document' },
    { name: 'order', type: 'integer', description: 'Order of the question in the exam' },
    { name: 'marks', type: 'integer', description: 'Marks allocated for this question' },
    { name: '$id', type: 'string', description: 'Document ID' },
    { name: '$createdAt', type: 'datetime', description: 'Creation timestamp' },
    { name: '$updatedAt', type: 'datetime', description: 'Last update timestamp' },
    { name: '$permissions', type: 'array', description: 'Permission settings for the document' },
    { name: '$databaseId', type: 'string', description: 'Database ID' },
    { name: '$collectionId', type: 'string', description: 'Collection ID' }
  ];

  const fetchAllData = async () => {
    setLoading(true);
    try {
      const [examQuestionsRes, examsRes, questionsRes] = await Promise.all([
        databases.listDocuments(databaseId, collectionId, [Query.limit(100), Query.orderAsc('order')]),
        databases.listDocuments(databaseId, 'exams', [Query.limit(100)]),
        databases.listDocuments(databaseId, 'questions', [Query.limit(100)])
      ]);

      setExamQuestions(examQuestionsRes.documents);
      setExams(examsRes.documents);
      setQuestions(questionsRes.documents);
    } catch (err) {
      setError(err.message);
      console.error('Fetch error:', err);
    } finally {
      setLoading(false);
    }
  };

  const resolveRelationshipId = (field) => {
    if (!field) return null;
    if (typeof field === 'object' && field.$id) return field.$id;
    if (Array.isArray(field) && field.length > 0) return field[0]?.$id || field[0];
    return field;
  };

  const getExamName = (examId) => {
    const resolvedId = resolveRelationshipId(examId);
    const exam = exams.find(e => e.$id === resolvedId || e.exam_id === resolvedId);
    if (exam) {
      return `${exam.name} (${exam.exam_id})`;
    }
    return 'Unknown Exam';
  };

  const getQuestionText = (questionId) => {
    const resolvedId = resolveRelationshipId(questionId);
    const question = questions.find(q => q.$id === resolvedId || q.question_id === resolvedId);
    return question?.text?.substring(0, 50) || `Question ${question?.question_id || 'Unknown'}`;
  };

  const getQuestionDifficulty = (questionId) => {
    const resolvedId = resolveRelationshipId(questionId);
    const question = questions.find(q => q.$id === resolvedId || q.question_id === resolvedId);
    return question?.difficulty ? `(${question.difficulty})` : '';
  };

  const formatDate = (timestamp) => {
    if (!timestamp) return 'N/A';
    const date = new Date(timestamp);
    return date.toLocaleString();
  };

  const formatRelationship = (relationship) => {
    if (!relationship) return 'N/A';
    if (Array.isArray(relationship)) {
      return relationship.map(r => r.$id || r).join(', ');
    }
    if (typeof relationship === 'object') {
      return relationship.$id || 'Object';
    }
    return relationship;
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      const data = {
        exam_id: [formData.exam_id],
        question_id: [formData.question_id],
        order: parseInt(formData.order),
        marks: parseInt(formData.marks)
      };

      if (editingId) {
        await databases.updateDocument(databaseId, collectionId, editingId, data);
      } else {
        await databases.createDocument(databaseId, collectionId, ID.unique(), data);
      }

      await fetchAllData();
      resetForm();
    } catch (err) {
      setError(err.message);
      console.error('Submission error:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleEdit = (examQuestion) => {
    setFormData({
      exam_id: resolveRelationshipId(examQuestion.exam_id) || '',
      question_id: resolveRelationshipId(examQuestion.question_id) || '',
      order: examQuestion.order,
      marks: examQuestion.marks
    });
    setEditingId(examQuestion.$id);
  };

  const handleDelete = async (id) => {
    if (window.confirm('Are you sure you want to delete this exam question?')) {
      try {
        await databases.deleteDocument(databaseId, collectionId, id);
        await fetchAllData();
        if (editingId === id) resetForm();
      } catch (err) {
        setError(err.message);
      }
    }
  };

  const resetForm = () => {
    setFormData({
      exam_id: '',
      question_id: '',
      order: 1,
      marks: 1
    });
    setEditingId(null);
  };

  useEffect(() => {
    fetchAllData();
  }, []);

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-6">Exam Questions Management</h1>

      {error && (
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4">
          <p>{error}</p>
        </div>
      )}

      {/* Collection Attributes Section */}
      <div className="bg-white p-6 rounded-lg shadow mb-6">
        <h2 className="text-xl font-semibold mb-4">Exam Questions Collection Attributes</h2>
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Attribute</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {collectionAttributes.map((attr, index) => (
                <tr key={index}>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{attr.name}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{attr.type}</td>
                  <td className="px-6 py-4 text-sm text-gray-500">{attr.description}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        {/* Form Section */}
        <div className="bg-white p-6 rounded-lg shadow">
          <h2 className="text-xl font-semibold mb-4">
            {editingId ? 'Edit Exam Question' : 'Add New Exam Question'}
          </h2>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Exam</label>
              <select
                name="exam_id"
                value={formData.exam_id}
                onChange={handleChange}
                className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
                required
                disabled={loading}
              >
                <option value="">Select Exam</option>
                {exams.map((exam) => (
                  <option key={exam.$id} value={exam.$id}>
                    {exam.name} ({exam.exam_id})
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Question</label>
              <select
                name="question_id"
                value={formData.question_id}
                onChange={handleChange}
                className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
                required
                disabled={loading}
              >
                <option value="">Select Question</option>
                {questions.map((question) => (
                  <option key={question.$id} value={question.$id}>
                    {question.text?.substring(0, 50) || `Question ${question.question_id}`}
                    {question.text?.length > 50 ? '...' : ''}
                  </option>
                ))}
              </select>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Order</label>
                <input
                  type="number"
                  name="order"
                  value={formData.order}
                  onChange={handleChange}
                  className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
                  min="1"
                  required
                  disabled={loading}
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Marks</label>
                <input
                  type="number"
                  name="marks"
                  value={formData.marks}
                  onChange={handleChange}
                  className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
                  min="-10"
                  max="10"
                  required
                  disabled={loading}
                />
              </div>
            </div>

            <div className="flex space-x-2">
              <button
                type="submit"
                disabled={loading}
                className={`px-4 py-2 rounded-md text-white ${loading ? 'bg-blue-400' : 'bg-blue-600 hover:bg-blue-700'}`}
              >
                {loading ? (editingId ? 'Updating...' : 'Adding...') : (editingId ? 'Update' : 'Add')}
              </button>
              {editingId && (
                <button
                  type="button"
                  onClick={resetForm}
                  className="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600"
                >
                  Cancel
                </button>
              )}
            </div>
          </form>
        </div>

        {/* List Section */}
        <div className="bg-white p-6 rounded-lg shadow">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold">Exam Questions List</h2>
            <button
              onClick={fetchAllData}
              disabled={loading}
              className="text-sm bg-gray-100 hover:bg-gray-200 px-3 py-1 rounded"
            >
              Refresh
            </button>
          </div>

          {loading && examQuestions.length === 0 ? (
            <div className="text-center py-8">
              <p>Loading exam questions...</p>
            </div>
          ) : examQuestions.length === 0 ? (
            <div className="text-center py-8">
              <p>No exam questions found</p>
            </div>
          ) : (
            <div className="space-y-4">
              {examQuestions.map((eq) => (
                <div key={eq.$id} className="border border-gray-200 rounded-lg p-4 hover:bg-gray-50">
                  <div className="flex justify-between items-start">
                    <div>
                      <h3 className="font-medium">{getExamName(eq.exam_id)}</h3>
                      <p className="text-sm text-gray-600">
                        {getQuestionText(eq.question_id)} {getQuestionDifficulty(eq.question_id)}
                      </p>
                      <div className="mt-2 grid grid-cols-2 gap-2 text-xs">
                        <div>
                          <span className="font-semibold">Exam ID:</span> {formatRelationship(eq.exam_id)}
                        </div>
                        <div>
                          <span className="font-semibold">Question ID:</span> {formatRelationship(eq.question_id)}
                        </div>
                        <div>
                          <span className="font-semibold">ID:</span> {eq.$id}
                        </div>
                        <div>
                          <span className="font-semibold">Created:</span> {formatDate(eq.$createdAt)}
                        </div>
                        <div>
                          <span className="font-semibold">Updated:</span> {formatDate(eq.$updatedAt)}
                        </div>
                        <div>
                          <span className="font-semibold">Permissions:</span> {eq.$permissions?.join(', ') || 'N/A'}
                        </div>
                      </div>
                    </div>
                    <div className="flex flex-col items-end space-y-1">
                      <span className="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs">
                        Order: {eq.order}
                      </span>
                      <span className="px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs">
                        Marks: {eq.marks}
                      </span>
                      <span className="px-2 py-1 bg-purple-100 text-purple-800 rounded-full text-xs">
                        Database: {eq.$databaseId}
                      </span>
                      <span className="px-2 py-1 bg-yellow-100 text-yellow-800 rounded-full text-xs">
                        Collection: {eq.$collectionId}
                      </span>
                    </div>
                  </div>

                  <div className="mt-3 flex space-x-2">
                    <button
                      onClick={() => handleEdit(eq)}
                      className="text-sm text-blue-600 hover:text-blue-800 px-2 py-1 rounded hover:bg-blue-50"
                    >
                      Edit
                    </button>
                    <button
                      onClick={() => handleDelete(eq.$id)}
                      className="text-sm text-red-600 hover:text-red-800 px-2 py-1 rounded hover:bg-red-50"
                    >
                      Delete
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ExamQuestionsTestPage;-e [1;34m===== ./pages/test/results-test.js =====[0m
import { useState, useEffect } from 'react';
import { databases } from '../../utils/appwrite';
import { ID } from 'appwrite';

const ResultsTestPage = () => {
  const [results, setResults] = useState([]);
  const [students, setStudents] = useState([]);
  const [exams, setExams] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [formData, setFormData] = useState({
    student_id: '',
    exam_id: '',
    score: 0,
    total_marks: 100,
    percentage: 0,
    status: 'passed',
    time_taken: 60,
    attempted_at: new Date().toISOString().substring(0, 16),
    completed_at: new Date().toISOString(),
    created_at: new Date().toISOString()
  });

  const databaseId = '67a5a946002e8a51f8fe';
  const collectionId = 'results';

  const generateResultId = (examId, studentId) => {
    const shortExamId = examId.substring(0, 10);
    const shortStudentId = studentId.substring(0, 10);
    const timestamp = Date.now().toString(36).substring(0, 6);
    const random = Math.random().toString(36).substring(2, 6);
    return `res_${shortExamId}_${shortStudentId}_${timestamp}_${random}`.substring(0, 36);
  };

  const fetchAllData = async () => {
    setLoading(true);
    try {
      const [resultsResponse, studentsResponse, examsResponse] = await Promise.all([
        databases.listDocuments(databaseId, collectionId),
        databases.listDocuments(databaseId, 'students'),
        databases.listDocuments(databaseId, 'exams')
      ]);
      
      setResults(resultsResponse.documents);
      setStudents(studentsResponse.documents);
      setExams(examsResponse.documents);
      
    } catch (err) {
      setError(err.message);
      console.error('Fetch error:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    try {
      if (!students.some(s => s.$id === formData.student_id)) {
        throw new Error('Selected student does not exist');
      }
      
      if (!exams.some(e => e.$id === formData.exam_id)) {
        throw new Error('Selected exam does not exist');
      }

      const percentage = (formData.score / formData.total_marks) * 100;
      const status = percentage >= 30 ? 'passed' : 'failed';
      const attemptedAt = new Date(formData.attempted_at);
      const completedAt = new Date(attemptedAt.getTime() + formData.time_taken * 60000);
      const resultId = generateResultId(formData.exam_id, formData.student_id);

      await databases.createDocument(
        databaseId,
        collectionId,
        ID.unique(),
        {
          result_id: resultId,
          student_id: formData.student_id,
          exam_id: formData.exam_id,
          score: parseInt(formData.score),
          total_marks: parseInt(formData.total_marks),
          percentage,
          status,
          time_taken: parseInt(formData.time_taken),
          attempted_at: attemptedAt.toISOString(),
          completed_at: completedAt.toISOString(),
          created_at: new Date().toISOString()
        }
      );

      await fetchAllData();
      setFormData({
        student_id: '',
        exam_id: '',
        score: 0,
        total_marks: 100,
        percentage: 0,
        status: 'passed',
        time_taken: 60,
        attempted_at: new Date().toISOString().substring(0, 16),
        completed_at: new Date().toISOString(),
        created_at: new Date().toISOString()
      });
    } catch (err) {
      setError(err.message);
      console.error('Submission error:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const resolveStudentReference = (studentRef) => {
    if (!studentRef) return null;
    
    // Handle direct ID reference
    if (typeof studentRef === 'string') return studentRef;
    
    // Handle relationship object (either single or array)
    if (Array.isArray(studentRef)) {
      return studentRef[0]?.$id || studentRef[0];
    } else if (typeof studentRef === 'object') {
      return studentRef.$id;
    }
    
    return null;
  };

  const resolveExamReference = (examRef) => {
    if (!examRef) return null;
    
    // Handle direct ID reference
    if (typeof examRef === 'string') return examRef;
    
    // Handle relationship object (either single or array)
    if (Array.isArray(examRef)) {
      return examRef[0]?.$id || examRef[0];
    } else if (typeof examRef === 'object') {
      return examRef.$id;
    }
    
    return null;
  };

  const getStudentName = (studentRef) => {
    const studentId = resolveStudentReference(studentRef);
    if (!studentId || !students.length) return 'Unknown Student';
    
    const student = students.find(s => s.$id === studentId);
    if (!student) {
      console.warn('Student not found for ID:', studentId);
      return 'Unknown Student';
    }
    return `${student.name} (${student.email})`;
  };

  const getExamName = (examRef) => {
    const examId = resolveExamReference(examRef);
    if (!examId || !exams.length) return 'Unknown Exam';
    
    const exam = exams.find(e => e.$id === examId);
    if (!exam) {
      console.warn('Exam not found for ID:', examId);
      return 'Unknown Exam';
    }
    return exam.name;
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleString();
  };

  useEffect(() => {
    fetchAllData();
  }, []);

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-6">Results Management</h1>
      
      {error && (
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4">
          <p>{error}</p>
        </div>
      )}
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        {/* Add Result Form */}
        <div className="bg-white p-6 rounded-lg shadow">
          <h2 className="text-xl font-semibold mb-4">Add New Result</h2>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Student</label>
              <select
                name="student_id"
                value={formData.student_id}
                onChange={handleChange}
                className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
                required
                disabled={loading}
              >
                <option value="">Select Student</option>
                {students.map(student => (
                  <option key={student.$id} value={student.$id}>
                    {student.name} ({student.email})
                  </option>
                ))}
              </select>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Exam</label>
              <select
                name="exam_id"
                value={formData.exam_id}
                onChange={handleChange}
                className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
                required
                disabled={loading}
              >
                <option value="">Select Exam</option>
                {exams.map(exam => (
                  <option key={exam.$id} value={exam.$id}>
                    {exam.name}
                  </option>
                ))}
              </select>
            </div>
            
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Score</label>
                <input
                  type="number"
                  name="score"
                  value={formData.score}
                  onChange={handleChange}
                  className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
                  min="0"
                  required
                  disabled={loading}
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Total Marks</label>
                <input
                  type="number"
                  name="total_marks"
                  value={formData.total_marks}
                  onChange={handleChange}
                  className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
                  min="1"
                  required
                  disabled={loading}
                />
              </div>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Time Taken (minutes)</label>
              <input
                type="number"
                name="time_taken"
                value={formData.time_taken}
                onChange={handleChange}
                className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
                min="1"
                required
                disabled={loading}
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Attempted At</label>
              <input
                type="datetime-local"
                name="attempted_at"
                value={formData.attempted_at}
                onChange={handleChange}
                className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
                required
                disabled={loading}
              />
            </div>
            
            <button
              type="submit"
              disabled={loading}
              className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50"
            >
              {loading ? 'Processing...' : 'Add Result'}
            </button>
          </form>
        </div>
        
        {/* Results List - Showing all attributes */}
        <div className="bg-white p-6 rounded-lg shadow">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold">Results (All Attributes)</h2>
            <button 
              onClick={fetchAllData}
              disabled={loading}
              className="text-sm bg-gray-100 hover:bg-gray-200 px-3 py-1 rounded"
            >
              Refresh
            </button>
          </div>
          
          {loading && results.length === 0 ? (
            <div className="text-center py-8">
              <p>Loading results...</p>
            </div>
          ) : results.length === 0 ? (
            <div className="text-center py-8">
              <p>No results found</p>
            </div>
          ) : (
            <div className="space-y-4">
              {results.map(result => (
                <div key={result.$id} className="border border-gray-200 rounded-lg p-4 hover:bg-gray-50">
                  <div className="flex justify-between items-start">
                    <h3 className="font-medium text-lg">
                      {getStudentName(result.student_id)}
                    </h3>
                    <span className={`px-2 py-1 rounded-full text-xs font-semibold ${
                      result.status === 'passed' 
                        ? 'bg-green-100 text-green-800' 
                        : 'bg-red-100 text-red-800'
                    }`}>
                      {result.status.toUpperCase()}
                    </span>
                  </div>
                  
                  <div className="mt-3 space-y-1 text-sm text-gray-600">
                    <p><strong>Exam:</strong> {getExamName(result.exam_id)}</p>
                    <p><strong>Result ID:</strong> {result.result_id}</p>
                    <p><strong>Score:</strong> {result.score}/{result.total_marks} ({result.percentage?.toFixed(1)}%)</p>
                    <p><strong>Status:</strong> {result.status}</p>
                    <p><strong>Time Taken:</strong> {result.time_taken} minutes</p>
                    <p><strong>Attempted At:</strong> {formatDate(result.attempted_at)}</p>
                    <p><strong>Completed At:</strong> {formatDate(result.completed_at)}</p>
                    <p><strong>Created At:</strong> {formatDate(result.created_at)}</p>
                    <p><strong>Document ID:</strong> {result.$id}</p>
                    <p><strong>Created At (Doc):</strong> {formatDate(result.$createdAt)}</p>
                    <p><strong>Updated At:</strong> {formatDate(result.$updatedAt)}</p>
                    <p><strong>Permissions:</strong> {result.$permissions?.join(', ') || 'None'}</p>
                    <p><strong>Database ID:</strong> {result.$databaseId}</p>
                    <p><strong>Collection ID:</strong> {result.$collectionId}</p>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ResultsTestPage;-e [1;34m===== ./pages/test/responses-test.js =====[0m
import { useState, useEffect } from 'react';
import { databases } from '../../utils/appwrite';
import { ID, Query } from 'appwrite';

const ResponsesTestPage = () => {
  const [responses, setResponses] = useState([]);
  const [students, setStudents] = useState([]);
  const [exams, setExams] = useState([]);
  const [questions, setQuestions] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [formData, setFormData] = useState({
    response_id: '',
    student_id: '',
    exam_id: '',
    question_id: '',
    selected_option: 0
  });
  const [editingId, setEditingId] = useState(null);

  const databaseId = '67a5a946002e8a51f8fe';
  const collectionId = 'responses';

  // Collection attributes
  const collectionAttributes = [
    { name: 'response_id', type: 'string', description: 'Unique identifier for the response', size: 36, required: true },
    { name: 'student_id', type: 'relationship', description: 'Reference to the student document', relationType: 'manyToOne', relatedCollection: 'students' },
    { name: 'exam_id', type: 'relationship', description: 'Reference to the exam document', relationType: 'manyToOne', relatedCollection: 'exams' },
    { name: 'question_id', type: 'relationship', description: 'Reference to the question document', relationType: 'manyToOne', relatedCollection: 'questions' },
    { name: 'selected_option', type: 'integer', description: 'Option selected by student (0-3)', min: 0, max: 3, required: true },
    { name: '$id', type: 'string', description: 'Document ID' },
    { name: '$createdAt', type: 'datetime', description: 'Creation timestamp' },
    { name: '$updatedAt', type: 'datetime', description: 'Last update timestamp' },
    { name: '$permissions', type: 'array', description: 'Permission settings for the document' },
    { name: '$databaseId', type: 'string', description: 'Database ID' },
    { name: '$collectionId', type: 'string', description: 'Collection ID' }
  ];

  const fetchAllData = async () => {
    setLoading(true);
    try {
      const [responsesRes, studentsRes, examsRes, questionsRes] = await Promise.all([
        databases.listDocuments(databaseId, collectionId, [Query.limit(100), Query.orderDesc('$createdAt')]),
        databases.listDocuments(databaseId, 'students', [Query.limit(100)]),
        databases.listDocuments(databaseId, 'exams', [Query.limit(100)]),
        databases.listDocuments(databaseId, 'questions', [Query.limit(100)])
      ]);

      setResponses(responsesRes.documents);
      setStudents(studentsRes.documents);
      setExams(examsRes.documents);
      setQuestions(questionsRes.documents);
    } catch (err) {
      setError(err.message);
      console.error('Fetch error:', err);
    } finally {
      setLoading(false);
    }
  };

  const resolveRelationshipId = (field) => {
    if (!field) return null;
    if (typeof field === 'object' && field.$id) return field.$id;
    if (Array.isArray(field) && field.length > 0) return field[0]?.$id || field[0];
    return field;
  };

  const getStudentName = (studentId) => {
    const resolvedId = resolveRelationshipId(studentId);
    const student = students.find(s => s.$id === resolvedId || s.student_id === resolvedId);
    return student ? `${student.name} (${student.student_id})` : 'Unknown Student';
  };

  const getExamName = (examId) => {
    const resolvedId = resolveRelationshipId(examId);
    const exam = exams.find(e => e.$id === resolvedId || e.exam_id === resolvedId);
    return exam ? `${exam.name} (${exam.exam_id})` : 'Unknown Exam';
  };

  const getQuestionText = (questionId) => {
    const resolvedId = resolveRelationshipId(questionId);
    const question = questions.find(q => q.$id === resolvedId || q.question_id === resolvedId);
    return question?.text?.substring(0, 50) || `Question ${question?.question_id || 'Unknown'}`;
  };

  const formatDate = (timestamp) => {
    if (!timestamp) return 'N/A';
    const date = new Date(timestamp);
    return date.toLocaleString();
  };

  const formatRelationship = (relationship) => {
    if (!relationship) return 'N/A';
    if (Array.isArray(relationship)) {
      return relationship.map(r => r.$id || r).join(', ');
    }
    if (typeof relationship === 'object') {
      return relationship.$id || 'Object';
    }
    return relationship;
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ 
      ...prev, 
      [name]: value 
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      const data = {
        response_id: formData.response_id || ID.unique(),
        student_id: formData.student_id,
        exam_id: formData.exam_id,
        question_id: formData.question_id,
        selected_option: parseInt(formData.selected_option)
      };

      if (editingId) {
        await databases.updateDocument(databaseId, collectionId, editingId, data);
      } else {
        await databases.createDocument(databaseId, collectionId, ID.unique(), data);
      }

      await fetchAllData();
      resetForm();
    } catch (err) {
      setError(err.message);
      console.error('Submission error:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleEdit = (response) => {
    setFormData({
      response_id: response.response_id,
      student_id: resolveRelationshipId(response.student_id) || '',
      exam_id: resolveRelationshipId(response.exam_id) || '',
      question_id: resolveRelationshipId(response.question_id) || '',
      selected_option: response.selected_option
    });
    setEditingId(response.$id);
  };

  const handleDelete = async (id) => {
    if (window.confirm('Are you sure you want to delete this response?')) {
      try {
        await databases.deleteDocument(databaseId, collectionId, id);
        await fetchAllData();
        if (editingId === id) resetForm();
      } catch (err) {
        setError(err.message);
      }
    }
  };

  const resetForm = () => {
    setFormData({
      response_id: '',
      student_id: '',
      exam_id: '',
      question_id: '',
      selected_option: 0
    });
    setEditingId(null);
  };

  useEffect(() => {
    fetchAllData();
  }, []);

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-6">Exam Responses Management</h1>

      {error && (
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4">
          <p>{error}</p>
        </div>
      )}

      {/* Collection Attributes Section */}
      <div className="bg-white p-6 rounded-lg shadow mb-6">
        <h2 className="text-xl font-semibold mb-4">Responses Collection Attributes</h2>
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Attribute</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Details</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {collectionAttributes.map((attr, index) => (
                <tr key={index}>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{attr.name}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{attr.type}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {attr.size && `Size: ${attr.size}`}
                    {attr.relationType && `Relation: ${attr.relationType}`}
                    {attr.relatedCollection && `Related: ${attr.relatedCollection}`}
                    {attr.min !== undefined && `Min: ${attr.min}`}
                    {attr.max !== undefined && `Max: ${attr.max}`}
                    {attr.required && 'Required'}
                  </td>
                  <td className="px-6 py-4 text-sm text-gray-500">{attr.description}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        {/* Form Section */}
        <div className="bg-white p-6 rounded-lg shadow">
          <h2 className="text-xl font-semibold mb-4">
            {editingId ? 'Edit Response' : 'Add New Response'}
          </h2>
          <form onSubmit={handleSubmit} className="space-y-4">
            {!editingId && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Response ID</label>
                <input
                  type="text"
                  name="response_id"
                  value={formData.response_id}
                  onChange={handleChange}
                  className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
                  placeholder="Leave empty to auto-generate"
                  disabled={loading}
                  maxLength={36}
                />
              </div>
            )}

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Student</label>
              <select
                name="student_id"
                value={formData.student_id}
                onChange={handleChange}
                className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
                required
                disabled={loading}
              >
                <option value="">Select Student</option>
                {students.map((student) => (
                  <option key={student.$id} value={student.$id}>
                    {student.name} ({student.student_id})
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Exam</label>
              <select
                name="exam_id"
                value={formData.exam_id}
                onChange={handleChange}
                className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
                required
                disabled={loading}
              >
                <option value="">Select Exam</option>
                {exams.map((exam) => (
                  <option key={exam.$id} value={exam.$id}>
                    {exam.name} ({exam.exam_id})
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Question</label>
              <select
                name="question_id"
                value={formData.question_id}
                onChange={handleChange}
                className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
                required
                disabled={loading}
              >
                <option value="">Select Question</option>
                {questions.map((question) => (
                  <option key={question.$id} value={question.$id}>
                    {question.text?.substring(0, 50) || `Question ${question.question_id}`}
                    {question.text?.length > 50 ? '...' : ''}
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Selected Option</label>
              <select
                name="selected_option"
                value={formData.selected_option}
                onChange={handleChange}
                className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
                required
                disabled={loading}
              >
                <option value="0">Option 0</option>
                <option value="1">Option 1</option>
                <option value="2">Option 2</option>
                <option value="3">Option 3</option>
              </select>
            </div>

            <div className="flex space-x-2">
              <button
                type="submit"
                disabled={loading}
                className={`px-4 py-2 rounded-md text-white ${loading ? 'bg-blue-400' : 'bg-blue-600 hover:bg-blue-700'}`}
              >
                {loading ? (editingId ? 'Updating...' : 'Adding...') : (editingId ? 'Update' : 'Add')}
              </button>
              {editingId && (
                <button
                  type="button"
                  onClick={resetForm}
                  className="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600"
                >
                  Cancel
                </button>
              )}
            </div>
          </form>
        </div>

        {/* List Section */}
        <div className="bg-white p-6 rounded-lg shadow">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold">Responses List</h2>
            <button
              onClick={fetchAllData}
              disabled={loading}
              className="text-sm bg-gray-100 hover:bg-gray-200 px-3 py-1 rounded"
            >
              Refresh
            </button>
          </div>

          {loading && responses.length === 0 ? (
            <div className="text-center py-8">
              <p>Loading responses...</p>
            </div>
          ) : responses.length === 0 ? (
            <div className="text-center py-8">
              <p>No responses found</p>
            </div>
          ) : (
            <div className="space-y-4">
              {responses.map((response) => (
                <div key={response.$id} className="border border-gray-200 rounded-lg p-4 hover:bg-gray-50">
                  <div className="flex justify-between items-start">
                    <div>
                      <h3 className="font-medium">Response {response.response_id}</h3>
                      <p className="text-sm text-gray-600">
                        {getStudentName(response.student_id)} - {getExamName(response.exam_id)}
                      </p>
                      <p className="text-sm text-gray-600 mt-1">
                        {getQuestionText(response.question_id)}
                      </p>
                      <div className="mt-2 grid grid-cols-2 gap-2 text-xs">
                        <div>
                          <span className="font-semibold">Selected Option:</span> {response.selected_option}
                        </div>
                        <div>
                          <span className="font-semibold">Student ID:</span> {formatRelationship(response.student_id)}
                        </div>
                        <div>
                          <span className="font-semibold">Exam ID:</span> {formatRelationship(response.exam_id)}
                        </div>
                        <div>
                          <span className="font-semibold">Question ID:</span> {formatRelationship(response.question_id)}
                        </div>
                        <div>
                          <span className="font-semibold">Created:</span> {formatDate(response.$createdAt)}
                        </div>
                        <div>
                          <span className="font-semibold">Updated:</span> {formatDate(response.$updatedAt)}
                        </div>
                      </div>
                    </div>
                    <div className="flex flex-col items-end space-y-1">
                      <span className="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs">
                        Option: {response.selected_option}
                      </span>
                      <span className="px-2 py-1 bg-purple-100 text-purple-800 rounded-full text-xs">
                        Response ID: {response.response_id}
                      </span>
                      <span className="px-2 py-1 bg-yellow-100 text-yellow-800 rounded-full text-xs">
                        Database: {response.$databaseId}
                      </span>
                      <span className="px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs">
                        Collection: {response.$collectionId}
                      </span>
                    </div>
                  </div>

                  <div className="mt-3 flex space-x-2">
                    <button
                      onClick={() => handleEdit(response)}
                      className="text-sm text-blue-600 hover:text-blue-800 px-2 py-1 rounded hover:bg-blue-50"
                    >
                      Edit
                    </button>
                    <button
                      onClick={() => handleDelete(response.$id)}
                      className="text-sm text-red-600 hover:text-red-800 px-2 py-1 rounded hover:bg-red-50"
                    >
                      Delete
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ResponsesTestPage;-e [1;34m===== ./pages/test/student_response_viewer-test.js =====[0m
import { useState, useEffect } from 'react';
import { databases } from '../../utils/appwrite';
import { Query } from 'appwrite';

const StudentResponsesViewerPage = () => {
  const [exams, setExams] = useState([]);
  const [students, setStudents] = useState([]);
  const [selectedExamId, setSelectedExamId] = useState('');
  const [selectedStudentId, setSelectedStudentId] = useState('');
  const [responses, setResponses] = useState([]);
  const [questions, setQuestions] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const databaseId = '67a5a946002e8a51f8fe';
  const responsesCollectionId = 'responses';
  const questionsCollectionId = 'questions';
  const examsCollectionId = 'exams';
  const studentsCollectionId = 'students';

  const fetchExams = async () => {
    setLoading(true);
    try {
      console.log('Fetching exams...');
      const response = await databases.listDocuments(databaseId, examsCollectionId, [
        Query.limit(100),
        Query.orderDesc('exam_date')
      ]);
      console.log('Exams fetched:', response);
      setExams(response.documents);
    } catch (err) {
      console.error('Error fetching exams:', err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const fetchStudents = async () => {
    setLoading(true);
    try {
      console.log('Fetching students...');
      const response = await databases.listDocuments(databaseId, studentsCollectionId, [
        Query.limit(100),
        Query.orderAsc('name')
      ]);
      console.log('Students fetched:', response);
      setStudents(response.documents);
    } catch (err) {
      console.error('Error fetching students:', err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const fetchResponses = async (examId, studentId) => {
    if (!examId || !studentId) return;
    
    setLoading(true);
    try {
      console.log(`Fetching responses for exam ${examId} and student ${studentId}...`);
      
      // First, get all responses for this student and exam
      const responsesResponse = await databases.listDocuments(
        databaseId, 
        responsesCollectionId,
        [
          Query.equal('exam_id', examId),
          Query.equal('student_id', studentId)
        ]
      );
      console.log('Responses fetched:', responsesResponse);
      
      setResponses(responsesResponse.documents);

      // Get all the questions referenced in these responses
      const questionIds = responsesResponse.documents.map(res => {
        const questionRef = res.question_id;
        if (Array.isArray(questionRef)) {
          return questionRef[0]?.$id || questionRef[0];
        } else if (typeof questionRef === 'object') {
          return questionRef.$id;
        }
        return questionRef;
      }).filter(id => id);

      console.log('Question IDs from responses:', questionIds);

      if (questionIds.length > 0) {
        console.log('Fetching questions for these IDs...');
        // Fetch all questions at once
        const questionsResponse = await databases.listDocuments(
          databaseId,
          questionsCollectionId,
          [Query.limit(100)]
        );
        console.log('Questions fetched:', questionsResponse);
        
        // Filter questions locally to match our questionIds
        const filteredQuestions = questionsResponse.documents.filter(q => 
          questionIds.includes(q.$id) || questionIds.includes(q.question_id)
        );
        console.log('Filtered questions:', filteredQuestions);
        setQuestions(filteredQuestions);
      } else {
        console.log('No question IDs found in responses');
        setQuestions([]);
      }
    } catch (err) {
      console.error('Error fetching responses:', err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleExamChange = (e) => {
    const examId = e.target.value;
    console.log('Exam changed to:', examId);
    setSelectedExamId(examId);
    if (selectedStudentId) {
      fetchResponses(examId, selectedStudentId);
    }
  };

  const handleStudentChange = (e) => {
    const studentId = e.target.value;
    console.log('Student changed to:', studentId);
    setSelectedStudentId(studentId);
    if (selectedExamId) {
      fetchResponses(selectedExamId, studentId);
    }
  };

  const getQuestionById = (questionId) => {
    return questions.find(q => q.$id === questionId) || 
           questions.find(q => q.question_id === questionId);
  };

  const getResponseForQuestion = (questionId) => {
    return responses.find(res => {
      const qRef = res.question_id;
      const refId = Array.isArray(qRef) ? qRef[0]?.$id || qRef[0] : 
                   (typeof qRef === 'object' ? qRef.$id : qRef);
      return refId === questionId;
    });
  };

  const getOptionText = (question, optionIndex) => {
    if (!question) return '';
    if (question.options_text && question.options_text[optionIndex]) {
      return question.options_text[optionIndex];
    }
    return `Option ${optionIndex + 1}`;
  };

  useEffect(() => {
    console.log('Component mounted, fetching initial data...');
    fetchExams();
    fetchStudents();
  }, []);

  useEffect(() => {
    console.log('Responses updated:', responses);
    console.log('Questions updated:', questions);
  }, [responses, questions]);

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-6">Student Responses Viewer</h1>

      {error && (
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4">
          <p>{error}</p>
        </div>
      )}

      <div className="bg-white p-6 rounded-lg shadow mb-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Select Exam</label>
            <select
              value={selectedExamId}
              onChange={handleExamChange}
              className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
              disabled={loading}
            >
              <option value="">Choose an exam</option>
              {exams.map((exam) => (
                <option key={exam.$id} value={exam.$id}>
                  {exam.name} ({new Date(exam.exam_date).toLocaleDateString()})
                </option>
              ))}
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Select Student</label>
            <select
              value={selectedStudentId}
              onChange={handleStudentChange}
              className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
              disabled={loading}
            >
              <option value="">Choose a student</option>
              {students.map((student) => (
                <option key={student.$id} value={student.$id}>
                  {student.name} ({student.email})
                </option>
              ))}
            </select>
          </div>
        </div>

        {selectedExamId && selectedStudentId && (
          <div className="mt-4">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-semibold">
                Responses for {students.find(s => s.$id === selectedStudentId)?.name || 'Student'}
              </h2>
              <p className="text-sm text-gray-600">
                Exam: {exams.find(e => e.$id === selectedExamId)?.name || 'Selected Exam'}
              </p>
            </div>

            {loading && questions.length === 0 ? (
              <div className="text-center py-8">
                <p>Loading responses...</p>
              </div>
            ) : questions.length === 0 ? (
              <div className="text-center py-8">
                <p>No responses found for this student and exam</p>
                <div className="mt-4 text-left bg-gray-50 p-4 rounded">
                  <h3 className="font-medium mb-2">Debug Information:</h3>
                  <p>Selected Exam ID: {selectedExamId}</p>
                  <p>Selected Student ID: {selectedStudentId}</p>
                  <p>Total responses found: {responses.length}</p>
                  <p>Total questions found: {questions.length}</p>
                </div>
              </div>
            ) : (
              <div className="space-y-6">
                {questions.map((question) => {
                  const response = getResponseForQuestion(question.$id);
                  const selectedOption = response?.selected_option;
                  const correctAnswer = question.correct_answer;
                  const isCorrect = selectedOption === correctAnswer;

                  return (
                    <div 
                      key={question.$id} 
                      className={`border rounded-lg p-4 ${isCorrect ? 'bg-green-50 border-green-200' : 'bg-red-50 border-red-200'}`}
                    >
                      <div className="flex justify-between items-start">
                        <div className="flex-1">
                          <h3 className="font-medium">
                            {question.text}
                          </h3>
                          
                          <div className="mt-3 space-y-2">
                            {[0, 1, 2, 3].map((index) => (
                              <div 
                                key={index}
                                className={`p-2 rounded border ${selectedOption === index ? 
                                  (isCorrect ? 'bg-green-100 border-green-300' : 'bg-red-100 border-red-300') : 
                                  'bg-white border-gray-200'}`}
                              >
                                {getOptionText(question, index)}
                              </div>
                            ))}
                          </div>

                          <div className="mt-3 flex flex-wrap gap-2">
                            <span className={`px-2 py-1 rounded-full text-xs ${isCorrect ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                              {isCorrect ? 'Correct' : 'Incorrect'}
                            </span>
                            <span className="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs">
                              Selected: {selectedOption !== undefined ? selectedOption + 1 : 'Not answered'}
                            </span>
                            <span className="px-2 py-1 bg-purple-100 text-purple-800 rounded-full text-xs">
                              Correct: {correctAnswer + 1}
                            </span>
                            {question.difficulty && (
                              <span className="px-2 py-1 bg-yellow-100 text-yellow-800 rounded-full text-xs">
                                Difficulty: {question.difficulty}
                              </span>
                            )}
                          </div>
                        </div>
                        <div className="flex flex-col items-end space-y-1 ml-4">
                          <span className="px-2 py-1 bg-gray-100 text-gray-800 rounded-full text-xs">
                            QID: {question.question_id || question.$id}
                          </span>
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default StudentResponsesViewerPage;-e [1;34m===== ./pages/test/exam-enrollments-test.jsx =====[0m
import { useState, useEffect } from 'react';
import { databases } from '../../utils/appwrite';
import { ID, Query } from 'appwrite';

const ExamEnrollmentsTestPage = () => {
  const [enrollments, setEnrollments] = useState([]);
  const [exams, setExams] = useState([]);
  const [students, setStudents] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [formData, setFormData] = useState({
    enrollment_id: ID.unique(),
    student_id: '',
    exam_id: '',
    enrolled_at: new Date().toISOString()
  });
  const [editingId, setEditingId] = useState(null);
  const [showRawData, setShowRawData] = useState(false);

  const databaseId = '67a5a946002e8a51f8fe';
  const collectionId = 'exam_enrollments';

  const fetchAllData = async () => {
    setLoading(true);
    try {
      const [enrollmentsRes, examsRes, studentsRes] = await Promise.all([
        databases.listDocuments(databaseId, collectionId, [Query.limit(100), Query.orderDesc('enrolled_at')]),
        databases.listDocuments(databaseId, 'exams', [Query.limit(100)]),
        databases.listDocuments(databaseId, 'students', [Query.limit(100)])
      ]);

      setEnrollments(enrollmentsRes.documents);
      setExams(examsRes.documents);
      setStudents(studentsRes.documents);
    } catch (err) {
      setError(err.message);
      console.error('Fetch error:', err);
    } finally {
      setLoading(false);
    }
  };

  const resolveRelationshipId = (field) => {
    if (!field) return null;
    if (typeof field === 'object' && field.$id) return field.$id;
    if (Array.isArray(field) && field.length > 0) return field[0]?.$id || field[0];
    return field;
  };

  const getExamName = (examId) => {
    const resolvedId = resolveRelationshipId(examId);
    const exam = exams.find(e => e.$id === resolvedId || e.exam_id === resolvedId);
    if (exam) {
      return `${exam.name} (${exam.exam_id})`;
    }
    return 'Unknown Exam';
  };

  const getStudentName = (studentId) => {
    const resolvedId = resolveRelationshipId(studentId);
    const student = students.find(s => s.$id === resolvedId || s.student_id === resolvedId);
    if (student) {
      return `${student.name} (${student.email})`;
    }
    return 'Unknown Student';
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    const date = new Date(dateString);
    return date.toLocaleString();
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      const data = {
        enrollment_id: formData.enrollment_id,
        student_id: [formData.student_id],
        exam_id: [formData.exam_id],
        enrolled_at: formData.enrolled_at
      };

      if (editingId) {
        await databases.updateDocument(databaseId, collectionId, editingId, data);
      } else {
        await databases.createDocument(databaseId, collectionId, ID.unique(), {
          ...data,
          enrollment_id: ID.unique() // Generate new ID for new records
        });
      }

      await fetchAllData();
      resetForm();
    } catch (err) {
      setError(err.message);
      console.error('Submission error:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleEdit = (enrollment) => {
    setFormData({
      enrollment_id: enrollment.enrollment_id || ID.unique(),
      student_id: resolveRelationshipId(enrollment.student_id) || '',
      exam_id: resolveRelationshipId(enrollment.exam_id) || '',
      enrolled_at: enrollment.enrolled_at || new Date().toISOString()
    });
    setEditingId(enrollment.$id);
  };

  const handleDelete = async (id) => {
    if (window.confirm('Are you sure you want to delete this enrollment?')) {
      try {
        await databases.deleteDocument(databaseId, collectionId, id);
        await fetchAllData();
        if (editingId === id) resetForm();
      } catch (err) {
        setError(err.message);
      }
    }
  };

  const resetForm = () => {
    setFormData({
      enrollment_id: ID.unique(),
      student_id: '',
      exam_id: '',
      enrolled_at: new Date().toISOString()
    });
    setEditingId(null);
  };

  useEffect(() => {
    fetchAllData();
  }, []);

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-6">Exam Enrollments Management</h1>

      {error && (
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4">
          <p>{error}</p>
        </div>
      )}

      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        {/* Form Section */}
        <div className="bg-white p-6 rounded-lg shadow">
          <h2 className="text-xl font-semibold mb-4">
            {editingId ? 'Edit Enrollment' : 'Add New Enrollment'}
          </h2>
          <form onSubmit={handleSubmit} className="space-y-4">
            {editingId && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Enrollment ID</label>
                <input
                  type="text"
                  name="enrollment_id"
                  value={formData.enrollment_id}
                  readOnly
                  className="w-full p-2 border border-gray-300 rounded-md shadow-sm bg-gray-100"
                />
              </div>
            )}

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Student</label>
              <select
                name="student_id"
                value={formData.student_id}
                onChange={handleChange}
                className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
                required
                disabled={loading}
              >
                <option value="">Select Student</option>
                {students.map((student) => (
                  <option key={student.$id} value={student.$id}>
                    {student.name} ({student.email})
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Exam</label>
              <select
                name="exam_id"
                value={formData.exam_id}
                onChange={handleChange}
                className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
                required
                disabled={loading}
              >
                <option value="">Select Exam</option>
                {exams.map((exam) => (
                  <option key={exam.$id} value={exam.$id}>
                    {exam.name} ({exam.exam_id})
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Enrollment Date</label>
              <input
                type="datetime-local"
                name="enrolled_at"
                value={formData.enrolled_at ? formData.enrolled_at.substring(0, 16) : ''}
                onChange={handleChange}
                className="w-full p-2 border border-gray-300 rounded-md shadow-sm"
                required
                disabled={loading}
              />
            </div>

            <div className="flex space-x-2">
              <button
                type="submit"
                disabled={loading}
                className={`px-4 py-2 rounded-md text-white ${loading ? 'bg-blue-400' : 'bg-blue-600 hover:bg-blue-700'}`}
              >
                {loading ? (editingId ? 'Updating...' : 'Adding...') : (editingId ? 'Update' : 'Add')}
              </button>
              {editingId && (
                <button
                  type="button"
                  onClick={resetForm}
                  className="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600"
                >
                  Cancel
                </button>
              )}
            </div>
          </form>
        </div>

        {/* List Section */}
        <div className="bg-white p-6 rounded-lg shadow">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold">Exam Enrollments List</h2>
            <div className="flex space-x-2">
              <button
                onClick={fetchAllData}
                disabled={loading}
                className="text-sm bg-gray-100 hover:bg-gray-200 px-3 py-1 rounded"
              >
                Refresh
              </button>
              <button
                onClick={() => setShowRawData(!showRawData)}
                className="text-sm bg-gray-100 hover:bg-gray-200 px-3 py-1 rounded"
              >
                {showRawData ? 'Hide Raw Data' : 'Show Raw Data'}
              </button>
            </div>
          </div>

          {loading && enrollments.length === 0 ? (
            <div className="text-center py-8">
              <p>Loading enrollments...</p>
            </div>
          ) : enrollments.length === 0 ? (
            <div className="text-center py-8">
              <p>No enrollments found</p>
            </div>
          ) : (
            <div className="space-y-4">
              {enrollments.map((enrollment) => (
                <div key={enrollment.$id} className="border border-gray-200 rounded-lg p-4 hover:bg-gray-50">
                  <div className="flex justify-between items-start">
                    <div>
                      <h3 className="font-medium">{getStudentName(enrollment.student_id)}</h3>
                      <p className="text-sm text-gray-600">
                        Enrolled in: {getExamName(enrollment.exam_id)}
                      </p>
                      <p className="text-xs text-gray-500 mt-1">
                        Enrollment ID: {enrollment.enrollment_id}
                      </p>
                      <p className="text-xs text-gray-500">
                        Enrolled at: {formatDate(enrollment.enrolled_at)}
                      </p>
                    </div>
                    <div className="text-sm text-gray-500">
                      {formatDate(enrollment.enrolled_at)}
                    </div>
                  </div>

                  {showRawData && (
                    <div className="mt-3 p-2 bg-gray-50 rounded text-xs overflow-x-auto">
                      <pre>{JSON.stringify(enrollment, null, 2)}</pre>
                    </div>
                  )}

                  <div className="mt-3 flex space-x-2">
                    <button
                      onClick={() => handleEdit(enrollment)}
                      className="text-sm text-blue-600 hover:text-blue-800 px-2 py-1 rounded hover:bg-blue-50"
                    >
                      Edit
                    </button>
                    <button
                      onClick={() => handleDelete(enrollment.$id)}
                      className="text-sm text-red-600 hover:text-red-800 px-2 py-1 rounded hover:bg-red-50"
                    >
                      Delete
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ExamEnrollmentsTestPage;-e [1;34m===== ./pages/_document.js =====[0m
import { Html, Head, Main, NextScript } from "next/document";

export default function Document() {
  return (
    <Html lang="en">
      <Head />
      <body className="antialiased">
        <Main />
        <NextScript />
      </body>
    </Html>
  );
}
-e [1;34m===== ./components/StudentNavbar.jsx =====[0m
import React from 'react';
import Link from 'next/link';
import { useRouter } from 'next/router';

const StudentNavbar = () => {
  const router = useRouter();

  const navLinkClass = (path) =>
    `px-3 py-2 rounded-md text-sm font-medium ${
      router.pathname.startsWith(path)
        ? 'bg-blue-100 text-blue-700'
        : 'text-gray-700 hover:bg-gray-100'
    }`;

  return (
    <nav className="bg-white shadow-sm">
      <div className="container mx-auto px-4 py-3 flex justify-between items-center">
        <Link href="/student" className="text-xl font-bold text-blue-600">
          Student Portal
        </Link>
        <div className="flex items-center space-x-4">
          <Link href="/student/exams" className={navLinkClass('/student/exams')}>
            My Exams
          </Link>
          <Link href="/student/results" className={navLinkClass('/student/results')}>
            Results
          </Link>
          <button className="px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-md text-sm font-medium">
            Logout
          </button>
        </div>
      </div>
    </nav>
  );
};

export default StudentNavbar;
-e [1;34m===== ./components/Table.jsx =====[0m
import React from "react";

const Table = ({ data = [] }) => {
  // Ensure data is always an array
  if (!Array.isArray(data) || data.length === 0) {
    return <p className="text-gray-500">No data available</p>;
  }

  // Extract column headers dynamically from data keys
  const columns = Object.keys(data[0] || {});

  return (
    <table className="w-full border-collapse border border-gray-300">
      <thead>
        <tr className="bg-gray-100">
          {columns.map((col) => (
            <th key={col} className="px-4 py-2 text-left border border-gray-300">
              {col}
            </th>
          ))}
        </tr>
      </thead>
      <tbody>
        {data.map((row, index) => (
          <tr key={index} className="border border-gray-300">
            {columns.map((col) => (
              <td key={col} className="px-4 py-2 border border-gray-300">
                {row[col]}
              </td>
            ))}
          </tr>
        ))}
      </tbody>
    </table>
  );
};

export default Table;
-e [1;34m===== ./components/Modal.jsx =====[0m
import React, { useState, useEffect } from "react";

const Modal = ({
  title,
  onClose,
  onSave,
  initialData = {},
  fields = [],
  isLoading = false,
  error = null,
  onChange,
  modalWidthClass = "w-full max-w-md", // Default for centered modals
  customPosition = null // New prop for custom positioning e.g., { top: '10vh', left: '35vw', right: '25vw', bottom: '10vh' }
}) => {
  const [formData, setFormData] = useState({});
  const [localError, setLocalError] = useState(null);

  useEffect(() => {
    setFormData(initialData || {});
  }, [initialData]);

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    const newValue = type === "checkbox" ? checked : value;
    setFormData((prevData) => ({
      ...prevData,
      [name]: newValue,
    }));
    if (onChange) {
      onChange(e);
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    setLocalError(null);
    const missingFields = fields
      .filter(field => field.required)
      .filter(field => !formData[field.name] && formData[field.name] !== 0 && formData[field.name] !== false)
      .map(field => field.label);

    if (missingFields.length > 0) {
      setLocalError(`Please fill in: ${missingFields.join(", ")}`);
      return;
    }
    onSave(formData);
  };

  const isCustomPositioned = customPosition && Object.keys(customPosition).length > 0;

  const overlayClasses = `fixed inset-0 z-50 bg-gray-900 bg-opacity-50 p-4 overflow-y-auto ${
    !isCustomPositioned ? 'flex items-center justify-center' : ''
  }`;

  let dialogStyle = {};
  if (isCustomPositioned) {
    dialogStyle = {
      position: 'absolute',
      top: customPosition.top,
      left: customPosition.left,
      right: customPosition.right,
      bottom: customPosition.bottom,
      // Width and height are implicitly defined by top/bottom/left/right
    };
  }

  const dialogBaseClasses = "bg-white rounded-lg shadow-xl flex flex-col"; // Added flex flex-col
  const dialogSizingClasses = isCustomPositioned 
    ? "" // Sizing is handled by inline styles from customPosition
    : modalWidthClass; // Use modalWidthClass for centered modals
  const dialogMaxHeightClass = isCustomPositioned ? "" : "max-h-[90vh]"; // Apply max-h only if not custom positioned with bottom

  return (
    <div className={overlayClasses}>
      <div 
        className={`${dialogBaseClasses} ${dialogSizingClasses} ${dialogMaxHeightClass}`}
        style={isCustomPositioned ? dialogStyle : {}}
      >
        <div className="p-6 border-b border-gray-200"> {/* Header part */}
          <div className="flex justify-between items-center">
            <h3 className="text-xl font-semibold text-gray-800">{title}</h3>
            <button
              onClick={onClose}
              className="text-gray-500 hover:text-gray-700"
              disabled={isLoading}
            >
              <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </div>

        <div className="p-6 overflow-y-auto flex-grow"> {/* Content part, flex-grow for scroll */}
          {(error || localError) && (
            <div className="mb-4 p-3 bg-red-100 border-l-4 border-red-500 text-red-700">
              <p>{error || localError}</p>
            </div>
          )}

          <form onSubmit={handleSubmit}>
            <div className="space-y-4">
              {fields.length > 0 ? (
                fields.map((field) => (
                  <div key={field.name} className="space-y-1">
                    <label className="block text-sm font-medium text-gray-700">
                      {field.label}
                      {field.required && <span className="text-red-500"> *</span>}
                    </label>
                    
                    {field.type === "select" ? (
                      <select
                        name={field.name}
                        value={formData[field.name] || ""}
                        onChange={handleChange}
                        className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
                        disabled={isLoading || field.disabled}
                        required={field.required}
                      >
                        {field.placeholder && <option value="">{field.placeholder}</option>}
                        {field.options.map((option) => (
                          <option key={option.value || option} value={option.value || option}>
                            {option.label || option}
                          </option>
                        ))}
                      </select>
                    ) : field.type === "textarea" ? (
                      <textarea
                        name={field.name}
                        value={formData[field.name] || ""}
                        onChange={handleChange}
                        className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
                        rows={field.rows || 3}
                        disabled={isLoading || field.disabled}
                        required={field.required}
                        placeholder={field.placeholder || ""}
                      />
                    ) : (
                      <input
                        type={field.type}
                        name={field.name}
                        value={formData[field.name] || (field.type === "number" ? "" : "")}
                        onChange={handleChange}
                        className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
                        disabled={isLoading || field.disabled}
                        required={field.required}
                        placeholder={field.placeholder || ""}
                        min={field.min}
                        max={field.max}
                        step={field.step}
                      />
                    )}
                  </div>
                ))
              ) : (
                <p className="text-gray-500">No fields provided.</p>
              )}
            </div>

            <div className="mt-6 flex justify-end space-x-3 pt-4 border-t border-gray-200"> {/* Footer part, added pt-4 and border-t */}
              <button
                type="button"
                onClick={onClose}
                className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors"
                disabled={isLoading}
              >
                Cancel
              </button>
              <button
                type="submit"
                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors disabled:opacity-50"
                disabled={isLoading}
              >
                {isLoading ? 'Saving...' : 'Save'}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default Modal;-e [1;34m===== ./components/Navbar.jsx =====[0m
import React, { useState, useEffect } from "react";
import { useRouter } from "next/router";
import { Bell, User, ChevronDown, LogOut } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";
import { account, databases } from "../utils/appwrite";
import { Query } from "appwrite";
import Head from "next/head";

const Navbar = ({ isAdmin = false }) => {
  const router = useRouter();
  const [user, setUser] = useState(null);
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const [isNotifOpen, setIsNotifOpen] = useState(false);
  const [notifications, setNotifications] = useState([]);
  const [loadingNotifications, setLoadingNotifications] = useState(true);

  // Fetch user data
  useEffect(() => {
    if (isAdmin) {
      account.get().then((res) => setUser(res)).catch(() => router.push("/login"));
    } else {
      const studentSession = localStorage.getItem("studentSession");
      if (studentSession) setUser(JSON.parse(studentSession));
    }
  }, [isAdmin, router]);

  // Click outside to close dropdowns
  useEffect(() => {
    const handleClickOutside = (e) => {
      if (isDropdownOpen && !e.target.closest(".user-dropdown")) setIsDropdownOpen(false);
      if (isNotifOpen && !e.target.closest(".notification-dropdown")) setIsNotifOpen(false);
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, [isDropdownOpen, isNotifOpen]);

  // Fetch notifications
  const fetchNotifications = async () => {
    setLoadingNotifications(true);
    try {
      const collectionId = isAdmin
        ? process.env.NEXT_PUBLIC_APPWRITE_ADMIN_NOTIFICATIONS_COLLECTION_ID
        : process.env.NEXT_PUBLIC_APPWRITE_STUDENT_NOTIFICATIONS_COLLECTION_ID;
      const response = await databases.listDocuments(
        process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
        collectionId,
        [Query.orderDesc("$createdAt")]
      );
      setNotifications(response.documents);
    } catch (error) {
      console.error("Failed to fetch notifications:", error);
    }
    setLoadingNotifications(false);
  };

  const handleNotificationClick = () => {
    if (!isNotifOpen) fetchNotifications();
    setIsNotifOpen(!isNotifOpen);
  };

  const handleLogout = async () => {
    if (isAdmin) await account.deleteSession("current");
    localStorage.removeItem("studentSession");
    router.push("/login");
  };

  return (
    <>
      <Head>
        <title>Online Exam Portal - Nielit Tezpur EC</title>
        <link rel="icon" href="https://mimitmalout.ac.in/NIELIT.png" />
      </Head>

      {/* Premium Light Navbar */}
      <nav className="fixed top-0 w-full h-16 bg-[#f8fafc] border-b border-[#e2e8f0] px-6 flex items-center justify-between z-50">
        {/* Logo & Title */}
        <motion.div 
          whileHover={{ scale: 1.02 }}
          className="flex items-center space-x-3 cursor-pointer"
          onClick={() => router.push("/")}
        >
          <img 
            src="https://mimitmalout.ac.in/NIELIT.png" 
            alt="Logo"
            className="h-8 w-8"
          />
          <span className="text-lg font-semibold text-[#1e293b] hidden sm:inline">
            Online Exam Portal - Nielit Tezpur EC
          </span>
        </motion.div>

        {/* Right Side Controls */}
        <div className="flex items-center space-x-4">
          {/* Notification Bell */}
          <motion.div 
            className="relative notification-dropdown"
            whileHover={{ scale: 1.05 }}
          >
            <button
              onClick={handleNotificationClick}
              className="p-2 rounded-full hover:bg-[#f1f5f9] transition-colors"
            >
              <Bell size={20} className="text-[#475569]" />
              {notifications.length > 0 && (
                <motion.span
                  initial={{ scale: 0 }}
                  animate={{ scale: 1 }}
                  transition={{ type: "spring", stiffness: 500, damping: 10 }}
                  className="absolute top-1 right-1 w-2 h-2 bg-[#ef4444] rounded-full"
                />
              )}
            </button>

            {/* Notification Dropdown */}
            <AnimatePresence>
              {isNotifOpen && (
                <motion.div
                  initial={{ opacity: 0, y: -10 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -10 }}
                  className="absolute right-0 top-12 w-72 bg-white rounded-lg shadow-md border border-[#e2e8f0] z-50"
                >
                  <div className="p-3 border-b border-[#e2e8f0] bg-[#f8fafc]">
                    <h3 className="font-medium text-[#1e293b]">Notifications</h3>
                  </div>
                  <div className="max-h-64 overflow-y-auto">
                    {loadingNotifications ? (
                      <div className="p-4 text-center text-[#64748b] text-sm">
                        Loading...
                      </div>
                    ) : notifications.length === 0 ? (
                      <div className="p-4 text-center text-[#64748b] text-sm">
                        No new notifications
                      </div>
                    ) : (
                      notifications.map(notif => (
                        <div key={notif.$id} className="p-3 border-b border-[#e2e8f0] hover:bg-[#f8fafc]">
                          <p className="font-medium text-[#1e293b] text-sm">{notif.title}</p>
                          <p className="text-[#475569] text-xs mt-1">{notif.content}</p>
                          <p className="text-[#94a3b8] text-xs mt-1">
                            {new Date(notif.$createdAt).toLocaleDateString('en-US', {
                              month: 'short',
                              day: 'numeric',
                              hour: '2-digit',
                              minute: '2-digit'
                            })}
                          </p>
                        </div>
                      ))
                    )}
                  </div>
                </motion.div>
              )}
            </AnimatePresence>
          </motion.div>

          {/* User Dropdown */}
          <motion.div className="relative user-dropdown">
            <motion.button
              onClick={() => setIsDropdownOpen(!isDropdownOpen)}
              whileHover={{ scale: 1.05 }}
              className="flex items-center space-x-2 hover:bg-[#f1f5f9] rounded-full p-1 pr-2 transition-colors"
            >
              <div className="w-8 h-8 rounded-full bg-[#e0f2fe] flex items-center justify-center">
                <User size={16} className="text-[#0369a1]" />
              </div>
              <ChevronDown 
                size={16} 
                className={`text-[#64748b] transition-transform ${isDropdownOpen ? 'rotate-180' : ''}`} 
              />
            </motion.button>

            <AnimatePresence>
              {isDropdownOpen && (
                <motion.div
                  initial={{ opacity: 0, y: -10 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -10 }}
                  className="absolute right-0 top-12 w-48 bg-white rounded-lg shadow-md border border-[#e2e8f0] z-50 py-1"
                >
                  <div className="px-4 py-2 border-b border-[#e2e8f0]">
                    <p className="font-medium text-[#1e293b] text-sm">{user?.name || "Guest"}</p>
                    <p className="text-[#64748b] text-xs">{isAdmin ? "Admin" : "Student"}</p>
                  </div>
                  <button
                    onClick={handleLogout}
                    className="w-full px-4 py-2 text-left text-sm text-[#475569] hover:bg-[#f8fafc] flex items-center space-x-2"
                  >
                    <LogOut size={14} />
                    <span>Sign out</span>
                  </button>
                </motion.div>
              )}
            </AnimatePresence>
          </motion.div>
        </div>
      </nav>
    </>
  );
};

export default Navbar;-e [1;34m===== ./components/StudentLayout.jsx =====[0m
import React from 'react';
import Head from 'next/head';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { LayoutDashboard, FileText, BarChart2 } from 'lucide-react';

const StudentLayout = ({ children, sidebarOpen, toggleSidebar }) => {
  const router = useRouter();

  const menuItems = [
    { name: 'Dashboard', path: '/student/', icon: LayoutDashboard },
    { name: 'Exams', path: '/student/exams', icon: FileText },
    { name: 'Results', path: '/student/results', icon: BarChart2 },
  ];

  return (
    <>
      <Head>
        <title>Student Portal</title>
        <meta name="description" content="Student examination portal" />
      </Head>

      {/* Sidebar - Light-themed, matching AdminLayout */}
      <aside
        className={`w-64 bg-white text-gray-700 fixed left-0 top-16 h-[calc(100vh-4rem)] z-40 transition-all duration-300 ease-in-out border-r border-gray-200 shadow-sm ${
          sidebarOpen ? 'translate-x-0' : '-translate-x-full'
        } md:translate-x-0`}
      >
        <div className="p-4 sm:p-6 h-full overflow-y-auto">
          <h2 className="text-xl font-extrabold text-gray-800 mb-6">Student Portal</h2>
          <nav className="space-y-1">
            {menuItems.map((item) => (
              <Link
                key={item.path}
                href={item.path}
                shallow={true}
                className={`flex items-center gap-3 py-2 px-4 rounded-md transition-colors duration-200 text-base font-semibold ${
                  router.pathname === item.path
                    ? 'bg-blue-100 text-blue-600'
                    : 'text-gray-700 hover:bg-gray-100 hover:text-gray-900'
                }`}
              >
                <item.icon size={20} className="shrink-0" />
                <span>{item.name}</span>
              </Link>
            ))}
          </nav>
        </div>
      </aside>

      {/* Main Content - Adjusted for fixed sidebar with bg-gray-100 */}
      <main
        className={`flex-1 transition-all duration-300 ease-in-out ${
          sidebarOpen ? 'ml-64' : 'ml-0'
        } md:ml-64`}
      >
        <div className="p-4 sm:p-6 bg-gray-100 min-h-[calc(100vh-4rem)]">
          <div className="container mx-auto">{children}</div>
        </div>
      </main>
    </>
  );
};

export default StudentLayout;-e [1;34m===== ./components/AdminLayout.jsx =====[0m
import React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  LayoutDashboard,
  BookOpen,
  Users,
  FileText,
  FileCheck,
  HelpCircle,
  BarChart2,
  Bell,
  Settings,
} from "lucide-react";

const AdminLayout = ({ children, sidebarOpen, toggleSidebar }) => {
  const router = useRouter();

  const menuItems = [
    { name: "Dashboard", path: "/admin", icon: LayoutDashboard },
    { name: "Manage Courses", path: "/admin/courses", icon: BookOpen },
    { name: "Manage Students", path: "/admin/students", icon: Users },
    { name: "Manage Exams", path: "/admin/exams", icon: FileText },
    { name: "Exam Enrollments", path: "/admin/exam-enrollments", icon: FileCheck },
    { name: "Manage Questions", path: "/admin/questions", icon: HelpCircle },
    { name: "Results & Analytics", path: "/admin/results", icon: BarChart2 },
    { name: "Manage Notifications", path: "/admin/notifications", icon: Bell },
    { name: "Settings", path: "/admin/settings", icon: Settings },
  ];

  return (
    <>
      {/* Sidebar - Fixed, light-themed */}
      <aside
        className={`w-64 bg-white text-gray-700 fixed left-0 top-16 h-[calc(100vh-4rem)] z-40 transition-all duration-300 ease-in-out border-r border-gray-200 shadow-sm ${
          sidebarOpen ? "translate-x-0" : "-translate-x-full"
        } md:translate-x-0`}
      >
        <div className="p-4 sm:p-6 h-full overflow-y-auto">
          <h2 className="text-xl font-extrabold text-gray-800 mb-6">Admin Panel</h2>
          <nav className="space-y-1">
            {menuItems.map((item) => (
              <Link
                key={item.path}
                href={item.path}
                shallow={true}
                className={`flex items-center gap-3 py-2 px-4 rounded-md transition-colors duration-200 text-base font-semibold ${
                  router.pathname === item.path
                    ? "bg-blue-100 text-blue-600"
                    : "text-gray-700 hover:bg-gray-100 hover:text-gray-900"
                }`}
              >
                <item.icon size={20} className="shrink-0" />
                <span>{item.name}</span>
              </Link>
            ))}
          </nav>
        </div>
      </aside>

      {/* Main Content - Adjusted for fixed sidebar */}
      <main
        className={`flex-1 transition-all duration-300 ease-in-out ${
          sidebarOpen ? "ml-64" : "ml-0"
        } md:ml-64`}
      >
        <div className="p-4 sm:p-6 bg-gray-100 min-h-[calc(100vh-4rem)]">
          <div className="container mx-auto">{children}</div>
        </div>
      </main>
    </>
  );
};

export default AdminLayout;