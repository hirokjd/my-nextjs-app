./content.txt
./styles/globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff; /* Light mode background */
  --foreground: #d1cece; /* Set to pure black */
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #ffffff; /* Dark mode background */
    --foreground: #2d2c2c; /* Light gray for dark mode text */
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}

./utils/auth.js
//src/utils/auth.js
import { account, databases } from "./appwrite";
import { Query } from "appwrite";

export const loginAdmin = async (email, password) => {
  try {
    const session = await account.createEmailPasswordSession(email, password);
    console.log("Admin session:", session); // ✅ Log session data
    return session;
  } catch (error) {
    throw new Error(error.message);
  }
};

export const getStudentByEmail = async (email) => {
  try {
    console.log("Database ID:", process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID);
    console.log("Students Collection ID:", process.env.NEXT_PUBLIC_APPWRITE_STUDENTS_COLLECTION_ID);

    const response = await databases.listDocuments(
      process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
      process.env.NEXT_PUBLIC_APPWRITE_STUDENTS_COLLECTION_ID,
      [Query.equal("email", [email])] // ✅ Use Query helper
    );

    if (response.documents.length === 0) {
      throw new Error("Student not found.");
    }

    return response.documents[0]; // Return student data
  } catch (error) {
    throw new Error(error.message);
  }
};

export const loginStudent = async (email, password) => {
  try {
    const student = await getStudentByEmail(email);

    // Direct password comparison (No encryption)
    if (student.password !== password) {
      throw new Error("Invalid student credentials.");
    }

    console.log("Student logged in successfully:", student); // ✅ Debugging log
    return student;
  } catch (error) {
    throw new Error(error.message);
  }
};

./utils/appwrite.js
import { Client, Account, Databases, Storage, ID, Query, Permission, Role } from "appwrite";

const client = new Client();
client
  .setEndpoint(process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT)
  .setProject(process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID);

const account = new Account(client);
const databases = new Databases(client);
const storage = new Storage(client);

// Export all the initialized instances and classes
export { 
  client,
  account, 
  databases, 
  storage, 
  ID, 
  Query, 
  Permission, 
  Role 
};
./utils/protectRoute.js
//src/utils/protectRoute.js
import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import { account } from "./appwrite";

const protectRoute = (WrappedComponent) => {
  return (props) => {
    const router = useRouter();
    const [isAuthenticated, setIsAuthenticated] = useState(null);

    useEffect(() => {
      const checkAuth = async () => {
        try {
          let user = null;

          if (router.pathname.startsWith("/admin")) {
            // ✅ Admin Authentication (via Appwrite Auth)
            user = await account.get();
          } else {
            // ✅ Student Authentication (via localStorage)
            const studentSession = localStorage.getItem("studentSession");
            if (studentSession) {
              console.log("✅ Student session found in protectRoute:", studentSession);
              user = JSON.parse(studentSession);
            }
          }

          if (user) {
            setIsAuthenticated(true);
          } else {
            throw new Error("Not authenticated");
          }
        } catch (error) {
          setIsAuthenticated(false);
          router.replace("/login"); // ❌ Redirect if not authenticated
        }
      };

      checkAuth();
    }, []);

    if (isAuthenticated === null) {
      return <p>Loading...</p>; // ✅ Prevents flashing protected page
    }

    return <WrappedComponent {...props} />;
  };
};

export default protectRoute;

./components/Table.jsx
import React from "react";

const Table = ({ data = [] }) => {
  // Ensure data is always an array
  if (!Array.isArray(data) || data.length === 0) {
    return <p className="text-gray-500">No data available</p>;
  }

  // Extract column headers dynamically from data keys
  const columns = Object.keys(data[0] || {});

  return (
    <table className="w-full border-collapse border border-gray-300">
      <thead>
        <tr className="bg-gray-100">
          {columns.map((col) => (
            <th key={col} className="px-4 py-2 text-left border border-gray-300">
              {col}
            </th>
          ))}
        </tr>
      </thead>
      <tbody>
        {data.map((row, index) => (
          <tr key={index} className="border border-gray-300">
            {columns.map((col) => (
              <td key={col} className="px-4 py-2 border border-gray-300">
                {row[col]}
              </td>
            ))}
          </tr>
        ))}
      </tbody>
    </table>
  );
};

export default Table;

./components/StudentLayout.jsx
import React from 'react';
import Head from 'next/head';
import StudentNavbar from './StudentNavbar';

const StudentLayout = ({ children }) => {
  return (
    <div className="min-h-screen bg-gray-50">
      <Head>
        <title>Student Portal</title>
        <meta name="description" content="Student examination portal" />
      </Head>
      
      <StudentNavbar />
      
      <main className="container mx-auto px-4 py-6">
        {children}
      </main>
    </div>
  );
};

export default StudentLayout;
./components/Modal.jsx
import React, { useState, useEffect } from "react";

const Modal = ({ 
  title, 
  onClose, 
  onSave, 
  initialData = {}, 
  fields = [], 
  isLoading = false,
  error = null,
  onChange
}) => {
  const [formData, setFormData] = useState({});
  const [localError, setLocalError] = useState(null);

  useEffect(() => {
    setFormData(initialData || {});
  }, [initialData]);

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    const newValue = type === "checkbox" ? checked : value;
    
    setFormData((prevData) => ({
      ...prevData,
      [name]: newValue,
    }));

    // Call external onChange if provided
    if (onChange) {
      onChange(e);
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    setLocalError(null);

    // Validate required fields
    const missingFields = fields
      .filter(field => field.required)
      .filter(field => !formData[field.name] && formData[field.name] !== 0)
      .map(field => field.label);

    if (missingFields.length > 0) {
      setLocalError(`Please fill in: ${missingFields.join(", ")}`);
      return;
    }

    onSave(formData);
  };

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-gray-900 bg-opacity-50">
      <div className="bg-white rounded-lg shadow-xl w-full max-w-md max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          <div className="flex justify-between items-center mb-4">
            <h3 className="text-xl font-semibold text-gray-800">{title}</h3>
            <button
              onClick={onClose}
              className="text-gray-500 hover:text-gray-700"
              disabled={isLoading}
            >
              <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>

          {(error || localError) && (
            <div className="mb-4 p-3 bg-red-100 border-l-4 border-red-500 text-red-700">
              <p>{error || localError}</p>
            </div>
          )}

          <form onSubmit={handleSubmit}>
            <div className="space-y-4">
              {fields.length > 0 ? (
                fields.map((field) => (
                  <div key={field.name} className="space-y-1">
                    <label className="block text-sm font-medium text-gray-700">
                      {field.label}
                      {field.required && <span className="text-red-500"> *</span>}
                    </label>
                    
                    {field.type === "select" ? (
                      <select
                        name={field.name}
                        value={formData[field.name] || ""}
                        onChange={handleChange}
                        className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
                        disabled={isLoading}
                        required={field.required}
                      >
                        {field.options.map((option) => (
                          <option key={option} value={option}>
                            {option}
                          </option>
                        ))}
                      </select>
                    ) : field.type === "textarea" ? (
                      <textarea
                        name={field.name}
                        value={formData[field.name] || ""}
                        onChange={handleChange}
                        className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
                        rows={3}
                        disabled={isLoading}
                        required={field.required}
                      />
                    ) : (
                      <input
                        type={field.type}
                        name={field.name}
                        value={formData[field.name] || ""}
                        onChange={handleChange}
                        className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
                        disabled={isLoading}
                        required={field.required}
                      />
                    )}
                  </div>
                ))
              ) : (
                <p className="text-gray-500">No fields provided.</p>
              )}
            </div>

            <div className="mt-6 flex justify-end space-x-3">
              <button
                type="button"
                onClick={onClose}
                className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors"
                disabled={isLoading}
              >
                Cancel
              </button>
              <button
                type="submit"
                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors disabled:opacity-50"
                disabled={isLoading}
              >
                {isLoading ? 'Saving...' : 'Save'}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default Modal;
./components/Sidebar.jsx
import React, { useEffect, useRef } from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  LayoutDashboard,
  Users,
  GraduationCap,
  Bell,
  MessageCircle,
  FileText,
  Calendar,
  Award,
  ClipboardList,
  BookOpen,
  X,
  Plus,
} from "lucide-react";
import { motion } from "framer-motion";

const Sidebar = ({ isAdmin = false, isOpen, toggleSidebar }) => {
  const router = useRouter();
  const sidebarRef = useRef(null);

  // Define separate color themes
  const sidebarBg = isAdmin ? "#002147" : "#2E7D32"; // Admin: Dark Navy Blue | Student: Deep Green
  const hoverColor = isAdmin ? "#004080" : "#388E3C"; // Admin: Richer Blue | Student: Refined Green
  const activeColor = isAdmin ? "#0055A4" : "#1B5E20"; // Admin: Darker Blue | Student: Darker Green

  const activeClass = `text-white font-semibold`;
  const baseClass = `flex items-center gap-3 px-4 py-3 rounded-lg transition-all duration-200`;

  const adminLinks = [
    { path: "/admin/dashboard", icon: <LayoutDashboard size={20} />, label: "Dashboard" },
    { path: "/admin/total-students", icon: <Users size={20} />, label: "Total Students" },
    { path: "/admin/exams", icon: <FileText size={20} />, label: "Exams" },
    { path: "/courses", icon: <BookOpen size={20} />, label: "Courses" },
    { path: "/admin/manage-notifications", icon: <Bell size={20} />, label: "Manage Notifications" },
    { path: "/admin/create", icon: <Plus size={20} />, label: "Create Exam" },
    { path: "/admin/support", icon: <MessageCircle size={20} />, label: "Support" },
  ];

  const studentLinks = [
    { path: "/student/dashboard", icon: <LayoutDashboard size={20} />, label: "Dashboard" },
    { path: "/exams/completed", icon: <ClipboardList size={20} />, label: "Completed Exams" },
    { path: "/exams/exams", icon: <Calendar size={20} />, label: "Exams" },
    { path: "/student/results", icon: <FileText size={20} />, label: "Results" },
    { path: "/certificates", icon: <Award size={20} />, label: "Certificates" },
    { path: "/contact-support", icon: <MessageCircle size={20} />, label: "Contact Support" },
  ];

  const links = isAdmin ? adminLinks : studentLinks;

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (sidebarRef.current && !sidebarRef.current.contains(event.target)) {
        toggleSidebar();
      }
    };

    if (isOpen) {
      document.addEventListener("mousedown", handleClickOutside);
    }
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [isOpen, toggleSidebar]);

  // Close sidebar automatically when the route changes
  useEffect(() => {
    const handleRouteChange = () => {
      toggleSidebar();
    };

    router.events.on("routeChangeComplete", handleRouteChange);
    return () => {
      router.events.off("routeChangeComplete", handleRouteChange);
    };
  }, [router, toggleSidebar]);

  return (
    <motion.div
      ref={sidebarRef}
      className="fixed top-0 left-0 h-full w-64 text-white p-4 z-50"
      style={{ backgroundColor: sidebarBg }}
      initial={{ x: "-100%" }}
      animate={{ x: isOpen ? 0 : "-100%" }}
      transition={{ type: "spring", stiffness: 300, damping: 30 }}
    >
      {/* Close Button */}
      <button onClick={toggleSidebar} className="absolute top-4 right-4 text-white">
        <X size={24} />
      </button>

      <div className="flex items-center gap-3 mb-8 px-4">
        <GraduationCap size={32} />
        <h1 className="text-xl font-bold">Exam</h1>
      </div>

      <nav className="space-y-2 flex-1">
        {links.map((link) => (
          <Link key={link.path} href={link.path}>
            <motion.div
              className={`${baseClass} ${router.pathname === link.path ? activeClass : ""}`}
              style={{
                backgroundColor: router.pathname === link.path ? activeColor : "transparent",
              }}
              whileHover={{ backgroundColor: hoverColor }}
              whileTap={{ scale: 0.95 }}
              onClick={toggleSidebar} // Auto-close sidebar when clicking a link
            >
              {link.icon}
              <span>{link.label}</span>
            </motion.div>
          </Link>
        ))}
      </nav>
    </motion.div>
  );
};

export default Sidebar;

./components/Navbar.jsx
//src/components/Navbar.js
import React, { useState, useEffect } from "react";
import { useRouter } from "next/router";
import { Bell, User, Menu, LogOut } from "lucide-react";
import { account, databases } from "../utils/appwrite";
import { Query } from "appwrite";

const Navbar = ({ isAdmin = false, toggleSidebar }) => {
  const router = useRouter();
  const [user, setUser] = useState(null);
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const [isNotifOpen, setIsNotifOpen] = useState(false);
  const [notifications, setNotifications] = useState([]);
  const [loadingNotifications, setLoadingNotifications] = useState(true);

  useEffect(() => {
    if (isAdmin) {
      account.get().then((res) => setUser(res)).catch(() => router.push("/login"));
    } else {
      const studentSession = localStorage.getItem("studentSession");
      if (studentSession) {
        setUser(JSON.parse(studentSession));
      }
    }
  }, [isAdmin, router]);

  // Fetch Notifications
  const fetchNotifications = async () => {
    setLoadingNotifications(true);
    try {
      const collectionId = isAdmin
        ? process.env.NEXT_PUBLIC_APPWRITE_ADMIN_NOTIFICATIONS_COLLECTION_ID
        : process.env.NEXT_PUBLIC_APPWRITE_STUDENT_NOTIFICATIONS_COLLECTION_ID;

      const response = await databases.listDocuments(
        process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
        collectionId,
        [Query.orderDesc("$createdAt")] // Latest first
      );
      setNotifications(response.documents);
    } catch (error) {
      console.error("Failed to load notifications:", error.message);
    }
    setLoadingNotifications(false);
  };

  const handleNotificationClick = () => {
    setIsNotifOpen(!isNotifOpen);
    if (!isNotifOpen) {
      fetchNotifications(); // Load notifications when dropdown opens
    }
  };

  const handleLogout = async () => {
    if (isAdmin) {
      await account.deleteSession("current"); // ✅ Admin logout
    }
    localStorage.removeItem("studentSession"); // ✅ Student logout
    router.push("/login");
  };

  return (
    <div className="fixed top-0 right-0 left-0 h-16 bg-white border-b border-gray-200 px-6 flex items-center justify-between z-10">
      {/* Sidebar Toggle Button */}
      <button onClick={toggleSidebar} className="text-gray-600 p-2 focus:outline-none focus:ring-2 focus:ring-gray-300">
        <Menu size={24} />
      </button>

      {/* Notifications & User Info */}
      <div className="flex items-center gap-4 relative">
        {/* Notification Button */}
        <button
          className="relative p-2 rounded-full hover:bg-gray-100"
          onClick={handleNotificationClick}
        >
          <Bell size={20} className="text-gray-600" />
          {notifications.length > 0 && (
            <span className="absolute top-0 right-0 w-3 h-3 bg-red-500 rounded-full"></span>
          )}
        </button>

        {/* Notification Dropdown */}
        {isNotifOpen && (
          <div className="absolute right-10 top-12 w-80 bg-white border border-gray-200 rounded-lg shadow-lg z-20">
            <div className="p-3 border-b bg-gray-100 font-medium">Notifications</div>
            <div className="p-3 max-h-60 overflow-y-auto">
              {loadingNotifications ? (
                <p className="text-gray-500 text-sm">Loading notifications...</p>
              ) : notifications.length === 0 ? (
                <p className="text-gray-500 text-sm">No new notifications</p>
              ) : (
                notifications.map((notif) => (
                  <div key={notif.$id} className="p-2 border-b last:border-none hover:bg-gray-100 rounded">
                    <p className="text-sm font-medium">{notif.title}</p>
                    <p className="text-xs text-gray-500">{notif.content}</p>
                    <p className="text-xs text-gray-400">{new Date(notif.$createdAt).toLocaleString()}</p>
                  </div>
                ))
              )}
            </div>
          </div>
        )}

        {/* User Info with Dropdown */}
        <div className="relative">
          <button
            onClick={() => setIsDropdownOpen(!isDropdownOpen)}
            className="flex items-center gap-3 hover:bg-gray-100 rounded-lg p-2"
          >
            <div className="text-right">
              <p className="text-sm font-medium text-gray-700">{user ? user.name : "Guest"}</p>
              <p className="text-xs text-gray-500">{isAdmin ? "Administrator" : "Student"}</p>
            </div>
            <div className="w-10 h-10 rounded-full flex items-center justify-center bg-emerald-100 text-emerald-600">
              <User size={20} />
            </div>
          </button>

          {/* User Dropdown Menu */}
          {isDropdownOpen && (
            <div className="absolute right-0 mt-2 w-48 bg-white border border-gray-200 rounded-lg shadow-lg z-20">
              <button
                onClick={handleLogout}
                className="w-full flex items-center px-4 py-3 text-sm text-gray-700 hover:bg-gray-100 gap-2"
              >
                <LogOut size={16} />
                Logout
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Navbar;

./components/AdminLayout.jsx
import React from "react";
import Link from "next/link";
import { useRouter } from "next/router";

const AdminLayout = ({ children }) => {
  const router = useRouter();

  const menuItems = [
    { name: "Dashboard", path: "/admin" },
    { name: "Manage Students", path: "/admin/students" },
    { name: "Manage Exams", path: "/admin/exams" },
    { name: "Manage Questions", path: "/admin/questions" },
    { name: "Results & Analytics", path: "/admin/results" },
    { name: "Manage Notifications", path: "/admin/notifications" },
    { name: "Settings", path: "/admin/settings" },
  ];

  return (
    <div className="flex h-screen">
      {/* Sidebar */}
      <aside className="w-64 bg-gray-800 text-white p-6">
        <h2 className="text-xl font-bold mb-6">Admin Panel</h2>
        <nav>
          {menuItems.map((item) => (
            <Link key={item.path} href={item.path} className={`block py-2 px-4 rounded ${router.pathname === item.path ? "bg-blue-500" : "hover:bg-gray-700"}`}>
              {item.name}
            </Link>
          ))}
        </nav>
      </aside>

      {/* Main Content */}
      <main className="flex-1 p-6 bg-gray-100 overflow-auto">{children}</main>
    </div>
  );
};

export default AdminLayout;

./components/StudentNavbar.jsx
import React from 'react';
import Link from 'next/link';
import { useRouter } from 'next/router';

const StudentNavbar = () => {
  const router = useRouter();

  const navLinkClass = (path) =>
    `px-3 py-2 rounded-md text-sm font-medium ${
      router.pathname.startsWith(path)
        ? 'bg-blue-100 text-blue-700'
        : 'text-gray-700 hover:bg-gray-100'
    }`;

  return (
    <nav className="bg-white shadow-sm">
      <div className="container mx-auto px-4 py-3 flex justify-between items-center">
        <Link href="/student" className="text-xl font-bold text-blue-600">
          Student Portal
        </Link>
        <div className="flex items-center space-x-4">
          <Link href="/student/exams" className={navLinkClass('/student/exams')}>
            My Exams
          </Link>
          <Link href="/student/results" className={navLinkClass('/student/results')}>
            Results
          </Link>
          <button className="px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-md text-sm font-medium">
            Logout
          </button>
        </div>
      </div>
    </nav>
  );
};

export default StudentNavbar;

./pages/student/index.jsx
import React from 'react';
import StudentLayout from '../../components/StudentLayout';
import Link from 'next/link';

const StudentDashboard = () => {
  return (
    <StudentLayout>
      <div className="container mx-auto px-4 py-6">
        <h1 className="text-2xl font-bold text-gray-800 mb-6">Student Dashboard</h1>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <Link href="/student/exams">
            <div className="p-6 bg-white border border-gray-200 rounded-lg shadow hover:shadow-md transition-shadow cursor-pointer">
              <h2 className="text-lg font-semibold text-gray-800">My Exams</h2>
              <p className="mt-2 text-gray-600">View and take your upcoming exams</p>
            </div>
          </Link>

          <Link href="/student/results">
            <div className="p-6 bg-white border border-gray-200 rounded-lg shadow hover:shadow-md transition-shadow cursor-pointer">
              <h2 className="text-lg font-semibold text-gray-800">Results</h2>
              <p className="mt-2 text-gray-600">Check your exam results</p>
            </div>
          </Link>

          <Link href="/student/profile">
            <div className="p-6 bg-white border border-gray-200 rounded-lg shadow hover:shadow-md transition-shadow cursor-pointer">
              <h2 className="text-lg font-semibold text-gray-800">Profile</h2>
              <p className="mt-2 text-gray-600">Update your profile information</p>
            </div>
          </Link>
        </div>
      </div>
    </StudentLayout>
  );
};

export default StudentDashboard;

./pages/student/results/index.jsx
import { useState, useEffect } from 'react';
import { databases, Query } from '../../../utils/appwrite';
import StudentLayout from '../../../components/StudentLayout';
import Link from 'next/link';

const ResultsListPage = () => {
  const [results, setResults] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchResults = async () => {
      try {
        const studentSession = JSON.parse(localStorage.getItem('studentSession'));
        if (!studentSession) {
          throw new Error('Student session not found');
        }

        const response = await databases.listDocuments(
          process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
          process.env.NEXT_PUBLIC_APPWRITE_RESULTS_COLLECTION_ID,
          [Query.equal('student_id', studentSession.$id)]
        );
        setResults(response.documents);
      } catch (err) {
        setError('Failed to load results');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchResults();
  }, []);

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  return (
    <StudentLayout>
      <div className="container mx-auto px-4 py-6">
        <h1 className="text-2xl font-bold text-gray-800 mb-6">My Results</h1>
        
        {loading ? (
          <div className="flex justify-center items-center h-64">
            <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
          </div>
        ) : error ? (
          <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4">
            <p>{error}</p>
          </div>
        ) : results.length === 0 ? (
          <div className="text-center py-8 text-gray-500">
            No results found
          </div>
        ) : (
          <div className="bg-white shadow overflow-hidden sm:rounded-lg">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Exam
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Score
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Submitted At
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {results.map((result) => (
                  <tr key={result.$id}>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                      {result.exam_id}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {result.score} / {result.total_marks}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {formatDate(result.submitted_at)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                      <Link
                        href={`/student/results/${result.exam_id}`}
                        className="text-blue-600 hover:text-blue-900"
                      >
                        View Details
                      </Link>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>
    </StudentLayout>
  );
};

export default ResultsListPage;
./pages/student/results/[id].jsx
import { useRouter } from 'next/router';
import { useState, useEffect } from 'react';
import { databases, Query } from '../../../utils/appwrite';
import StudentLayout from '../../../components/StudentLayout';

const ResultDetailsPage = () => {
  const router = useRouter();
  const { id } = router.query;
  const [result, setResult] = useState(null);
  const [exam, setExam] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    if (!id) return;

    const fetchResultData = async () => {
      try {
        const studentSession = JSON.parse(localStorage.getItem('studentSession'));
        if (!studentSession) {
          throw new Error('Student session not found');
        }

        const results = await databases.listDocuments(
          process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
          process.env.NEXT_PUBLIC_APPWRITE_RESULTS_COLLECTION_ID,
          [
            Query.equal('exam_id', id),
            Query.equal('student_id', studentSession.$id)
          ]
        );

        if (results.documents.length === 0) {
          throw new Error('Result not found');
        }

        const resultData = results.documents[0];
        setResult(resultData);

        const examData = await databases.getDocument(
          process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
          process.env.NEXT_PUBLIC_APPWRITE_EXAMS_COLLECTION_ID,
          id
        );
        setExam(examData);
      } catch (err) {
        setError(err.message || 'Failed to load result');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchResultData();
  }, [id]);

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  if (loading) {
    return (
      <StudentLayout>
        <div className="flex justify-center items-center h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
      </StudentLayout>
    );
  }

  if (error) {
    return (
      <StudentLayout>
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4">
          <p>{error}</p>
        </div>
      </StudentLayout>
    );
  }

  return (
    <StudentLayout>
      <div className="container mx-auto px-4 py-6">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-2xl font-bold text-gray-800">Exam Result</h1>
          <span className="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm">
            {exam?.name}
          </span>
        </div>

        <div className="bg-white rounded-lg shadow p-6 mb-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <h2 className="text-sm font-medium text-gray-500">Exam ID</h2>
              <p className="mt-1 text-gray-800">{exam?.exam_id}</p>
            </div>
            <div>
              <h2 className="text-sm font-medium text-gray-500">Score</h2>
              <p className="mt-1 text-gray-800">
                {result?.score} / {result?.total_marks} (
                {Math.round((result?.score / result?.total_marks) * 100)}%)
              </p>
            </div>
            <div>
              <h2 className="text-sm font-medium text-gray-500">Submitted At</h2>
              <p className="mt-1 text-gray-800">{formatDate(result?.submitted_at)}</p>
            </div>
          </div>
        </div>

        <h2 className="text-xl font-semibold text-gray-800 mb-4">Exam Details</h2>
        <div className="bg-white rounded-lg shadow p-6 mb-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h2 className="text-sm font-medium text-gray-500">Exam Name</h2>
              <p className="mt-1 text-gray-800">{exam?.name}</p>
            </div>
            <div>
              <h2 className="text-sm font-medium text-gray-500">Exam Date</h2>
              <p className="mt-1 text-gray-800">{formatDate(exam?.exam_date)}</p>
            </div>
            <div>
              <h2 className="text-sm font-medium text-gray-500">Duration</h2>
              <p className="mt-1 text-gray-800">{exam?.duration} minutes</p>
            </div>
            <div>
              <h2 className="text-sm font-medium text-gray-500">Description</h2>
              <p className="mt-1 text-gray-800">{exam?.description || 'No description'}</p>
            </div>
          </div>
        </div>

        <div className="mt-6">
          <h2 className="text-xl font-semibold text-gray-800 mb-4">Your Answers</h2>
          <pre className="bg-gray-50 p-4 rounded-lg overflow-x-auto">
            {JSON.stringify(JSON.parse(result?.answers || '{}'), null, 2)}
          </pre>
        </div>
      </div>
    </StudentLayout>
  );
};

export default ResultDetailsPage;
./pages/student/exams/index.jsx
import React, { useState, useEffect } from 'react';
import { databases, Query } from '../../../utils/appwrite';
import StudentLayout from '../../../components/StudentLayout';
import Link from 'next/link';

const StudentExamsPage = () => {
  const [exams, setExams] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchExams = async () => {
      try {
        const response = await databases.listDocuments(
          process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
          process.env.NEXT_PUBLIC_APPWRITE_EXAMS_COLLECTION_ID,
          [Query.equal('status', 'active')]
        );
        
        const examsWithStatus = response.documents.map(exam => ({
          ...exam,
          startTime: new Date(exam.exam_date),
          endTime: new Date(new Date(exam.exam_date).getTime() + exam.duration * 60000),
          status: getExamStatus(new Date(exam.exam_date), exam.duration)
        }));
        
        setExams(examsWithStatus);
      } catch (err) {
        setError('Failed to load exams');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchExams();
  }, []);

  const getExamStatus = (examDate, duration) => {
    const now = new Date();
    const startTime = new Date(examDate);
    const endTime = new Date(startTime.getTime() + duration * 60000);

    if (now < startTime) return 'upcoming';
    if (now >= startTime && now <= endTime) return 'ongoing';
    return 'completed';
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  return (
    <StudentLayout>
      <div className="container mx-auto px-4 py-6">
        <h1 className="text-2xl font-bold text-gray-800 mb-6">My Exams</h1>
        
        {loading ? (
          <div className="flex justify-center items-center h-64">
            <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
          </div>
        ) : error ? (
          <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4">
            <p>{error}</p>
          </div>
        ) : (
          <div className="space-y-4">
            {exams.map((exam) => (
              <div 
                key={exam.$id}
                className={`p-4 border rounded-lg ${
                  exam.status === 'ongoing' ? 'border-green-200 bg-green-50' :
                  exam.status === 'upcoming' ? 'border-blue-200 bg-blue-50' :
                  'border-gray-200 bg-gray-50'
                }`}
              >
                <div className="flex justify-between items-start">
                  <div>
                    <h2 className="text-lg font-semibold">{exam.name}</h2>
                    <p className="text-sm text-gray-600">{exam.exam_id}</p>
                  </div>
                  <span className={`px-2 py-1 rounded-full text-xs ${
                    exam.status === 'ongoing' ? 'bg-green-100 text-green-800' :
                    exam.status === 'upcoming' ? 'bg-blue-100 text-blue-800' :
                    'bg-gray-100 text-gray-800'
                  }`}>
                    {exam.status}
                  </span>
                </div>
                
                <div className="mt-2 text-sm text-gray-600">
                  <p>Date: {formatDate(exam.exam_date)}</p>
                  <p>Duration: {exam.duration} minutes</p>
                </div>
                
                <div className="mt-3 flex space-x-2">
                  <Link
                    href={`/student/exams/${exam.$id}`}
                    className="text-sm bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded"
                  >
                    View Details
                  </Link>
                  {exam.status === 'ongoing' && (
                    <Link
                      href={`/student/exams/take/${exam.$id}`}
                      className="text-sm bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded"
                    >
                      Start Exam
                    </Link>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </StudentLayout>
  );
};

export default StudentExamsPage;
./pages/student/exams/take/[id].jsx
import { useRouter } from 'next/router';
import { useState, useEffect } from 'react';
import { databases, Query, ID } from '../../../utils/appwrite';
import StudentLayout from '../../../components/StudentLayout';

const TakeExamPage = () => {
  const router = useRouter();
  const { id } = router.query;
  const [exam, setExam] = useState(null);
  const [questions, setQuestions] = useState([]);
  const [answers, setAnswers] = useState({});
  const [timeLeft, setTimeLeft] = useState(0);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [submitting, setSubmitting] = useState(false);

  useEffect(() => {
    if (!id) return;

    const fetchExamData = async () => {
      try {
        const examData = await databases.getDocument(
          process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
          process.env.NEXT_PUBLIC_APPWRITE_EXAMS_COLLECTION_ID,
          id
        );

        const examQuestions = await databases.listDocuments(
          process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
          process.env.NEXT_PUBLIC_APPWRITE_EXAM_QUESTIONS_COLLECTION_ID,
          [Query.equal('exam_id', id)]
        );

        const questionIds = examQuestions.documents.map(q => q.question_id);
        const questionsData = await databases.listDocuments(
          process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
          process.env.NEXT_PUBLIC_APPWRITE_QUESTIONS_COLLECTION_ID,
          [Query.equal('$id', questionIds)]
        );

        const questionsWithDetails = questionsData.documents.map(question => {
          const examQuestion = examQuestions.documents.find(
            eq => eq.question_id === question.$id
          );
          return {
            ...question,
            marks: examQuestion?.marks || 1,
            order: examQuestion?.order || 0
          };
        }).sort((a, b) => a.order - b.order);

        const initialAnswers = {};
        questionsWithDetails.forEach(q => {
          initialAnswers[q.$id] = null;
        });

        const endTime = new Date(examData.exam_date).getTime() + examData.duration * 60000;
        const remaining = Math.max(0, Math.floor((endTime - Date.now()) / 60000));

        setExam(examData);
        setQuestions(questionsWithDetails);
        setAnswers(initialAnswers);
        setTimeLeft(remaining);
      } catch (err) {
        setError('Failed to load exam data');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchExamData();

    const timer = setInterval(() => {
      setTimeLeft(prev => {
        if (prev <= 1) {
          clearInterval(timer);
          handleSubmit();
          return 0;
        }
        return prev - 1;
      });
    }, 60000);

    return () => clearInterval(timer);
  }, [id]);

  const handleAnswerChange = (questionId, answer) => {
    setAnswers(prev => ({
      ...prev,
      [questionId]: answer
    }));
  };

  const handleSubmit = async () => {
    if (submitting) return;
    setSubmitting(true);

    try {
      const studentSession = JSON.parse(localStorage.getItem('studentSession'));
      if (!studentSession) {
        throw new Error('Student session not found');
      }

      let score = 0;
      questions.forEach(question => {
        if (question.correct_answer === answers[question.$id]) {
          score += question.marks || 1;
        }
      });

      await databases.createDocument(
        process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
        process.env.NEXT_PUBLIC_APPWRITE_RESULTS_COLLECTION_ID,
        ID.unique(),
        {
          exam_id: id,
          student_id: studentSession.$id,
          student_name: studentSession.name,
          score,
          total_marks: questions.reduce((sum, q) => sum + (q.marks || 1), 0),
          answers: JSON.stringify(answers),
          submitted_at: new Date().toISOString()
        }
      );

      router.push(`/student/results/${id}`);
    } catch (err) {
      setError('Failed to submit exam: ' + err.message);
      console.error(err);
    } finally {
      setSubmitting(false);
    }
  };

  if (loading) {
    return (
      <StudentLayout>
        <div className="flex justify-center items-center h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
      </StudentLayout>
    );
  }

  if (error) {
    return (
      <StudentLayout>
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4">
          <p>{error}</p>
        </div>
      </StudentLayout>
    );
  }

  return (
    <StudentLayout>
      <div className="container mx-auto px-4 py-6">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-2xl font-bold text-gray-800">{exam?.name}</h1>
          <div className="bg-red-100 text-red-800 px-3 py-1 rounded-full">
            Time Left: {timeLeft} minute{timeLeft !== 1 ? 's' : ''}
          </div>
        </div>

        <div className="bg-white rounded-lg shadow p-6 mb-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h2 className="text-sm font-medium text-gray-500">Exam ID</h2>
              <p className="mt-1 text-gray-800">{exam?.exam_id}</p>
            </div>
            <div>
              <h2 className="text-sm font-medium text-gray-500">Duration</h2>
              <p className="mt-1 text-gray-800">{exam?.duration} minutes</p>
            </div>
          </div>
        </div>

        <div className="space-y-6">
          {questions.map((question, index) => (
            <div key={question.$id} className="bg-white rounded-lg shadow p-6">
              <div className="flex justify-between items-start mb-4">
                <h2 className="text-lg font-medium text-gray-800">
                  Question {index + 1} ({question.marks} mark{question.marks !== 1 ? 's' : ''})
                </h2>
                <span className={`px-2 py-1 rounded-full text-xs ${
                  question.difficulty === 'easy' ? 'bg-green-100 text-green-800' :
                  question.difficulty === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                  'bg-red-100 text-red-800'
                }`}>
                  {question.difficulty}
                </span>
              </div>

              <p className="mb-4 text-gray-800">{question.text}</p>

              {question.type === 'mcq' && question.options_text && (
                <div className="space-y-2">
                  {question.options_text.map((option, i) => (
                    <div key={i} className="flex items-center">
                      <input
                        type="radio"
                        id={`q${question.$id}-opt${i}`}
                        name={`q${question.$id}`}
                        checked={answers[question.$id] === i}
                        onChange={() => handleAnswerChange(question.$id, i)}
                        className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300"
                      />
                      <label htmlFor={`q${question.$id}-opt${i}`} className="ml-2 block text-sm text-gray-700">
                        {String.fromCharCode(65 + i)}. {option}
                      </label>
                    </div>
                  ))}
                </div>
              )}

              {question.type === 'text' && (
                <textarea
                  value={answers[question.$id] || ''}
                  onChange={(e) => handleAnswerChange(question.$id, e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  rows={4}
                  placeholder="Type your answer here..."
                />
              )}
            </div>
          ))}
        </div>

        <div className="mt-6 flex justify-end">
          <button
            onClick={handleSubmit}
            disabled={submitting}
            className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-md disabled:opacity-50"
          >
            {submitting ? 'Submitting...' : 'Submit Exam'}
          </button>
        </div>
      </div>
    </StudentLayout>
  );
};

export default TakeExamPage;
./pages/student/exams/[id].jsx
import { useRouter } from 'next/router';
import { useState, useEffect } from 'react';
import { databases, Query } from '../../../utils/appwrite';
import StudentLayout from '../../../components/StudentLayout';
import Link from 'next/link';

const ExamDetailsPage = () => {
  const router = useRouter();
  const { id } = router.query;
  const [exam, setExam] = useState(null);
  const [questions, setQuestions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    if (!id) return;

    const fetchExamData = async () => {
      try {
        const examData = await databases.getDocument(
          process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
          process.env.NEXT_PUBLIC_APPWRITE_EXAMS_COLLECTION_ID,
          id
        );
        
        const examQuestions = await databases.listDocuments(
          process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
          process.env.NEXT_PUBLIC_APPWRITE_EXAM_QUESTIONS_COLLECTION_ID,
          [Query.equal('exam_id', id)]
        );
        
        const questionIds = examQuestions.documents.map(q => q.question_id);
        const questionsData = await databases.listDocuments(
          process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
          process.env.NEXT_PUBLIC_APPWRITE_QUESTIONS_COLLECTION_ID,
          [Query.equal('$id', questionIds)]
        );

        const questionsWithMarks = questionsData.documents.map(question => {
          const examQuestion = examQuestions.documents.find(
            eq => eq.question_id === question.$id
          );
          return {
            ...question,
            marks: examQuestion?.marks || 1
          };
        });

        setExam(examData);
        setQuestions(questionsWithMarks);
      } catch (err) {
        setError('Failed to load exam data');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchExamData();
  }, [id]);

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getExamStatus = () => {
    if (!exam) return 'loading';
    const now = new Date();
    const startTime = new Date(exam.exam_date);
    const endTime = new Date(startTime.getTime() + exam.duration * 60000);

    if (now < startTime) return 'upcoming';
    if (now >= startTime && now <= endTime) return 'ongoing';
    return 'completed';
  };

  if (loading) {
    return (
      <StudentLayout>
        <div className="flex justify-center items-center h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
      </StudentLayout>
    );
  }

  if (error) {
    return (
      <StudentLayout>
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4">
          <p>{error}</p>
        </div>
      </StudentLayout>
    );
  }

  return (
    <StudentLayout>
      <div className="container mx-auto px-4 py-6">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-2xl font-bold text-gray-800">{exam?.name}</h1>
          <span className={`px-3 py-1 rounded-full text-sm ${
            getExamStatus() === 'ongoing' ? 'bg-green-100 text-green-800' :
            getExamStatus() === 'upcoming' ? 'bg-blue-100 text-blue-800' :
            'bg-gray-100 text-gray-800'
          }`}>
            {getExamStatus()}
          </span>
        </div>

        <div className="bg-white rounded-lg shadow p-6 mb-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h2 className="text-sm font-medium text-gray-500">Exam ID</h2>
              <p className="mt-1 text-gray-800">{exam?.exam_id}</p>
            </div>
            <div>
              <h2 className="text-sm font-medium text-gray-500">Date & Time</h2>
              <p className="mt-1 text-gray-800">{formatDate(exam?.exam_date)}</p>
            </div>
            <div>
              <h2 className="text-sm font-medium text-gray-500">Duration</h2>
              <p className="mt-1 text-gray-800">{exam?.duration} minutes</p>
            </div>
            <div>
              <h2 className="text-sm font-medium text-gray-500">Total Marks</h2>
              <p className="mt-1 text-gray-800">
                {questions.reduce((sum, q) => sum + (q.marks || 1), 0)}
              </p>
            </div>
          </div>

          <div className="mt-4">
            <h2 className="text-sm font-medium text-gray-500">Description</h2>
            <p className="mt-1 text-gray-800 whitespace-pre-line">
              {exam?.description || 'No description provided'}
            </p>
          </div>
        </div>

        <h2 className="text-xl font-semibold text-gray-800 mb-4">Questions Preview</h2>
        
        {questions.length > 0 ? (
          <div className="space-y-4">
            {questions.map((question, index) => (
              <div key={question.$id} className="bg-white rounded-lg shadow p-4">
                <div className="flex justify-between items-start">
                  <h3 className="font-medium text-gray-800">
                    Q{index + 1}. {question.text}
                  </h3>
                  <span className="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs">
                    {question.marks} mark{question.marks !== 1 ? 's' : ''}
                  </span>
                </div>
                {question.options_text && (
                  <div className="mt-3 grid grid-cols-1 md:grid-cols-2 gap-2">
                    {question.options_text.map((option, i) => (
                      <div 
                        key={i} 
                        className={`p-2 rounded text-sm ${
                          question.correct_answer === i 
                            ? 'bg-green-100 text-green-800' 
                            : 'bg-gray-100 text-gray-800'
                        }`}
                      >
                        {String.fromCharCode(65 + i)}. {option}
                      </div>
                    ))}
                  </div>
                )}
              </div>
            ))}
          </div>
        ) : (
          <p className="text-gray-500">No questions found for this exam</p>
        )}

        <div className="mt-6">
          {getExamStatus() === 'ongoing' ? (
            <Link
              href={`/student/exams/take/${exam.$id}`}
              className="inline-block bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded"
            >
              Start Exam Now
            </Link>
          ) : getExamStatus() === 'upcoming' ? (
            <button
              disabled
              className="inline-block bg-gray-300 text-gray-600 px-4 py-2 rounded cursor-not-allowed"
            >
              Exam starts at {formatDate(exam.exam_date)}
            </button>
          ) : (
            <button
              disabled
              className="inline-block bg-gray-300 text-gray-600 px-4 py-2 rounded cursor-not-allowed"
            >
              Exam has ended
            </button>
          )}
        </div>
      </div>
    </StudentLayout>
  );
};

export default ExamDetailsPage;
./pages/student/profile.jsx
import { useState, useEffect } from 'react';
import { account } from '../../utils/appwrite';
import StudentLayout from '../../components/StudentLayout';

const StudentProfilePage = () => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    department: '',
    studentId: ''
  });
  const [isEditing, setIsEditing] = useState(false);

  useEffect(() => {
    const fetchUser = async () => {
      try {
        const studentSession = JSON.parse(localStorage.getItem('studentSession'));
        if (!studentSession) {
          throw new Error('Student session not found');
        }

        setUser(studentSession);
        setFormData({
          name: studentSession.name || '',
          email: studentSession.email || '',
          phone: studentSession.phone || '',
          department: studentSession.department || '',
          studentId: studentSession.studentId || ''
        });
      } catch (err) {
        setError('Failed to load profile data');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchUser();
  }, []);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    
    try {
      const studentSession = JSON.parse(localStorage.getItem('studentSession'));
      if (!studentSession) {
        throw new Error('Student session not found');
      }

      // Update local session data
      const updatedSession = {
        ...studentSession,
        name: formData.name,
        phone: formData.phone,
        department: formData.department,
        studentId: formData.studentId
      };

      localStorage.setItem('studentSession', JSON.stringify(updatedSession));
      setUser(updatedSession);

      setSuccess('Profile updated successfully!');
      setIsEditing(false);
    } catch (err) {
      setError(err.message || 'Failed to update profile');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  if (loading && !user) {
    return (
      <StudentLayout>
        <div className="flex justify-center items-center h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
      </StudentLayout>
    );
  }

  return (
    <StudentLayout>
      <div className="container mx-auto px-4 py-6">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-2xl font-bold text-gray-800">My Profile</h1>
          {!isEditing && (
            <button
              onClick={() => setIsEditing(true)}
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
            >
              Edit Profile
            </button>
          )}
        </div>

        {error && (
          <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4">
            <p>{error}</p>
          </div>
        )}

        {success && (
          <div className="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-4">
            <p>{success}</p>
          </div>
        )}

        {isEditing ? (
          <form onSubmit={handleSubmit} className="bg-white shadow rounded-lg p-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-1">
                  Full Name
                </label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  value={formData.name}
                  onChange={handleInputChange}
                  required
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                />
              </div>

              <div>
                <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
                  Email
                </label>
                <input
                  type="email"
                  id="email"
                  name="email"
                  value={formData.email}
                  disabled
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm bg-gray-100 cursor-not-allowed"
                />
              </div>

              <div>
                <label htmlFor="studentId" className="block text-sm font-medium text-gray-700 mb-1">
                  Student ID
                </label>
                <input
                  type="text"
                  id="studentId"
                  name="studentId"
                  value={formData.studentId}
                  onChange={handleInputChange}
                  required
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                />
              </div>

              <div>
                <label htmlFor="department" className="block text-sm font-medium text-gray-700 mb-1">
                  Department
                </label>
                <select
                  id="department"
                  name="department"
                  value={formData.department}
                  onChange={handleInputChange}
                  required
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="">Select Department</option>
                  <option value="Computer Science">Computer Science</option>
                  <option value="Electrical Engineering">Electrical Engineering</option>
                  <option value="Mechanical Engineering">Mechanical Engineering</option>
                  <option value="Business Administration">Business Administration</option>
                </select>
              </div>

              <div>
                <label htmlFor="phone" className="block text-sm font-medium text-gray-700 mb-1">
                  Phone Number
                </label>
                <input
                  type="tel"
                  id="phone"
                  name="phone"
                  value={formData.phone}
                  onChange={handleInputChange}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
            </div>

            <div className="mt-6 flex justify-end space-x-3">
              <button
                type="button"
                onClick={() => {
                  setIsEditing(false);
                  setError(null);
                  setSuccess(null);
                }}
                className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300"
              >
                Cancel
              </button>
              <button
                type="submit"
                disabled={loading}
                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50"
              >
                {loading ? 'Saving...' : 'Save Changes'}
              </button>
            </div>
          </form>
        ) : (
          <div className="bg-white shadow rounded-lg p-6">
            <div className="flex items-center space-x-4 mb-6">
              <div className="w-20 h-20 rounded-full bg-blue-100 flex items-center justify-center text-blue-600 text-2xl font-bold">
                {user?.name?.charAt(0)?.toUpperCase() || 'U'}
              </div>
              <div>
                <h2 className="text-xl font-semibold">{user?.name}</h2>
                <p className="text-gray-600">{user?.email}</p>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h3 className="text-sm font-medium text-gray-500">Student ID</h3>
                <p className="mt-1 text-gray-800">{formData.studentId || 'Not set'}</p>
              </div>

              <div>
                <h3 className="text-sm font-medium text-gray-500">Department</h3>
                <p className="mt-1 text-gray-800">{formData.department || 'Not set'}</p>
              </div>

              <div>
                <h3 className="text-sm font-medium text-gray-500">Phone Number</h3>
                <p className="mt-1 text-gray-800">{formData.phone || 'Not set'}</p>
              </div>

              <div>
                <h3 className="text-sm font-medium text-gray-500">Account Created</h3>
                <p className="mt-1 text-gray-800">
                  {new Date(user?.$createdAt).toLocaleDateString()}
                </p>
              </div>
            </div>
          </div>
        )}
      </div>
    </StudentLayout>
  );
};

export default StudentProfilePage;
./pages/admin/index.jsx
import React, { useEffect, useState } from "react";
import AdminLayout from "../../components/AdminLayout";
import { databases, account } from "../../utils/appwrite";
import { BarChart, Users, FileText, CheckCircle, ClipboardList } from "lucide-react";
import Link from "next/link";

const Dashboard = () => {
  const [stats, setStats] = useState({
    students: 0,
    exams: 0,
    questions: 0,
    attempts: "N/A", // Removed attempts count
    passPercentage: "N/A" // Removed pass percentage
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [upcomingExams, setUpcomingExams] = useState([]);
  const [recentActivity, setRecentActivity] = useState([]);

  useEffect(() => {
    fetchDashboardData();
  }, []);

  const fetchDashboardData = async () => {
    setLoading(true);
    setError(null);
    
    try {
      // Verify user is authenticated
      const user = await account.get();
      if (!user) {
        throw new Error("You must be logged in to view this dashboard");
      }

      // Fetch only the collections we have access to
      const [studentsData, examsData, questionsData] = await Promise.all([
        databases.listDocuments(
          process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
          process.env.NEXT_PUBLIC_APPWRITE_STUDENTS_COLLECTION_ID
        ),
        databases.listDocuments(
          process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
          process.env.NEXT_PUBLIC_APPWRITE_EXAMS_COLLECTION_ID
        ),
        databases.listDocuments(
          process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
          process.env.NEXT_PUBLIC_APPWRITE_QUESTIONS_COLLECTION_ID
        )
      ]);

      // Filter upcoming exams
      const now = new Date();
      const upcoming = examsData.documents
        .filter(exam => new Date(exam.exam_date) > now)
        .sort((a, b) => new Date(a.exam_date) - new Date(b.exam_date))
        .slice(0, 5);

      // Mock recent activity since we don't have exam_attempts
      const recentActivity = [
        { 
          message: `${studentsData.total} students registered`, 
          time: new Date().toLocaleString() 
        },
        { 
          message: `${examsData.total} exams created`, 
          time: new Date().toLocaleString() 
        },
        { 
          message: `${questionsData.total} questions available`, 
          time: new Date().toLocaleString() 
        }
      ];

      setStats({
        students: studentsData.total,
        exams: examsData.total,
        questions: questionsData.total,
        attempts: "N/A",
        passPercentage: "N/A"
      });

      setUpcomingExams(upcoming);
      setRecentActivity(recentActivity);
    } catch (error) {
      console.error("Error fetching dashboard data:", error);
      setError(error.message || "Failed to load dashboard data. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <AdminLayout>
        <div className="flex justify-center items-center h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
      </AdminLayout>
    );
  }

  if (error) {
    return (
      <AdminLayout>
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6">
          <p>{error}</p>
          <button 
            onClick={fetchDashboardData}
            className="mt-2 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
          >
            Retry
          </button>
        </div>
      </AdminLayout>
    );
  }

  return (
    <AdminLayout>
      <h2 className="text-2xl font-bold mb-6">Admin Dashboard</h2>

      {/* Overview Cards - Updated to show only available data */}
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6 mb-6">
        <DashboardCard 
          icon={<Users size={28} />} 
          title="Total Students" 
          value={stats.students} 
          link="/admin/students"
        />
        <DashboardCard 
          icon={<FileText size={28} />} 
          title="Total Exams" 
          value={stats.exams} 
          link="/admin/exams"
        />
        <DashboardCard 
          icon={<ClipboardList size={28} />} 
          title="Total Questions" 
          value={stats.questions} 
          link="/admin/questions"
        />
      </div>

      {/* Upcoming Exams */}
      <div className="bg-white shadow-md rounded-lg p-6 mb-6">
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-lg font-semibold">📅 Upcoming Exams</h3>
          <Link href="/admin/exams" className="text-blue-600 hover:underline">
            View All
          </Link>
        </div>
        {upcomingExams.length > 0 ? (
          <div className="space-y-3">
            {upcomingExams.map((exam) => (
              <div key={exam.$id} className="border-b pb-3 last:border-b-0">
                <div className="flex justify-between items-center">
                  <h4 className="font-medium">{exam.name}</h4>
                  <span className="text-sm text-gray-500">
                    {new Date(exam.exam_date).toLocaleDateString()}
                  </span>
                </div>
                <p className="text-sm text-gray-600 mt-1">
                  Duration: {exam.duration} minutes | Status: {exam.status}
                </p>
              </div>
            ))}
          </div>
        ) : (
          <p className="text-gray-500">No upcoming exams scheduled.</p>
        )}
      </div>

      {/* Recent Activity - Now showing summary stats */}
      <div className="bg-white shadow-md rounded-lg p-6">
        <h3 className="text-lg font-semibold mb-4">📊 System Summary</h3>
        {recentActivity.map((log, index) => (
          <div key={index} className="flex items-start mb-3 last:mb-0">
            <div className="bg-blue-100 p-2 rounded-full mr-3">
              <svg className="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 5l7 7-7 7M5 5l7 7-7 7"></path>
              </svg>
            </div>
            <div>
              <p className="text-gray-700">{log.message}</p>
              <p className="text-sm text-gray-500">{log.time}</p>
            </div>
          </div>
        ))}
      </div>
    </AdminLayout>
  );
};

const DashboardCard = ({ icon, title, value, link }) => {
  const content = (
    <div className={`bg-white shadow-md rounded-lg p-4 flex items-center space-x-4 h-full ${link ? 'hover:shadow-lg transition-shadow' : ''}`}>
      <div className="text-blue-500">{icon}</div>
      <div>
        <h4 className="text-lg font-semibold">{title}</h4>
        <p className="text-gray-700">{value}</p>
      </div>
    </div>
  );

  return link ? (
    <Link href={link} className="block h-full">
      {content}
    </Link>
  ) : (
    content
  );
};

export default Dashboard;
./pages/admin/questions.jsx
import React, { useState, useEffect, useRef, useCallback } from "react";
import AdminLayout from "../../components/AdminLayout";
import { databases, storage, ID } from "../../utils/appwrite";

const BUCKET_ID = "questions";

const QuestionsPage = () => {
  const [questions, setQuestions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [editingQuestion, setEditingQuestion] = useState(null);
  const [modalOpen, setModalOpen] = useState(false);
  const [viewModalOpen, setViewModalOpen] = useState(false);
  const [viewingQuestion, setViewingQuestion] = useState(null);
  const modalRef = useRef(null);
  const viewModalRef = useRef(null);

  const initialFormData = {
    question_id: "",
    text: "",
    image_id: "",
    options_text: ["", "", "", ""],
    options_image: ["", "", "", ""],
    correct_answer: 0,
    difficulty: "",
    tags: "",
    created_by: "",
  };

  const [formData, setFormData] = useState(initialFormData);

  // Memoized fetch function
  const fetchQuestions = useCallback(async () => {
    setLoading(true);
    try {
      const response = await databases.listDocuments(
        process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
        process.env.NEXT_PUBLIC_APPWRITE_QUESTIONS_COLLECTION_ID
      );

      const updatedQuestions = await Promise.all(
        response.documents.map(async (q) => ({
          ...q,
          imageUrl: q.image_id ? await getFileUrl(q.image_id) : null,
          optionsImageUrls: await Promise.all(
            q.options_image.map(async (imgId) => 
              imgId ? await getFileUrl(imgId) : null
            )
          )
        }))
      );

      setQuestions(updatedQuestions);
    } catch (error) {
      console.error("Error fetching questions:", error.message);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchQuestions();
  }, [fetchQuestions]);

  const getFileUrl = async (fileId) => {
    try {
      return storage.getFileView(BUCKET_ID, fileId);
    } catch (error) {
      console.error("Error fetching image:", error.message);
      return null;
    }
  };

  const handleInputChange = (e, field, index = null) => {
    if (index !== null) {
      setFormData((prev) => ({
        ...prev,
        options_text: prev.options_text.map((opt, i) => 
          i === index ? e.target.value : opt
        )
      }));
    } else {
      setFormData({ ...formData, [field]: e.target.value });
    }
  };

  const handleImageUpload = async (file, field, index = null) => {
    if (!file) return;
    try {
      const uploadResponse = await storage.createFile(BUCKET_ID, ID.unique(), file);
      const fileId = uploadResponse.$id;

      setFormData(prev => ({
        ...prev,
        ...(field === "image_id" 
          ? { image_id: fileId }
          : {
              options_image: prev.options_image.map((img, i) => 
                i === index ? fileId : img
              )
            }
        )
      }));
    } catch (error) {
      console.error("Image upload error:", error.message);
    }
  };

  const validateForm = () => {
    if (!formData.question_id || !formData.created_by) {
      alert("Please provide Question ID and Created By field.");
      return false;
    }
    if (!formData.text && !formData.image_id) {
      alert("Please provide either a question text or an image.");
      return false;
    }
    return true;
  };

  const handleSave = async () => {
    if (!validateForm()) return;

    try {
      const questionData = {
        question_id: formData.question_id,
        text: formData.text,
        image_id: formData.image_id,
        options_text: formData.options_text,
        options_image: formData.options_image,
        correct_answer: formData.correct_answer,
        difficulty: formData.difficulty,
        tags: formData.tags ? formData.tags.split(",").map(tag => tag.trim()) : [],
        created_by: formData.created_by,
      };

      if (editingQuestion) {
        await databases.updateDocument(
          process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
          process.env.NEXT_PUBLIC_APPWRITE_QUESTIONS_COLLECTION_ID,
          editingQuestion.$id,
          questionData
        );
      } else {
        await databases.createDocument(
          process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
          process.env.NEXT_PUBLIC_APPWRITE_QUESTIONS_COLLECTION_ID,
          ID.unique(),
          questionData
        );
      }

      closeModal();
      fetchQuestions();
    } catch (error) {
      console.error("Error saving question:", error.message);
      alert(`Error: ${error.message}`);
    }
  };

  const handleDelete = async (id) => {
    if (!confirm("Are you sure you want to delete this question?")) return;

    try {
      await databases.deleteDocument(
        process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
        process.env.NEXT_PUBLIC_APPWRITE_QUESTIONS_COLLECTION_ID,
        id
      );
      fetchQuestions();
    } catch (error) {
      console.error("Error deleting question:", error.message);
    }
  };

  const handleEdit = (question) => {
    setEditingQuestion(question);
    setFormData({
      question_id: question.question_id,
      text: question.text || "",
      image_id: question.image_id || "",
      options_text: question.options_text || ["", "", "", ""],
      options_image: question.options_image || ["", "", "", ""],
      correct_answer: question.correct_answer || 0,
      difficulty: question.difficulty || "",
      tags: question.tags ? question.tags.join(", ") : "",
      created_by: question.created_by || "",
    });
    setModalOpen(true);
  };

  const handleView = (question) => {
    setViewingQuestion(question);
    setViewModalOpen(true);
  };

  const closeModal = () => {
    setModalOpen(false);
    setEditingQuestion(null);
    setFormData(initialFormData);
  };

  const closeViewModal = () => {
    setViewModalOpen(false);
    setViewingQuestion(null);
  };

  // Handle outside click for both modals
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (modalRef.current && !modalRef.current.contains(event.target)) {
        closeModal();
      }
      if (viewModalRef.current && !viewModalRef.current.contains(event.target)) {
        closeViewModal();
      }
    };

    if (modalOpen || viewModalOpen) {
      document.addEventListener("mousedown", handleClickOutside);
    }
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [modalOpen, viewModalOpen]);

  // Action buttons component
  const ActionButtons = ({ question }) => (
    <div className="flex items-center gap-2">
      <button
        className="bg-gray-500 text-white p-1 rounded hover:bg-gray-600 transition-colors"
        onClick={() => handleView(question)}
        title="View"
        aria-label="View question"
      >
        <EyeIcon />
      </button>
      <button
        className="bg-yellow-500 text-white p-1 rounded hover:bg-yellow-600 transition-colors"
        onClick={() => handleEdit(question)}
        title="Edit"
        aria-label="Edit question"
      >
        <EditIcon />
      </button>
      <button
        className="bg-red-500 text-white p-1 rounded hover:bg-red-600 transition-colors"
        onClick={() => handleDelete(question.$id)}
        title="Delete"
        aria-label="Delete question"
      >
        <DeleteIcon />
      </button>
    </div>
  );

  // Icon components
  const EyeIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
    </svg>
  );

  const EditIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
    </svg>
  );

  const DeleteIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
    </svg>
  );

  return (
    <AdminLayout>
      <div className="container mx-auto px-4 py-6">
        <h2 className="text-2xl font-bold mb-6">Manage Questions</h2>
        
        <button
          className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded mb-6 transition-colors"
          onClick={() => setModalOpen(true)}
        >
          + Add Question
        </button>

        {loading ? (
          <div className="flex justify-center items-center h-64">
            <p className="text-lg">Loading questions...</p>
          </div>
        ) : (
          <div className="overflow-x-auto bg-white rounded-lg shadow">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Text</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Image</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Difficulty</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {questions.map((q) => (
                  <tr key={q.$id} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{q.question_id}</td>
                    <td className="px-6 py-4 whitespace-normal text-sm text-gray-500 max-w-xs truncate">{q.text || "N/A"}</td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {q.imageUrl ? (
                        <img src={q.imageUrl} alt="Question" className="h-12 object-contain" />
                      ) : (
                        <span className="text-sm text-gray-400">No Image</span>
                      )}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{q.difficulty || "N/A"}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      <ActionButtons question={q} />
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}

        {/* Add/Edit Question Modal */}
        {modalOpen && (
          <div className="fixed inset-0 flex items-center justify-center bg-gray-900 bg-opacity-50 z-50">
            <div
              ref={modalRef}
              className="bg-white p-6 rounded-lg shadow-xl w-[1200px] max-h-[90vh] overflow-y-auto"
            >
              <h3 className="text-xl font-semibold mb-4">
                {editingQuestion ? "Edit Question" : "Add Question"}
              </h3>

              <div className="grid grid-cols-2 gap-4 mb-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Question ID</label>
                  <input
                    className="w-full border rounded px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
                    value={formData.question_id}
                    onChange={(e) => handleInputChange(e, "question_id")}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Created By</label>
                  <input
                    className="w-full border rounded px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
                    value={formData.created_by}
                    onChange={(e) => handleInputChange(e, "created_by")}
                  />
                </div>
              </div>

              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-1">Question Text</label>
                <textarea
                  className="w-full border rounded px-3 py-2 h-32 focus:ring-blue-500 focus:border-blue-500"
                  value={formData.text}
                  onChange={(e) => handleInputChange(e, "text")}
                />
              </div>

              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-1">Question Image</label>
                <input
                  type="file"
                  className="block w-full text-sm text-gray-500
                    file:mr-4 file:py-2 file:px-4
                    file:rounded-md file:border-0
                    file:text-sm file:font-semibold
                    file:bg-blue-50 file:text-blue-700
                    hover:file:bg-blue-100"
                  onChange={(e) => handleImageUpload(e.target.files[0], "image_id")}
                />
              </div>

              <div className="grid grid-cols-2 gap-4 mb-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Difficulty</label>
                  <input
                    className="w-full border rounded px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
                    placeholder="easy, medium, hard"
                    value={formData.difficulty}
                    onChange={(e) => handleInputChange(e, "difficulty")}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Tags</label>
                  <input
                    className="w-full border rounded px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
                    placeholder="comma separated"
                    value={formData.tags}
                    onChange={(e) => handleInputChange(e, "tags")}
                  />
                </div>
              </div>

              <h4 className="text-lg font-medium mb-3">Options:</h4>
              <div className="space-y-4">
                {formData.options_text.map((option, index) => (
                  <div key={index} className="flex items-start gap-4 p-3 border rounded-lg">
                    <div className="flex-1">
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Option {index + 1}
                      </label>
                      <textarea
                        className="w-full border rounded px-3 py-2 h-20 focus:ring-blue-500 focus:border-blue-500"
                        value={option}
                        onChange={(e) => handleInputChange(e, "options_text", index)}
                      />
                      <div className="mt-2">
                        <label className="inline-flex items-center">
                          <input
                            type="radio"
                            name="correct_answer"
                            className="h-4 w-4 text-blue-600 focus:ring-blue-500"
                            checked={formData.correct_answer === index}
                            onChange={() =>
                              setFormData({ ...formData, correct_answer: index })
                            }
                          />
                          <span className="ml-2 text-sm text-gray-700">Correct Answer</span>
                        </label>
                      </div>
                    </div>
                    <div className="w-48">
                      <label className="block text-sm font-medium text-gray-700 mb-1">Option Image</label>
                      <input
                        type="file"
                        className="block w-full text-sm text-gray-500
                          file:mr-2 file:py-1 file:px-2
                          file:rounded file:border-0
                          file:text-xs file:font-semibold
                          file:bg-blue-50 file:text-blue-700
                          hover:file:bg-blue-100"
                        onChange={(e) =>
                          handleImageUpload(e.target.files[0], "options_image", index)
                        }
                      />
                    </div>
                  </div>
                ))}
              </div>

              <div className="flex justify-end gap-3 mt-6">
                <button
                  className="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400 transition-colors"
                  onClick={closeModal}
                >
                  Cancel
                </button>
                <button
                  className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors"
                  onClick={handleSave}
                >
                  {editingQuestion ? "Update" : "Save"}
                </button>
              </div>
            </div>
          </div>
        )}

        {/* View Question Modal */}
        {viewModalOpen && viewingQuestion && (
          <div className="fixed inset-0 flex items-center justify-center bg-gray-900 bg-opacity-50 z-50">
            <div
              ref={viewModalRef}
              className="bg-white p-8 rounded-lg shadow-xl w-[90%] max-w-6xl max-h-[90vh] overflow-y-auto"
            >
              <div className="flex justify-between items-start mb-6">
                <h3 className="text-2xl font-bold text-gray-800">Question Details</h3>
                <button
                  onClick={closeViewModal}
                  className="text-gray-500 hover:text-gray-700"
                  aria-label="Close"
                >
                  <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                <div className="space-y-6">
                  <div>
                    <h4 className="text-sm font-medium text-gray-500">Question ID</h4>
                    <p className="mt-1 text-lg font-semibold">{viewingQuestion.question_id}</p>
                  </div>
                  
                  <div>
                    <h4 className="text-sm font-medium text-gray-500">Created By</h4>
                    <p className="mt-1 text-lg">{viewingQuestion.created_by || "N/A"}</p>
                  </div>
                  
                  <div>
                    <h4 className="text-sm font-medium text-gray-500">Difficulty</h4>
                    <p className="mt-1 text-lg capitalize">{viewingQuestion.difficulty || "N/A"}</p>
                  </div>
                  
                  <div>
                    <h4 className="text-sm font-medium text-gray-500">Tags</h4>
                    <div className="mt-1 flex flex-wrap gap-2">
                      {viewingQuestion.tags?.length ? (
                        viewingQuestion.tags.map((tag, i) => (
                          <span key={i} className="px-2 py-1 bg-blue-100 text-blue-800 text-sm rounded-full">
                            {tag}
                          </span>
                        ))
                      ) : (
                        <p className="text-gray-400">No tags</p>
                      )}
                    </div>
                  </div>
                </div>
                
                <div className="space-y-6">
                  <div>
                    <h4 className="text-sm font-medium text-gray-500">Question</h4>
                    {viewingQuestion.text && (
                      <p className="mt-1 text-lg bg-gray-50 p-3 rounded">{viewingQuestion.text}</p>
                    )}
                    {viewingQuestion.imageUrl && (
                      <div className="mt-3">
                        <img 
                          src={viewingQuestion.imageUrl} 
                          alt="Question" 
                          className="max-h-80 w-full object-contain border rounded-lg"
                        />
                      </div>
                    )}
                  </div>
                </div>
              </div>
              
              <div className="mt-8">
                <h4 className="text-lg font-medium text-gray-700 mb-4">Options</h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {viewingQuestion.options_text.map((option, index) => (
                    <div 
                      key={index} 
                      className={`p-4 rounded-lg border-2 ${viewingQuestion.correct_answer === index 
                        ? 'border-green-500 bg-green-50' 
                        : 'border-gray-200'}`}
                    >
                      <div className="flex items-start gap-4">
                        <div className="flex-1">
                          <div className="flex items-center justify-between">
                            <h5 className="font-medium">Option {index + 1}</h5>
                            {viewingQuestion.correct_answer === index && (
                              <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                Correct Answer
                              </span>
                            )}
                          </div>
                          <p className="mt-1 text-gray-700">{option || "N/A"}</p>
                        </div>
                        {viewingQuestion.optionsImageUrls[index] && (
                          <div className="flex-shrink-0 w-32 h-32">
                            <img 
                              src={viewingQuestion.optionsImageUrls[index]} 
                              alt={`Option ${index + 1}`} 
                              className="w-full h-full object-contain"
                            />
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              <div className="flex justify-end mt-8">
                <button
                  className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                  onClick={closeViewModal}
                >
                  Close
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </AdminLayout>
  );
};

export default QuestionsPage;
./pages/admin/settings.jsx
import React, { useState, useEffect } from "react";
import AdminLayout from "../../components/AdminLayout";
import { account, databases } from "../../utils/appwrite";

const SettingsPage = () => {
  const [admin, setAdmin] = useState({ name: "", email: "" });
  const [password, setPassword] = useState({ oldPassword: "", newPassword: "", confirmPassword: "" });
  const [preferences, setPreferences] = useState({ notifications: true });
  const [apiKey, setApiKey] = useState("");

  useEffect(() => {
    fetchAdminDetails();
  }, []);

  const fetchAdminDetails = async () => {
    try {
      const user = await account.get();
      setAdmin({ name: user.name, email: user.email });

      const settings = await databases.getDocument(
        process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
        process.env.NEXT_PUBLIC_APPWRITE_SETTINGS_COLLECTION_ID,
        "system_preferences"
      );
      setPreferences(settings.preferences || { notifications: true });
    } catch (error) {
      console.error("Error fetching admin details:", error.message);
    }
  };

  const handleProfileUpdate = async () => {
    try {
      await account.updateName(admin.name);
      alert("Profile updated successfully!");
    } catch (error) {
      console.error("Error updating profile:", error.message);
    }
  };

  const handlePasswordUpdate = async () => {
    if (password.newPassword !== password.confirmPassword) {
      alert("Passwords do not match!");
      return;
    }

    try {
      await account.updatePassword(password.newPassword, password.oldPassword);
      alert("Password updated successfully!");
      setPassword({ oldPassword: "", newPassword: "", confirmPassword: "" });
    } catch (error) {
      console.error("Error updating password:", error.message);
    }
  };

  const handlePreferencesUpdate = async () => {
    try {
      await databases.updateDocument(
        process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
        process.env.NEXT_PUBLIC_APPWRITE_SETTINGS_COLLECTION_ID,
        "system_preferences",
        { preferences }
      );
      alert("Preferences updated!");
    } catch (error) {
      console.error("Error updating preferences:", error.message);
    }
  };

  return (
    <AdminLayout>
      <h2 className="text-2xl font-bold mb-4">⚙️ Admin Settings</h2>

      {/* Profile Settings */}
      <div className="bg-white shadow-md rounded-lg p-6 mb-6">
        <h3 className="text-lg font-semibold mb-3">👤 Profile Settings</h3>
        <input
          type="text"
          value={admin.name}
          onChange={(e) => setAdmin({ ...admin, name: e.target.value })}
          placeholder="Admin Name"
          className="w-full px-4 py-2 border border-gray-300 rounded mb-2"
        />
        <input
          type="email"
          value={admin.email}
          disabled
          className="w-full px-4 py-2 border border-gray-300 rounded mb-2 bg-gray-100"
        />
        <button className="bg-blue-500 text-white px-4 py-2 rounded" onClick={handleProfileUpdate}>
          Save Profile
        </button>
      </div>

      {/* Change Password */}
      <div className="bg-white shadow-md rounded-lg p-6 mb-6">
        <h3 className="text-lg font-semibold mb-3">🔒 Change Password</h3>
        <input
          type="password"
          placeholder="Old Password"
          value={password.oldPassword}
          onChange={(e) => setPassword({ ...password, oldPassword: e.target.value })}
          className="w-full px-4 py-2 border border-gray-300 rounded mb-2"
        />
        <input
          type="password"
          placeholder="New Password"
          value={password.newPassword}
          onChange={(e) => setPassword({ ...password, newPassword: e.target.value })}
          className="w-full px-4 py-2 border border-gray-300 rounded mb-2"
        />
        <input
          type="password"
          placeholder="Confirm New Password"
          value={password.confirmPassword}
          onChange={(e) => setPassword({ ...password, confirmPassword: e.target.value })}
          className="w-full px-4 py-2 border border-gray-300 rounded mb-2"
        />
        <button className="bg-green-500 text-white px-4 py-2 rounded" onClick={handlePasswordUpdate}>
          Update Password
        </button>
      </div>

      {/* System Preferences */}
      <div className="bg-white shadow-md rounded-lg p-6 mb-6">
        <h3 className="text-lg font-semibold mb-3">⚙️ System Preferences</h3>
        <label className="flex items-center gap-2">
          <input
            type="checkbox"
            checked={preferences.notifications}
            onChange={(e) => setPreferences({ ...preferences, notifications: e.target.checked })}
          />
          Enable Notifications
        </label>
        <button className="bg-blue-500 text-white px-4 py-2 rounded mt-4" onClick={handlePreferencesUpdate}>
          Save Preferences
        </button>
      </div>

      {/* API Key Management */}
      <div className="bg-white shadow-md rounded-lg p-6">
        <h3 className="text-lg font-semibold mb-3">🔑 API Key Management</h3>
        <input
          type="password"
          placeholder="Enter API Key"
          value={apiKey}
          onChange={(e) => setApiKey(e.target.value)}
          className="w-full px-4 py-2 border border-gray-300 rounded mb-2"
        />
        <button className="bg-red-500 text-white px-4 py-2 rounded">Update API Key</button>
      </div>
    </AdminLayout>
  );
};

export default SettingsPage;

./pages/admin/create.jsx
import React, { useState } from "react";
import { useRouter } from "next/router"; // Use Next.js router
import { Upload, Clock, Users, FileText, Plus, X, Edit, Trash } from "lucide-react";

const Create = () => {
  const router = useRouter(); // Initialize Next.js router

  // State for form inputs
  const [examTitle, setExamTitle] = useState("");
  const [courseCode, setCourseCode] = useState("");
  const [examDate, setExamDate] = useState("");
  const [examTime, setExamTime] = useState("");
  const [duration, setDuration] = useState("");
  const [restrictToAppliedStudents, setRestrictToAppliedStudents] = useState(false);
  const [csvFile, setCsvFile] = useState(null);
  const [manualQuestions, setManualQuestions] = useState([]);
  const [newQuestion, setNewQuestion] = useState("");
  const [newOptions, setNewOptions] = useState(["", "", "", ""]);
  const [correctAnswer, setCorrectAnswer] = useState("");
  const [error, setError] = useState("");
  const [inputMethod, setInputMethod] = useState("csv"); // Track input method
  const [editingIndex, setEditingIndex] = useState(null); // Track which question is being edited

  // Handle CSV file upload
  const handleFileUpload = (e) => {
    const file = e.target.files?.[0];
    if (file && file.type === "text/csv") {
      setCsvFile(file);
      setError("");
    } else {
      setError("Please upload a valid CSV file.");
    }
  };

  // Handle adding or updating a manual MCQ
  const addOrUpdateManualQuestion = () => {
    if (newQuestion.trim() && newOptions.every(option => option.trim())) {
      const newMCQ = {
        question: newQuestion.trim(),
        options: newOptions.map(option => option.trim()),
        correctAnswer: correctAnswer.trim()
      };

      if (editingIndex !== null) {
        const updatedQuestions = [...manualQuestions];
        updatedQuestions[editingIndex] = newMCQ;
        setManualQuestions(updatedQuestions);
        setEditingIndex(null);
      } else {
        setManualQuestions([...manualQuestions, newMCQ]);
      }

      setNewQuestion("");
      setNewOptions(["", "", "", ""]);
      setCorrectAnswer("");
    } else {
      setError("Please fill out all fields for the question.");
    }
  };

  // Handle editing a question
  const handleEditQuestion = (index) => {
    const question = manualQuestions[index];
    setNewQuestion(question.question);
    setNewOptions(question.options);
    setCorrectAnswer(question.correctAnswer);
    setEditingIndex(index);
  };

  // Handle deleting a question
  const handleDeleteQuestion = (index) => {
    setManualQuestions(manualQuestions.filter((_, i) => i !== index));
  };

  // Handle form submission
  const handleSubmit = (e) => {
    e.preventDefault();

    if (!examTitle || !courseCode || !examDate || !examTime || !duration) {
      setError("Please fill out all fields.");
      return;
    }

    if (inputMethod === "csv" && !csvFile) {
      setError("Please upload a CSV file.");
      return;
    }

    if (inputMethod === "manual" && manualQuestions.length === 0) {
      setError("Please add at least one question.");
      return;
    }

    if (inputMethod === "csv" && csvFile) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const text = e.target?.result;
        const questions = text.split("\n").map(line => line.trim());
        console.log("Parsed Questions from CSV:", questions);
      };
      reader.readAsText(csvFile);
    } else if (inputMethod === "manual") {
      console.log("Manual Questions:", manualQuestions);
    }

    setExamTitle("");
    setCourseCode("");
    setExamDate("");
    setExamTime("");
    setDuration("");
    setCsvFile(null);
    setManualQuestions([]);
    setError("");
    router.push("/exams"); // Navigate to the exams page after submission
  };

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold text-gray-800 mb-6">Create Exam</h1>

      <form onSubmit={handleSubmit} className="bg-white rounded-xl shadow-sm p-6 border border-gray-200">
        {/* Exam Title */}
        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-700 mb-2">Exam Title</label>
          <input
            type="text"
            value={examTitle}
            onChange={(e) => setExamTitle(e.target.value)}
            className="w-full p-3 border border-gray-300 rounded-lg"
            placeholder="Enter the exam title"
          />
        </div>

        {/* Course Code */}
        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-700 mb-2">Course Code</label>
          <input
            type="text"
            value={courseCode}
            onChange={(e) => setCourseCode(e.target.value)}
            className="w-full p-3 border border-gray-300 rounded-lg"
            placeholder="Enter the course code"
          />
        </div>

        {/* Exam Date */}
        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-700 mb-2">Exam Date</label>
          <input
            type="date"
            value={examDate}
            onChange={(e) => setExamDate(e.target.value)}
            className="w-full p-3 border border-gray-300 rounded-lg"
          />
        </div>

        {/* Exam Time */}
        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-700 mb-2">Exam Time</label>
          <input
            type="time"
            value={examTime}
            onChange={(e) => setExamTime(e.target.value)}
            className="w-full p-3 border border-gray-300 rounded-lg"
          />
        </div>

        {/* Duration */}
        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-700 mb-2">Duration (hours)</label>
          <input
            type="number"
            value={duration}
            onChange={(e) => setDuration(e.target.value)}
            className="w-full p-3 border border-gray-300 rounded-lg"
          />
        </div>

        {/* Input Method (CSV or Manual) */}
        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-700 mb-2">Input Method</label>
          <select
            className="w-full p-3 border border-gray-300 rounded-lg"
            value={inputMethod}
            onChange={(e) => setInputMethod(e.target.value)}
          >
            <option value="csv">CSV Upload</option>
            <option value="manual">Manual Input</option>
          </select>
        </div>

        {/* CSV File Upload */}
        {inputMethod === "csv" && (
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-2">Upload CSV File</label>
            <input
              type="file"
              accept=".csv"
              onChange={handleFileUpload}
              className="w-full p-3 border border-gray-300 rounded-lg"
            />
            {error && <p className="text-red-500 text-sm mt-2">{error}</p>}
          </div>
        )}

        {/* Manual Questions */}
        {inputMethod === "manual" && (
          <div className="mb-6">
            <h3 className="text-xl font-bold text-gray-800 mb-4">Add Questions</h3>
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-2">Question</label>
              <input
                type="text"
                value={newQuestion}
                onChange={(e) => setNewQuestion(e.target.value)}
                className="w-full p-3 border border-gray-300 rounded-lg"
                placeholder="Enter the question"
              />
            </div>

            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-2">Options</label>
              {newOptions.map((option, index) => (
                <input
                  key={index}
                  type="text"
                  value={option}
                  onChange={(e) => {
                    const updatedOptions = [...newOptions];
                    updatedOptions[index] = e.target.value;
                    setNewOptions(updatedOptions);
                  }}
                  className="w-full p-3 border border-gray-300 rounded-lg mb-2"
                  placeholder={`Option ${index + 1}`}
                />
              ))}
            </div>

            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-2">Correct Answer</label>
              <input
                type="text"
                value={correctAnswer}
                onChange={(e) => setCorrectAnswer(e.target.value)}
                className="w-full p-3 border border-gray-300 rounded-lg"
                placeholder="Enter the correct answer"
              />
            </div>

            <button
              type="button"
              onClick={addOrUpdateManualQuestion}
              className="w-full p-3 bg-blue-500 text-white rounded-lg mt-4"
            >
              {editingIndex !== null ? "Update Question" : "Add Question"}
            </button>

            <div className="mt-6">
              {manualQuestions.length > 0 && (
                <ul>
                  {manualQuestions.map((question, index) => (
                    <li key={index} className="mb-4 flex items-center justify-between">
                      <div>
                        <h4 className="font-medium">{question.question}</h4>
                        <ul className="text-sm text-gray-600">
                          {question.options.map((option, idx) => (
                            <li key={idx}>{option}</li>
                          ))}
                        </ul>
                      </div>
                      <div>
                        <button
                          onClick={() => handleEditQuestion(index)}
                          className="text-blue-500 mr-2"
                        >
                          <Edit size={16} />
                        </button>
                        <button
                          onClick={() => handleDeleteQuestion(index)}
                          className="text-red-500"
                        >
                          <Trash size={16} />
                        </button>
                      </div>
                    </li>
                  ))}
                </ul>
              )}
            </div>
          </div>
        )}

        {/* Submit Button */}
        <button
          type="submit"
          className="w-full p-3 bg-blue-500 text-white rounded-lg"
        >
          Create Exam
        </button>
      </form>
    </div>
  );
};

export default Create;

./pages/admin/dashboard.jsx.old.delete.it
import React, { useEffect, useState } from "react";
import AdminLayout from "../../components/AdminLayout";
import { databases } from "../../utils/appwrite";
import { BarChart, Users, FileText, CheckCircle, ClipboardList } from "lucide-react";
import Link from "next/link";

const Dashboard = () => {
  const [stats, setStats] = useState({
    students: 0,
    exams: 0,
    questions: 0,
    attempts: 0,
    passPercentage: 0,
  });

  const [upcomingExams, setUpcomingExams] = useState([]);
  const [recentActivity, setRecentActivity] = useState([]);

  useEffect(() => {
    fetchDashboardData();
  }, []);

  const fetchDashboardData = async () => {
    try {
      // Fetch total students
      const studentsData = await databases.listDocuments(
        process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
        process.env.NEXT_PUBLIC_APPWRITE_STUDENTS_COLLECTION_ID
      );

      // Fetch total exams
      const examsData = await databases.listDocuments(
        process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
        process.env.NEXT_PUBLIC_APPWRITE_EXAMS_COLLECTION_ID
      );

      // Fetch total questions
      const questionsData = await databases.listDocuments(
        process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
        process.env.NEXT_PUBLIC_APPWRITE_QUESTIONS_COLLECTION_ID
      );

      // Fetch total exam attempts
      const attemptsData = await databases.listDocuments(
        process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
        process.env.NEXT_PUBLIC_APPWRITE_ATTEMPTS_COLLECTION_ID
      );

      // Fetch upcoming exams
      const upcoming = examsData.documents.filter(
        (exam) => new Date(exam.scheduledDate) > new Date()
      );

      // Fetch recent activity (mocked for now)
      const activityLogs = [
        { message: "Admin added a new student", time: "2 hours ago" },
        { message: "Exam 'Networking Basics' was created", time: "1 day ago" },
        { message: "5 new questions added to 'DBMS'", time: "3 days ago" },
      ];

      // Calculate pass percentage
      const passedExams = attemptsData.documents.filter(
        (attempt) => attempt.score >= attempt.passingMarks
      );
      const passPercentage =
        attemptsData.documents.length > 0
          ? (passedExams.length / attemptsData.documents.length) * 100
          : 0;

      setStats({
        students: studentsData.total,
        exams: examsData.total,
        questions: questionsData.total,
        attempts: attemptsData.total,
        passPercentage: passPercentage.toFixed(2),
      });

      setUpcomingExams(upcoming);
      setRecentActivity(activityLogs);
    } catch (error) {
      console.error("Error fetching dashboard data:", error);
    }
  };

  return (
    <AdminLayout>
      <h2 className="text-2xl font-bold mb-6">Admin Dashboard</h2>

      {/* Overview Cards */}
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-6 mb-6">
        <DashboardCard icon={<Users size={28} />} title="Total Students" value={stats.students} />
        <DashboardCard icon={<FileText size={28} />} title="Total Exams" value={stats.exams} />
        <DashboardCard icon={<ClipboardList size={28} />} title="Total Questions" value={stats.questions} />
        <DashboardCard icon={<CheckCircle size={28} />} title="Total Attempts" value={stats.attempts} />
        <DashboardCard icon={<BarChart size={28} />} title="Pass %" value={`${stats.passPercentage}%`} />
      </div>

      {/* Upcoming Exams */}
      <div className="bg-white shadow-md rounded-lg p-6 mb-6">
        <h3 className="text-lg font-semibold mb-3">📅 Upcoming Exams</h3>
        {upcomingExams.length > 0 ? (
          <ul>
            {upcomingExams.map((exam) => (
              <li key={exam.$id} className="mb-2">
                {exam.name} - {new Date(exam.scheduledDate).toLocaleDateString()}
              </li>
            ))}
          </ul>
        ) : (
          <p className="text-gray-500">No upcoming exams.</p>
        )}
      </div>

      {/* Recent Activity */}
      <div className="bg-white shadow-md rounded-lg p-6">
        <h3 className="text-lg font-semibold mb-3">🛠 Recent Activity</h3>
        {recentActivity.map((log, index) => (
          <p key={index} className="text-gray-700 mb-1">
            {log.message} - <span className="text-gray-500">{log.time}</span>
          </p>
        ))}
      </div>
    </AdminLayout>
  );
};

const DashboardCard = ({ icon, title, value }) => {
  return (
    <div className="bg-white shadow-md rounded-lg p-4 flex items-center space-x-4">
      <div className="text-blue-500">{icon}</div>
      <div>
        <h4 className="text-lg font-semibold">{title}</h4>
        <p className="text-gray-700">{value}</p>
      </div>
    </div>
  );
};

export default Dashboard;

./pages/admin/total-students.jsx
"use client";

import { useState } from "react";

const studentsData = [
  { name: "Virat Kohli", rollNo: "018", phone: "123-456-7890", course: "DSA" },
  { name: "MS Dhoni", rollNo: "007", phone: "987-654-3210", course: "OS" },
  { name: "Jasprit Bumrah", rollNo: "093", phone: "555-123-4567", course: "NLP" },
  { name: "Rohit Sharma", rollNo: "045", phone: "999-888-7777", course: "ADS" },
];

const TotalStudents = () => {
  const [search, setSearch] = useState("");
  const [filter, setFilter] = useState("All");

  const filteredStudents = studentsData.filter(
    (student) =>
      (filter === "All" || student.course === filter) &&
      student.name.toLowerCase().includes(search.toLowerCase())
  );

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold text-gray-800 mb-6">Total Students</h1>

      {/* Search & Filter */}
      <div className="flex gap-4 mb-6">
        <input
          type="text"
          placeholder="Search by name..."
          className="w-1/2 p-3 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          value={search}
          onChange={(e) => setSearch(e.target.value)}
        />
        <select
          className="w-1/2 p-3 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          value={filter}
          onChange={(e) => setFilter(e.target.value)}
        >
          <option value="All">All Courses</option>
          <option value="DSA">DSA</option>
          <option value="OS">OS</option>
          <option value="NLP">NLP</option>
          <option value="ADS">ADS</option>
        </select>
      </div>

      {/* Student List */}
      <div className="bg-white p-6 rounded-md shadow-md">
        <table className="w-full border-collapse">
          <thead>
            <tr className="border-b">
              <th className="p-3 text-left text-gray-600">Name</th>
              <th className="p-3 text-left text-gray-600">Roll No.</th>
              <th className="p-3 text-left text-gray-600">Phone</th>
              <th className="p-3 text-left text-gray-600">Course</th>
            </tr>
          </thead>
          <tbody>
            {filteredStudents.length > 0 ? (
              filteredStudents.map((student, index) => (
                <tr key={index} className="border-b hover:bg-gray-50">
                  <td className="p-3">{student.name}</td>
                  <td className="p-3">{student.rollNo}</td>
                  <td className="p-3">{student.phone}</td>
                  <td className="p-3">{student.course}</td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan={4} className="p-3 text-center text-gray-500">
                  No students found.
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default TotalStudents;

./pages/admin/manage-notifications.jsx
"use client";

import { useState } from "react";
import { Bell, Info, AlertCircle, CheckCircle, XCircle, Plus, Edit } from "lucide-react";
import { motion } from "framer-motion";
import { useRouter } from "next/router"; // Import useRouter from next/router

const initialNotifications = [
  { id: 1, type: "info", title: "New Exam Schedule", message: "Mathematics final exam has been scheduled for next week.", time: "2 hours ago" },
  { id: 2, type: "warning", title: "System Maintenance", message: "The system will be under maintenance on Sunday, 2 AM - 4 AM.", time: "1 day ago" },
  { id: 3, type: "success", title: "Results Published", message: "Physics mid-term exam results have been published.", time: "2 days ago" },
  { id: 4, type: "error", title: "Payment Failed", message: "Your exam registration payment was unsuccessful.", time: "3 days ago" },
];

const ManageNotifications = () => {
  const [notifications, setNotifications] = useState(initialNotifications);
  const [isEditing, setIsEditing] = useState(false);
  const [currentNotification, setCurrentNotification] = useState(null);

  const router = useRouter(); // Initialize router

  const icons = {
    info: <Info className="text-blue-500" size={20} />,
    warning: <AlertCircle className="text-amber-500" size={20} />,
    success: <CheckCircle className="text-emerald-500" size={20} />,
    error: <XCircle className="text-red-500" size={20} />,
  };

  const badgeColors = {
    info: "bg-blue-100 text-blue-600",
    warning: "bg-amber-100 text-amber-600",
    success: "bg-emerald-100 text-emerald-600",
    error: "bg-red-100 text-red-600",
  };

  const markAllAsRead = () => setNotifications([]);

  const removeNotification = (id) => setNotifications((prev) => prev.filter((n) => n.id !== id));

  const addNotification = () => {
    setIsEditing(true);
    setCurrentNotification({ id: notifications.length + 1, type: "info", title: "", message: "", time: "Just now" });
  };

  const editNotification = (notification) => {
    setIsEditing(true);
    setCurrentNotification(notification);
  };

  const saveNotification = () => {
    setNotifications((prev) =>
      currentNotification.id > prev.length
        ? [currentNotification, ...prev]
        : prev.map((n) => (n.id === currentNotification.id ? currentNotification : n))
    );
    setIsEditing(false);
    setCurrentNotification(null);
  };

  return (
    <div className="p-6">
      <motion.div
        className="flex justify-between items-center mb-6"
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.3 }}
      >
        <h1 className="text-2xl font-bold text-gray-800">Manage Notifications</h1>
        <div className="flex gap-4">
          <motion.button
            className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center gap-2"
            onClick={addNotification}
            whileHover={{ scale: 1.05 }}
          >
            <Plus size={20} />
            Add Notification
          </motion.button>
          <motion.button
            className="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 flex items-center gap-2"
            onClick={markAllAsRead}
            whileHover={{ scale: 1.05 }}
          >
            <Bell size={20} />
            Mark All as Read
          </motion.button>
        </div>
      </motion.div>

      {/* Notification List */}
      <div className="space-y-4">
        {notifications.map((notification) => (
          <motion.div
            key={notification.id}
            className="p-4 bg-white rounded-lg shadow-sm flex items-start gap-4"
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3 }}
          >
            <div className={`p-2 rounded-full ${badgeColors[notification.type]}`}>
              {icons[notification.type]}
            </div>
            <div className="flex-1">
              <h3 className="font-semibold text-gray-800">{notification.title}</h3>
              <p className="text-sm text-gray-600">{notification.message}</p>
              <p className="text-xs text-gray-400 mt-1">{notification.time}</p>
            </div>
            <button
              className="text-gray-500 hover:text-gray-700"
              onClick={() => editNotification(notification)}
            >
              <Edit size={16} />
            </button>
            <button
              className="text-gray-500 hover:text-red-500"
              onClick={() => removeNotification(notification.id)}
            >
              <XCircle size={16} />
            </button>
          </motion.div>
        ))}
      </div>

      {/* Edit Modal */}
      {isEditing && (
        <motion.div className="fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center p-4">
          <motion.div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-lg">
            <h2 className="text-xl font-bold mb-4">Edit Notification</h2>
            <div className="space-y-4">
              <input
                type="text"
                name="title"
                placeholder="Title"
                className="w-full p-2 border border-gray-300 rounded-md"
                value={currentNotification?.title}
                onChange={(e) => setCurrentNotification({ ...currentNotification, title: e.target.value })}
              />
              <textarea
                name="message"
                placeholder="Message"
                className="w-full p-2 border border-gray-300 rounded-md"
                value={currentNotification?.message}
                onChange={(e) => setCurrentNotification({ ...currentNotification, message: e.target.value })}
              />
              {/* Dropdown for notification type */}
              <div>
                <label className="block text-sm font-medium text-gray-700">Notification Type</label>
                <select
                  className="w-full p-2 border border-gray-300 rounded-md"
                  value={currentNotification?.type}
                  onChange={(e) => setCurrentNotification({ ...currentNotification, type: e.target.value })}
                >
                  <option value="info">Info</option>
                  <option value="warning">Warning</option>
                  <option value="success">Success</option>
                  <option value="error">Error</option>
                </select>
              </div>
              <div className="flex justify-end gap-3">
                <button
                  onClick={() => setIsEditing(false)}
                  className="bg-gray-500 text-white px-4 py-2 rounded-md"
                >
                  Cancel
                </button>
                <button
                  onClick={saveNotification}
                  className="bg-blue-600 text-white px-4 py-2 rounded-md"
                >
                  Save
                </button>
              </div>
            </div>
          </motion.div>
        </motion.div>
      )}
    </div>
  );
};

export default ManageNotifications;

./pages/admin/students.jsx
import React, { useEffect, useState } from "react";
import AdminLayout from "../../components/AdminLayout";
import Modal from "../../components/Modal";
import { databases, account } from "../../utils/appwrite";
import { Plus, Edit, Trash2 } from "lucide-react";

const Students = () => {
  const [students, setStudents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showModal, setShowModal] = useState(false);
  const [selectedStudent, setSelectedStudent] = useState(null);
  const [user, setUser] = useState(null);

  useEffect(() => {
    fetchStudents();
    getUser();
  }, []);

  // Fetch current logged-in user
  const getUser = async () => {
    try {
      const loggedInUser = await account.get();
      setUser(loggedInUser);
    } catch (error) {
      console.error("Error fetching user:", error);
    }
  };

  // Fetch students from Appwrite
  const fetchStudents = async () => {
    try {
      const response = await databases.listDocuments(
        process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
        process.env.NEXT_PUBLIC_APPWRITE_STUDENTS_COLLECTION_ID
      );

      const filteredStudents = response.documents.map((student) => ({
        id: student.$id,
        name: student.name,
        email: student.email,
        password: student.password,
        student_id: student.student_id,
        status: student.status,
        registered_by: student.registered_by || "Unknown",
        registered_date: student.$createdAt
          ? new Date(student.$createdAt).toLocaleDateString()
          : "Not Available",
      }));

      setStudents(filteredStudents);
    } catch (error) {
      console.error("Error fetching students:", error);
    } finally {
      setLoading(false);
    }
  };

  // Add new student
  const handleAddStudent = async (studentData) => {
    if (!user) return alert("You must be logged in to add students.");

    try {
      await databases.createDocument(
        process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
        process.env.NEXT_PUBLIC_APPWRITE_STUDENTS_COLLECTION_ID,
        "unique()",
        {
          ...studentData,
          registered_by: user.name, // Automatically set registered_by
        }
      );
      setShowModal(false);
      fetchStudents();
    } catch (error) {
      console.error("Error adding student:", error);
    }
  };

  // Edit student details
  const handleEditStudent = async (updatedStudent) => {
    try {
      const { registered_date, id, ...studentData } = updatedStudent; // Remove registered_date before update

      await databases.updateDocument(
        process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
        process.env.NEXT_PUBLIC_APPWRITE_STUDENTS_COLLECTION_ID,
        id,
        studentData
      );

      setShowModal(false);
      fetchStudents();
    } catch (error) {
      console.error("Error updating student:", error);
    }
  };

  // Delete student
  const handleDeleteStudent = async (studentId) => {
    if (!user || user.labels !== "admin") {
      alert("You do not have permission to delete students.");
      return;
    }

    if (!confirm("Are you sure you want to delete this student?")) return;
    try {
      await databases.deleteDocument(
        process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
        process.env.NEXT_PUBLIC_APPWRITE_STUDENTS_COLLECTION_ID,
        studentId
      );
      fetchStudents();
    } catch (error) {
      console.error("Error deleting student:", error);
    }
  };

  return (
    <AdminLayout>
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold">Manage Students</h2>
        <button
          onClick={() => {
            setSelectedStudent(null);
            setShowModal(true);
          }}
          className="bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center gap-2"
        >
          <Plus size={18} /> Add Student
        </button>
      </div>

      {loading ? (
        <p>Loading students...</p>
      ) : (
        <div className="overflow-x-auto">
          <table className="w-full border-collapse border border-gray-200">
            <thead>
              <tr className="bg-gray-100">
                <th className="border border-gray-300 px-4 py-2">Name</th>
                <th className="border border-gray-300 px-4 py-2">Email ID</th>
                <th className="border border-gray-300 px-4 py-2">Password</th>
                <th className="border border-gray-300 px-4 py-2">Student ID</th>
                <th className="border border-gray-300 px-4 py-2">Status</th>
                <th className="border border-gray-300 px-4 py-2">Registered By</th>
                <th className="border border-gray-300 px-4 py-2">Registered Date</th>
                <th className="border border-gray-300 px-4 py-2">Actions</th>
              </tr>
            </thead>
            <tbody>
              {students.map((student) => (
                <tr key={student.id} className="text-center">
                  <td className="border border-gray-300 px-4 py-2">{student.name}</td>
                  <td className="border border-gray-300 px-4 py-2">{student.email}</td>
                  <td className="border border-gray-300 px-4 py-2">{student.password}</td>
                  <td className="border border-gray-300 px-4 py-2">{student.student_id}</td>
                  <td className="border border-gray-300 px-4 py-2">{student.status}</td>
                  <td className="border border-gray-300 px-4 py-2">{student.registered_by}</td>
                  <td className="border border-gray-300 px-4 py-2">{student.registered_date}</td>
                  <td className="border border-gray-300 px-4 py-2 flex justify-center gap-2">
                    {/* Edit Button */}
                    <button
                      className="text-yellow-500 hover:text-yellow-700"
                      onClick={() => {
                        setSelectedStudent(student);
                        setShowModal(true);
                      }}
                    >
                      <Edit size={18} />
                    </button>

                    {/* Delete Button */}
                    <button
                      className="text-red-500 hover:text-red-700"
                      onClick={() => handleDeleteStudent(student.id)}
                    >
                      <Trash2 size={18} />
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      {showModal && (
        <Modal
          title={selectedStudent ? "Edit Student" : "Add Student"}
          onClose={() => setShowModal(false)}
          onSave={selectedStudent ? handleEditStudent : handleAddStudent}
          initialData={selectedStudent || { status: "active" }}
          fields={[
            { name: "name", label: "Full Name", type: "text" },
            { name: "email", label: "Email ID", type: "email" },
            { name: "password", label: "Password", type: "password" },
            { name: "student_id", label: "Student ID", type: "text" },
            { name: "status", label: "Status", type: "select", options: ["active", "inactive"] },
          ]}
        />
      )}
    </AdminLayout>
  );
};

export default Students;

./pages/admin/support.jsx
import React, { useState } from "react";
import { MessageCircle, Search, Send } from "lucide-react";

const conversations = [
  {
    id: 1,
    student: "Virat Kohli",
    avatar: "https://images.unsplash.com/photo-1535713875002-d1d0cf377fde?auto=format&fit=crop&q=80&w=100",
    lastMessage: "I need help with accessing my exam results",
    time: "2 min ago",
    unread: true,
  },
  {
    id: 2,
    student: "Anushka Sharma",
    avatar: "https://images.unsplash.com/photo-1520813792240-56fc4a3765a7?auto=format&fit=crop&q=80&w=100",
    lastMessage: "How can I reschedule my exam?",
    time: "10 min ago",
    unread: false,
  },
  {
    id: 3,
    student: "Rohit Sharma",
    avatar: "https://images.unsplash.com/photo-1564564321837-a57b7070ac4f?auto=format&fit=crop&q=80&w=100",
    lastMessage: "I'm facing issues with my login",
    time: "30 min ago",
    unread: false,
  },
];

const Support = () => {
  const [selectedConversation, setSelectedConversation] = useState(conversations[0]);

  return (
    <div className="flex h-[calc(100vh-4rem)]">
      {/* Conversations List */}
      <div className="w-80 border-r border-gray-200 bg-white">
        <div className="p-4">
          {/* Search Bar */}
          <div className="relative mb-4">
            <Search className="absolute left-3 top-2.5 text-gray-400" size={20} />
            <input
              type="text"
              placeholder="Search conversations..."
              className="w-full pl-10 pr-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>

          {/* Conversations */}
          <div className="space-y-2">
            {conversations.map((conversation) => (
              <button
                key={conversation.id}
                onClick={() => setSelectedConversation(conversation)}
                className={`w-full p-3 flex items-center gap-3 rounded-lg transition-colors text-left ${
                  selectedConversation?.id === conversation.id ? "bg-blue-50" : "hover:bg-gray-50"
                }`}
              >
                <img
                  src={conversation.avatar}
                  alt={conversation.student}
                  className="w-10 h-10 rounded-full object-cover"
                />
                <div className="flex-1 min-w-0">
                  <div className="flex items-center justify-between">
                    <h3 className="font-medium text-gray-900 truncate">{conversation.student}</h3>
                    <span className="text-xs text-gray-500">{conversation.time}</span>
                  </div>
                  <p className="text-sm text-gray-500 truncate">{conversation.lastMessage}</p>
                </div>
                {conversation.unread && <div className="w-2 h-2 bg-blue-600 rounded-full"></div>}
              </button>
            ))}
          </div>
        </div>
      </div>

      {/* Chat Area */}
      <div className="flex-1 flex flex-col bg-gray-50">
        {selectedConversation ? (
          <>
            {/* Chat Header */}
            <div className="p-4 bg-white border-b border-gray-200 flex items-center gap-3">
              <img
                src={selectedConversation.avatar}
                alt={selectedConversation.student}
                className="w-10 h-10 rounded-full object-cover"
              />
              <div>
                <h2 className="font-medium text-gray-900">{selectedConversation.student}</h2>
                <p className="text-sm text-gray-500">Online</p>
              </div>
            </div>

            {/* Messages */}
            <div className="flex-1 p-4 overflow-y-auto">
              <p className="text-gray-500 text-center">Chat history will appear here...</p>
            </div>

            {/* Message Input */}
            <div className="p-4 bg-white border-t border-gray-200">
              <div className="flex items-center gap-4">
                <input
                  type="text"
                  placeholder="Type your message..."
                  className="flex-1 px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
                <button className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                  <Send size={18} />
                </button>
              </div>
            </div>
          </>
        ) : (
          <div className="flex items-center justify-center flex-1 text-gray-500">
            Select a conversation to start chatting
          </div>
        )}
      </div>
    </div>
  );
};

export default Support;

./pages/admin/responses.jsx
import React, { useEffect, useState } from "react";
import AdminLayout from "@/components/AdminLayout";
import { databases } from "@/utils/appwrite";
import { Query } from "appwrite";

const ResponsesPage = () => {
  const [responses, setResponses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const DATABASE_ID = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;
  const RESPONSES_COLLECTION_ID = process.env.NEXT_PUBLIC_APPWRITE_RESPONSES_COLLECTION_ID;

  useEffect(() => {
    fetchResponses();
  }, []);

  const fetchResponses = async () => {
    try {
      setLoading(true);
      const res = await databases.listDocuments(
        DATABASE_ID,
        RESPONSES_COLLECTION_ID,
        [Query.orderDesc("$createdAt")]
      );
      setResponses(res.documents);
    } catch (err) {
      console.error("Failed to fetch responses:", err);
      setError("You are not authorized to access responses or something went wrong.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <AdminLayout>
      <div className="p-6">
        <h1 className="text-2xl font-bold mb-6">📄 Student Responses</h1>

        {loading ? (
          <div className="flex justify-center items-center h-32">
            <div className="animate-spin h-8 w-8 border-4 border-blue-500 border-t-transparent rounded-full"></div>
          </div>
        ) : error ? (
          <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6">
            <p>{error}</p>
            <button
              onClick={fetchResponses}
              className="mt-2 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
            >
              Retry
            </button>
          </div>
        ) : responses.length === 0 ? (
          <p className="text-gray-500">No responses found.</p>
        ) : (
          <div className="overflow-x-auto bg-white shadow-md rounded-lg p-4">
            <table className="min-w-full text-sm text-left border border-gray-200">
              <thead className="bg-gray-100">
                <tr>
                  <th className="p-2 border">Response ID</th>
                  <th className="p-2 border">Student ID</th>
                  <th className="p-2 border">Exam ID</th>
                  <th className="p-2 border">Question ID</th>
                  <th className="p-2 border">Selected Option</th>
                  <th className="p-2 border">Created At</th>
                </tr>
              </thead>
              <tbody>
                {responses.map((res) => (
                  <tr key={res.$id} className="hover:bg-gray-50">
                    <td className="p-2 border">{res.response_id}</td>
                    <td className="p-2 border">{res.student_id || "N/A"}</td>
                    <td className="p-2 border">{res.exam_id || "N/A"}</td>
                    <td className="p-2 border">{res.question_id || "N/A"}</td>
                    <td className="p-2 border">{res.selected_option}</td>
                    <td className="p-2 border">{new Date(res.$createdAt).toLocaleString()}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>
    </AdminLayout>
  );
};

export default ResponsesPage;

./pages/admin/results.jsx
import React, { useState, useEffect } from "react";
import AdminLayout from "../../components/AdminLayout";
import Table from "../../components/Table";
import { databases } from "../../utils/appwrite";
import Papa from "papaparse";

let saveAs;
try {
  saveAs = require("file-saver").saveAs;
} catch (error) {
  console.error("⚠️ Warning: file-saver module is missing!", error);
}

const ResultsPage = () => {
  const [results, setResults] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [filter, setFilter] = useState("All");
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    fetchResults();
  }, []);

  const fetchResults = async () => {
    setLoading(true);
    setError(null); // Reset previous errors
    try {
      const response = await databases.listDocuments(
        process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
        process.env.NEXT_PUBLIC_APPWRITE_RESULTS_COLLECTION_ID
      );
      setResults(response.documents);
    } catch (error) {
      console.error("❌ Error fetching results:", error);
      setError("Failed to fetch exam results. Please try again later.");
    }
    setLoading(false);
  };

  const filteredResults = results.filter((result) => {
    const matchesSearch =
      result.studentName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      result.examName.toLowerCase().includes(searchTerm.toLowerCase());

    const matchesFilter =
      filter === "All" ||
      (filter === "Pass" && result.status === "Pass") ||
      (filter === "Fail" && result.status === "Fail");

    return matchesSearch && matchesFilter;
  });

  const exportToCSV = () => {
    if (!saveAs) {
      alert("⚠️ Export feature is unavailable! Please ensure 'file-saver' is installed.");
      return;
    }

    try {
      const csvData = Papa.unparse(filteredResults);
      const blob = new Blob([csvData], { type: "text/csv;charset=utf-8;" });
      saveAs(blob, "exam_results.csv");
    } catch (error) {
      console.error("❌ Error exporting CSV:", error);
      alert("Failed to export results. Please try again.");
    }
  };

  return (
    <AdminLayout>
      <h2 className="text-2xl font-bold mb-4">📊 Student Exam Results</h2>

      <div className="flex gap-4 mb-4">
        <input
          type="text"
          placeholder="🔍 Search by Student or Exam Name..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="border px-4 py-2 rounded w-1/3"
        />

        <select
          value={filter}
          onChange={(e) => setFilter(e.target.value)}
          className="border px-4 py-2 rounded"
        >
          <option value="All">📌 Show All</option>
          <option value="Pass">✅ Passed</option>
          <option value="Fail">❌ Failed</option>
        </select>

        <button className="bg-blue-500 text-white px-4 py-2 rounded" onClick={exportToCSV}>
          📥 Export CSV
        </button>
      </div>

      {error && <p className="text-red-500">{error}</p>}
      {loading ? (
        <p>Loading results...</p>
      ) : (
        <Table
          data={filteredResults.map((result) => ({
            "Student": result.studentName,
            "Exam": result.examName,
            "Score": `${result.score}/${result.totalMarks}`,
            "Status": result.status === "Pass" ? "✅ Pass" : "❌ Fail",
          }))}
        />
      )}
    </AdminLayout>
  );
};

export default ResultsPage;

./pages/admin/notifications.jsx
import React, { useState, useEffect } from "react";
import AdminLayout from "../../components/AdminLayout";
import Table from "../../components/Table";
import Modal from "../../components/Modal";
import { databases } from "../../utils/appwrite";
import { ID } from "appwrite";

const NotificationsPage = () => {
  const [notifications, setNotifications] = useState([]);
  const [modalOpen, setModalOpen] = useState(false);
  const [editingNotification, setEditingNotification] = useState(null);
  const [message, setMessage] = useState("");
  const [scheduleDate, setScheduleDate] = useState("");
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchNotifications();
  }, []);

  const fetchNotifications = async () => {
    setLoading(true);
    try {
      const response = await databases.listDocuments(
        process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
        process.env.NEXT_PUBLIC_APPWRITE_NOTIFICATIONS_COLLECTION_ID
      );
      setNotifications(response.documents);
    } catch (error) {
      console.error("Error fetching notifications:", error.message);
    }
    setLoading(false);
  };

  const handleSave = async () => {
    if (!message.trim()) {
      alert("Notification message cannot be empty.");
      return;
    }

    try {
      if (editingNotification) {
        await databases.updateDocument(
          process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
          process.env.NEXT_PUBLIC_APPWRITE_NOTIFICATIONS_COLLECTION_ID,
          editingNotification.$id,
          { message, scheduleDate: scheduleDate || null }
        );
      } else {
        await databases.createDocument(
          process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
          process.env.NEXT_PUBLIC_APPWRITE_NOTIFICATIONS_COLLECTION_ID,
          ID.unique(),
          { message, scheduleDate: scheduleDate || null, status: "Scheduled" }
        );
      }

      setModalOpen(false);
      setEditingNotification(null);
      setMessage("");
      setScheduleDate("");
      fetchNotifications();
    } catch (error) {
      console.error("Error saving notification:", error.message);
    }
  };

  const handleEdit = (notification) => {
    setEditingNotification(notification);
    setMessage(notification.message);
    setScheduleDate(notification.scheduleDate || "");
    setModalOpen(true);
  };

  const handleDelete = async (id) => {
    if (!confirm("Are you sure you want to delete this notification?")) return;
    
    try {
      await databases.deleteDocument(
        process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
        process.env.NEXT_PUBLIC_APPWRITE_NOTIFICATIONS_COLLECTION_ID,
        id
      );
      fetchNotifications();
    } catch (error) {
      console.error("Error deleting notification:", error.message);
    }
  };

  return (
    <AdminLayout>
      <h2 className="text-2xl font-bold mb-4">📢 Manage Notifications</h2>

      <button className="bg-blue-500 text-white px-4 py-2 rounded mb-4" onClick={() => setModalOpen(true)}>
        ➕ Add Notification
      </button>

      {loading ? (
        <p>Loading notifications...</p>
      ) : (
        <Table
          data={notifications.map((n) => ({
            Message: n.message,
            "Scheduled Date": n.scheduleDate ? new Date(n.scheduleDate).toLocaleString() : "Immediate",
            Status: n.status,
            Actions: (
              <div className="flex gap-2">
                <button className="text-blue-500" onClick={() => handleEdit(n)}>✏️ Edit</button>
                <button className="text-red-500" onClick={() => handleDelete(n.$id)}>🗑️ Delete</button>
              </div>
            ),
          }))}
        />
      )}

      {modalOpen && (
        <Modal
          title={editingNotification ? "Edit Notification" : "Create Notification"}
          onClose={() => {
            setModalOpen(false);
            setEditingNotification(null);
            setMessage("");
            setScheduleDate("");
          }}
          onSave={handleSave}
        >
          <label className="block mb-1 font-semibold">Message</label>
          <textarea
            placeholder="Notification message..."
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            className="w-full px-4 py-2 border border-gray-300 rounded mb-4"
          />
          
          <label className="block mb-1 font-semibold">📅 Schedule Notification (Optional)</label>
          <input
            type="datetime-local"
            value={scheduleDate}
            onChange={(e) => setScheduleDate(e.target.value)}
            className="w-full px-4 py-2 border border-gray-300 rounded"
          />
        </Modal>
      )}
    </AdminLayout>
  );
};

export default NotificationsPage;

./pages/admin/exams.jsx
import React, { useState, useEffect, useCallback } from "react";
import AdminLayout from "../../components/AdminLayout";
import Modal from "../../components/Modal";
import { databases, ID, Query, Permission, Role } from "../../utils/appwrite";
import { account } from "../../utils/appwrite";

const ExamsPage = () => {
  // State declarations remain the same
  const [exams, setExams] = useState([]);
  const [filteredExams, setFilteredExams] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isQuestionModalOpen, setIsQuestionModalOpen] = useState(false);
  const [isViewQuestionsModalOpen, setIsViewQuestionsModalOpen] = useState(false);
  const [selectedExam, setSelectedExam] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [selectedExamDetail, setSelectedExamDetail] = useState(null);
  const [questions, setQuestions] = useState([]);
  const [filteredQuestions, setFilteredQuestions] = useState([]);
  const [selectedQuestions, setSelectedQuestions] = useState([]);
  const [questionMarks, setQuestionMarks] = useState({});
  const [searchTerm, setSearchTerm] = useState("");
  const [difficultyFilter, setDifficultyFilter] = useState("all");
  const [tagFilter, setTagFilter] = useState("all");
  const [availableTags, setAvailableTags] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const questionsPerPage = 10;

  const initialFormData = {
    exam_id: "",
    name: "",
    description: "",
    exam_date: "",
    duration: "",
    status: "active",
  };

  const [formData, setFormData] = useState(initialFormData);

  // Environment variables
  const databaseId = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;
  const examsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_EXAMS_COLLECTION_ID;
  const questionsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_QUESTIONS_COLLECTION_ID;
  const examQuestionsCollectionId = process.env.NEXT_PUBLIC_APPWRITE_EXAM_QUESTIONS_COLLECTION_ID;

  // Fetch exams
  const fetchExams = useCallback(async () => {
    setIsLoading(true);
    try {
      const response = await databases.listDocuments(databaseId, examsCollectionId);
      const examsWithDates = response.documents.map(exam => ({
        ...exam,
        exam_date_obj: new Date(exam.exam_date)
      }));
      
      const sortedExams = examsWithDates.sort((a, b) => {
        const now = new Date();
        const aIsExpired = a.exam_date_obj < now;
        const bIsExpired = b.exam_date_obj < now;
        
        if (aIsExpired && !bIsExpired) return 1;
        if (!aIsExpired && bIsExpired) return -1;
        return a.exam_date_obj - b.exam_date_obj;
      });

      setExams(sortedExams);
      setFilteredExams(sortedExams);
    } catch (err) {
      console.error("Error fetching exams:", err);
      setError("Failed to load exams. Please try again.");
    } finally {
      setIsLoading(false);
    }
  }, [databaseId, examsCollectionId]);

  // Fetch all questions
  const fetchQuestions = useCallback(async () => {
    try {
      const response = await databases.listDocuments(databaseId, questionsCollectionId);
      setQuestions(response.documents);
      setFilteredQuestions(response.documents);
      
      const tags = new Set();
      response.documents.forEach(question => {
        if (question.tags && Array.isArray(question.tags)) {
          question.tags.forEach(tag => tags.add(tag));
        }
      });
      setAvailableTags(Array.from(tags).sort());
    } catch (err) {
      console.error("Error fetching questions:", err);
      setError("Failed to load questions");
    }
  }, [databaseId, questionsCollectionId]);

  // Fetch questions for a specific exam
  const fetchExamQuestions = useCallback(async (examId) => {
    try {
      const response = await databases.listDocuments(
        databaseId,
        examQuestionsCollectionId,
        [Query.equal("exam_id", examId)]
      );

      const marksMap = {};
      const questionIds = [];
      response.documents.forEach(q => {
        marksMap[q.question_id] = q.marks;
        questionIds.push(q.question_id);
      });

      setQuestionMarks(marksMap);
      return { documents: response.documents, questionIds };
    } catch (err) {
      console.error("Error fetching exam questions:", err);
      setError("Failed to load exam questions. Please try again.");
      return { documents: [], questionIds: [] };
    }
  }, [databaseId, examQuestionsCollectionId]);

  // Fetch full question details for an exam
  const fetchQuestionsForExam = useCallback(async (examId) => {
    try {
      const examQuestions = await databases.listDocuments(
        databaseId,
        examQuestionsCollectionId,
        [Query.equal("exam_id", examId)]
      );

      if (examQuestions.documents.length > 0) {
        const questionIds = examQuestions.documents.map(q => q.question_id);
        const questionsResponse = await databases.listDocuments(
          databaseId,
          questionsCollectionId,
          [Query.equal("$id", questionIds)]
        );

        const marksMap = {};
        examQuestions.documents.forEach(q => {
          marksMap[q.question_id] = q.marks;
        });

        return {
          questions: questionsResponse.documents,
          marks: marksMap,
          examQuestions: examQuestions.documents
        };
      }

      return { questions: [], marks: {}, examQuestions: [] };
    } catch (err) {
      console.error("Error fetching questions for exam:", err);
      setError("Failed to load exam questions");
      return { questions: [], marks: {}, examQuestions: [] };
    }
  }, [databaseId, questionsCollectionId, examQuestionsCollectionId]);

  useEffect(() => {
    fetchExams();
    fetchQuestions();
  }, [fetchExams, fetchQuestions]);

  // Filter questions
  useEffect(() => {
    let results = questions;
    
    if (searchTerm) {
      results = results.filter(question => 
        question.text?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        question.question_id?.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }
    
    if (difficultyFilter !== "all") {
      results = results.filter(question => 
        question.difficulty === difficultyFilter
      );
    }
    
    if (tagFilter !== "all") {
      results = results.filter(question => 
        question.tags && question.tags.includes(tagFilter)
      );
    }
    
    setFilteredQuestions(results);
    setCurrentPage(1);
  }, [searchTerm, difficultyFilter, tagFilter, questions]);

  // Modal handlers
  const openModal = (exam = null) => {
    setSelectedExam(exam);
    setFormData(
      exam ? {
        exam_id: exam.exam_id || "",
        name: exam.name || "",
        description: exam.description || "",
        exam_date: exam.exam_date || "",
        duration: exam.duration?.toString() || "",
        status: exam.status || "active",
      } : initialFormData
    );
    setIsModalOpen(true);
  };

  const openQuestionModal = async (exam) => {
    setSelectedExam(exam);
    setIsLoading(true);
    try {
      const { questionIds, documents } = await fetchExamQuestions(exam.$id);
      setSelectedQuestions(questionIds);
      
      const marksMap = {};
      documents.forEach(q => {
        marksMap[q.question_id] = q.marks;
      });
      setQuestionMarks(marksMap);
      
      setIsQuestionModalOpen(true);
    } catch (err) {
      setError("Failed to load exam questions");
    } finally {
      setIsLoading(false);
    }
  };

  const openViewQuestionsModal = async (exam) => {
    setSelectedExam(exam);
    setIsLoading(true);
    try {
      const { questions: examQuestions } = await fetchQuestionsForExam(exam.$id);
      setFilteredQuestions(examQuestions);
      setIsViewQuestionsModalOpen(true);
    } catch (err) {
      setError("Failed to load exam questions");
    } finally {
      setIsLoading(false);
    }
  };

  // Close modal handlers
  const closeModal = () => {
    setIsModalOpen(false);
    setSelectedExam(null);
    setFormData(initialFormData);
    setError(null);
  };

  const closeQuestionModal = () => {
    setIsQuestionModalOpen(false);
    setSelectedExam(null);
    setSelectedQuestions([]);
    setQuestionMarks({});
    setSearchTerm("");
    setDifficultyFilter("all");
    setTagFilter("all");
  };

  const closeViewQuestionsModal = () => {
    setIsViewQuestionsModalOpen(false);
    setSelectedExam(null);
    setFilteredQuestions(questions);
  };

  // Other handlers
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleQuestionSelect = (questionId) => {
    setSelectedQuestions(prev => {
      if (prev.includes(questionId)) {
        const newMarks = {...questionMarks};
        delete newMarks[questionId];
        setQuestionMarks(newMarks);
        return prev.filter(id => id !== questionId);
      } else {
        return [...prev, questionId];
      }
    });
  };

  const handleMarksChange = (questionId, value) => {
    setQuestionMarks(prev => ({
      ...prev,
      [questionId]: parseInt(value) || 1
    }));
  };

  // Form validation
  const validateForm = (data) => {
    if (!data.exam_id.trim()) return "Exam ID is required";
    if (!data.name.trim()) return "Exam name is required";
    if (!data.exam_date) return "Exam date is required";
    if (!data.duration || isNaN(parseInt(data.duration))) return "Duration must be a valid number";
    return null;
  };

  // Save exam
  const handleSave = async (data) => {
    const validationError = validateForm(data);
    if (validationError) {
      setError(validationError);
      return;
    }

    setIsLoading(true);
    setError(null);

    try {
      const user = await account.get();
      if (!user) throw new Error("Authentication required");

      const durationInt = parseInt(data.duration, 10);
      const timestamp = new Date().toISOString();

      if (selectedExam) {
        await databases.updateDocument(
          databaseId,
          examsCollectionId,
          selectedExam.$id,
          { ...data, duration: durationInt, modified_at: timestamp }
        );
      } else {
        await databases.createDocument(
          databaseId,
          examsCollectionId,
          ID.unique(),
          {
            ...data,
            duration: durationInt,
            created_by: user.$id,
            created_at: timestamp,
            modified_at: timestamp,
          },
          [
            Permission.read(Role.any()),
            Permission.update(Role.user(user.$id)),
            Permission.delete(Role.user(user.$id))
          ]
        );
      }

      closeModal();
      await fetchExams();
    } catch (err) {
      console.error("Error saving exam:", err);
      setError(err.message || "Failed to save exam");
    } finally {
      setIsLoading(false);
    }
  };

  // Save exam questions
  const handleSaveQuestions = async () => {
    if (!selectedExam) return;

    setIsLoading(true);
    setError(null);

    try {
      const user = await account.get();
      if (!user) throw new Error("Authentication required");

      const existingQuestions = await fetchExamQuestions(selectedExam.$id);
      
      // Delete removed questions
      const questionsToDelete = existingQuestions.documents.filter(
        q => !selectedQuestions.includes(q.question_id)
      );
      
      await Promise.all(
        questionsToDelete.map(q => 
          databases.deleteDocument(databaseId, examQuestionsCollectionId, q.$id)
        )
      );

      // Add/update questions
      await Promise.all(
        selectedQuestions.map(async (questionId, index) => {
          const existing = existingQuestions.documents.find(
            q => q.question_id === questionId
          );
          
          if (existing) {
            await databases.updateDocument(
              databaseId,
              examQuestionsCollectionId,
              existing.$id,
              { order: index + 1, marks: questionMarks[questionId] || 1 }
            );
          } else {
            await databases.createDocument(
              databaseId,
              examQuestionsCollectionId,
              ID.unique(),
              {
                exam_id: selectedExam.$id,
                question_id: questionId,
                order: index + 1,
                marks: questionMarks[questionId] || 1
              },
              [
                Permission.read(Role.any()),
                Permission.update(Role.user(user.$id)),
                Permission.delete(Role.user(user.$id))
              ]
            );
          }
        })
      );

      closeQuestionModal();
    } catch (err) {
      console.error("Error saving exam questions:", err);
      setError(err.message || "Failed to save exam questions");
    } finally {
      setIsLoading(false);
    }
  };

  // Delete exam
  const deleteExam = async (examId) => {
    if (!confirm("Are you sure you want to delete this exam?")) return;

    setIsLoading(true);
    try {
      const user = await account.get();
      if (!user) throw new Error("Authentication required");

      const examQuestions = await fetchExamQuestions(examId);
      await Promise.all(
        examQuestions.documents.map(q => 
          databases.deleteDocument(databaseId, examQuestionsCollectionId, q.$id)
        )
      );

      await databases.deleteDocument(databaseId, examsCollectionId, examId);
      await fetchExams();
      closeExamDetails();
    } catch (err) {
      console.error("Error deleting exam:", err);
      setError(err.message || "Failed to delete exam");
    } finally {
      setIsLoading(false);
    }
  };

  // Helper functions
  const formatDate = (dateString) => {
    const options = { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric', 
      hour: '2-digit', 
      minute: '2-digit' 
    };
    return new Date(dateString).toLocaleDateString(undefined, options);
  };

  const getExamStatus = (examDate) => {
    const now = new Date();
    const examDateObj = new Date(examDate);
    return examDateObj < now ? "Expired" : "Upcoming";
  };

  // Pagination
  const indexOfLastQuestion = currentPage * questionsPerPage;
  const indexOfFirstQuestion = indexOfLastQuestion - questionsPerPage;
  const currentQuestions = filteredQuestions.slice(indexOfFirstQuestion, indexOfLastQuestion);
  const totalPages = Math.ceil(filteredQuestions.length / questionsPerPage);

  // View components
  const viewExamDetails = (exam) => {
    setSelectedExamDetail(exam);
  };

  const closeExamDetails = () => {
    setSelectedExamDetail(null);
  };

  // Render
  return (
    <AdminLayout>
      <div className="container mx-auto px-4 py-6">
        {/* Header and Add Exam button */}
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-2xl font-bold text-gray-800">Manage Exams</h2>
          <button
            onClick={() => openModal()}
            className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition-colors"
          >
            + Add Exam
          </button>
        </div>

        {/* Error display */}
        {error && (
          <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4">
            <p>{error}</p>
          </div>
        )}

        {/* Loading state */}
        {isLoading && !exams.length ? (
          <div className="flex justify-center items-center h-64">
            <p className="text-gray-500">Loading exams...</p>
          </div>
        ) : (
          <div className="space-y-4">
            {filteredExams.map((exam) => (
              <div 
                key={exam.$id}
                onClick={() => viewExamDetails(exam)}
                className={`p-4 border rounded-lg cursor-pointer transition-all hover:shadow-md ${
                  getExamStatus(exam.exam_date) === "Expired" 
                    ? "bg-gray-50 border-gray-200" 
                    : "bg-white border-blue-100"
                }`}
              >
                {/* Exam card content */}
                <div className="flex justify-between items-start">
                  <div>
                    <h3 className="text-lg font-semibold text-gray-800">{exam.name}</h3>
                    <p className="text-sm text-gray-600">{exam.exam_id}</p>
                  </div>
                  <div className="flex items-center space-x-2">
                    <span className={`px-2 py-1 rounded-full text-xs ${
                      exam.status === "active" 
                        ? "bg-green-100 text-green-800" 
                        : exam.status === "completed" 
                          ? "bg-blue-100 text-blue-800" 
                          : "bg-gray-100 text-gray-800"
                    }`}>
                      {exam.status}
                    </span>
                    <span className={`px-2 py-1 rounded-full text-xs ${
                      getExamStatus(exam.exam_date) === "Expired" 
                        ? "bg-red-100 text-red-800" 
                        : "bg-green-100 text-green-800"
                    }`}>
                      {getExamStatus(exam.exam_date)}
                    </span>
                  </div>
                </div>
                <div className="mt-2 text-sm text-gray-600">
                  <p>{formatDate(exam.exam_date)} • {exam.duration} minutes</p>
                  {exam.description && (
                    <p className="mt-1 line-clamp-2">{exam.description}</p>
                  )}
                </div>
                <div className="mt-3 flex space-x-2">
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      openQuestionModal(exam);
                    }}
                    className="text-sm bg-purple-600 hover:bg-purple-700 text-white px-3 py-1 rounded"
                  >
                    Manage Questions
                  </button>
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      openViewQuestionsModal(exam);
                    }}
                    className="text-sm bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded"
                  >
                    View Questions
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}

        {/* Exam Modal */}
        {isModalOpen && (
          <Modal
            isOpen={isModalOpen}
            title={selectedExam ? "Edit Exam" : "Add Exam"}
            onClose={closeModal}
            onSave={handleSave}
            initialData={formData}
            fields={[
              { name: "exam_id", label: "Exam ID", type: "text", required: true },
              { name: "name", label: "Exam Name", type: "text", required: true },
              { name: "description", label: "Description", type: "textarea" },
              { name: "exam_date", label: "Exam Date", type: "datetime-local", required: true },
              { name: "duration", label: "Duration (minutes)", type: "number", required: true },
              {
                name: "status",
                label: "Status",
                type: "select",
                options: ["active", "inactive", "completed"],
                required: true,
              },
            ]}
            onChange={handleInputChange}
            isLoading={isLoading}
            error={error}
          />
        )}

        {/* Question Management Modal */}
        {isQuestionModalOpen && selectedExam && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] overflow-y-auto">
              <div className="p-6">
                {/* Modal header */}
                <div className="flex justify-between items-start mb-4">
                  <div>
                    <h3 className="text-xl font-bold text-gray-800">
                      Manage Questions for {selectedExam.name}
                    </h3>
                    <p className="text-sm text-gray-600">
                      {selectedQuestions.length} question(s) selected
                    </p>
                  </div>
                  <button
                    onClick={closeQuestionModal}
                    className="text-gray-500 hover:text-gray-700"
                  >
                    <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>

                {/* Error display */}
                {error && (
                  <div className="mb-4 p-3 bg-red-100 border-l-4 border-red-500 text-red-700">
                    <p>{error}</p>
                  </div>
                )}

                {/* Filters */}
                <div className="mb-4 grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div>
                    <label htmlFor="search" className="block text-sm font-medium text-gray-700 mb-1">
                      Search Questions
                    </label>
                    <input
                      type="text"
                      id="search"
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      placeholder="Search by text or ID..."
                      className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                  <div>
                    <label htmlFor="difficulty" className="block text-sm font-medium text-gray-700 mb-1">
                      Filter by Difficulty
                    </label>
                    <select
                      id="difficulty"
                      value={difficultyFilter}
                      onChange={(e) => setDifficultyFilter(e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                    >
                      <option value="all">All Difficulties</option>
                      <option value="easy">Easy</option>
                      <option value="medium">Medium</option>
                      <option value="hard">Hard</option>
                    </select>
                  </div>
                  <div>
                    <label htmlFor="tags" className="block text-sm font-medium text-gray-700 mb-1">
                      Filter by Tag
                    </label>
                    <div className="relative">
                      <select
                        id="tags"
                        value={tagFilter}
                        onChange={(e) => setTagFilter(e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                      >
                        <option value="all">All Tags</option>
                        {availableTags.map(tag => (
                          <option key={tag} value={tag}>{tag}</option>
                        ))}
                      </select>
                    </div>
                  </div>
                </div>

                {/* Questions list */}
                <div className="space-y-3">
                  {currentQuestions.length > 0 ? (
                    currentQuestions.map((question) => (
                      <div 
                        key={question.$id} 
                        className={`p-4 border rounded-lg transition-colors ${
                          selectedQuestions.includes(question.$id) 
                            ? "bg-blue-50 border-blue-200" 
                            : "bg-white border-gray-200 hover:bg-gray-50"
                        }`}
                      >
                        <div className="flex items-start space-x-3">
                          <input
                            type="checkbox"
                            checked={selectedQuestions.includes(question.$id)}
                            onChange={() => handleQuestionSelect(question.$id)}
                            className="mt-1 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                          />
                          <div className="flex-1">
                            <div className="flex justify-between items-start">
                              <h4 className="font-medium text-gray-800">
                                {question.text || "Question"}
                              </h4>
                              <span className={`px-2 py-1 text-xs rounded-full ${
                                question.difficulty === "easy" 
                                  ? "bg-green-100 text-green-800" 
                                  : question.difficulty === "medium" 
                                    ? "bg-yellow-100 text-yellow-800" 
                                    : "bg-red-100 text-red-800"
                              }`}>
                                {question.difficulty}
                              </span>
                            </div>
                            <div className="mt-1 text-sm text-gray-600">
                              <span className="mr-2">ID: {question.question_id}</span>
                              <span>Type: {question.type}</span>
                              {question.tags && question.tags.length > 0 && (
                                <div className="mt-1 flex flex-wrap gap-1">
                                  {question.tags.map(tag => (
                                    <span key={tag} className="px-2 py-0.5 bg-gray-100 text-gray-700 rounded-full text-xs">
                                      {tag}
                                    </span>
                                  ))}
                                </div>
                              )}
                            </div>
                            
                            {selectedQuestions.includes(question.$id) && (
                              <div className="mt-3 flex items-center">
                                <label htmlFor={`marks-${question.$id}`} className="mr-2 text-sm text-gray-700">
                                  Marks:
                                </label>
                                <input
                                  type="number"
                                  id={`marks-${question.$id}`}
                                  min="1"
                                  value={questionMarks[question.$id] || 1}
                                  onChange={(e) => handleMarksChange(question.$id, e.target.value)}
                                  className="w-20 px-2 py-1 border border-gray-300 rounded-md text-sm"
                                />
                              </div>
                            )}
                            
                            {question.options_text && (
                              <div className="mt-2 grid grid-cols-1 md:grid-cols-2 gap-2">
                                {question.options_text.map((option, index) => (
                                  <div 
                                    key={index} 
                                    className={`text-sm p-2 rounded ${
                                      question.correct_answer === index 
                                        ? "bg-green-100 text-green-800" 
                                        : "bg-gray-100 text-gray-800"
                                    }`}
                                  >
                                    {option}
                                  </div>
                                ))}
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    ))
                  ) : (
                    <div className="text-center py-8 text-gray-500">
                      No questions found matching your criteria
                    </div>
                  )}
                </div>

                {/* Pagination */}
                {filteredQuestions.length > questionsPerPage && (
                  <div className="mt-6 flex justify-between items-center">
                    <button
                      onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
                      disabled={currentPage === 1}
                      className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors disabled:opacity-50"
                    >
                      Previous
                    </button>
                    <span className="text-sm text-gray-700">
                      Page {currentPage} of {totalPages}
                    </span>
                    <button
                      onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}
                      disabled={currentPage === totalPages}
                      className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors disabled:opacity-50"
                    >
                      Next
                    </button>
                  </div>
                )}

                {/* Action buttons */}
                <div className="mt-6 flex justify-end space-x-3">
                  <button
                    onClick={closeQuestionModal}
                    className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors"
                    disabled={isLoading}
                  >
                    Cancel
                  </button>
                  <button
                    onClick={handleSaveQuestions}
                    className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors disabled:opacity-50"
                    disabled={isLoading}
                  >
                    {isLoading ? 'Saving...' : 'Save Questions'}
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* View Questions Modal */}
        {isViewQuestionsModalOpen && selectedExam && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] overflow-y-auto">
              <div className="p-6">
                <div className="flex justify-between items-start mb-4">
                  <div>
                    <h3 className="text-xl font-bold text-gray-800">
                      Questions for {selectedExam.name}
                    </h3>
                    <p className="text-sm text-gray-600">
                      {filteredQuestions.length} question(s)
                    </p>
                  </div>
                  <button
                    onClick={closeViewQuestionsModal}
                    className="text-gray-500 hover:text-gray-700"
                  >
                    <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>

                {error && (
                  <div className="mb-4 p-3 bg-red-100 border-l-4 border-red-500 text-red-700">
                    <p>{error}</p>
                  </div>
                )}

                <div className="space-y-4">
                  {filteredQuestions.length > 0 ? (
                    filteredQuestions.map((question) => (
                      <div key={question.$id} className="p-4 border border-gray-200 rounded-lg bg-white">
                        <div className="flex justify-between items-start">
                          <h4 className="font-medium text-gray-800">
                            {question.text || "Question"}
                          </h4>
                          <div className="flex items-center space-x-2">
                            <span className={`px-2 py-1 rounded-full text-xs ${
                              question.difficulty === "easy" 
                                ? "bg-green-100 text-green-800" 
                                : question.difficulty === "medium" 
                                  ? "bg-yellow-100 text-yellow-800" 
                                  : "bg-red-100 text-red-800"
                            }`}>
                              {question.difficulty}
                            </span>
                            <span className="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs">
                              Marks: {questionMarks[question.$id] || 1}
                            </span>
                          </div>
                        </div>
                        <div className="mt-1 text-sm text-gray-600">
                          <span className="mr-2">ID: {question.question_id}</span>
                          <span>Type: {question.type}</span>
                          {question.tags && question.tags.length > 0 && (
                            <div className="mt-1 flex flex-wrap gap-1">
                              {question.tags.map(tag => (
                                <span key={tag} className="px-2 py-0.5 bg-gray-100 text-gray-700 rounded-full text-xs">
                                  {tag}
                                </span>
                              ))}
                            </div>
                          )}
                        </div>
                        
                        {question.options_text && (
                          <div className="mt-3 grid grid-cols-1 md:grid-cols-2 gap-2">
                            {question.options_text.map((option, index) => (
                              <div 
                                key={index} 
                                className={`text-sm p-2 rounded ${
                                  question.correct_answer === index 
                                    ? "bg-green-100 text-green-800" 
                                    : "bg-gray-100 text-gray-800"
                                }`}
                              >
                                {option}
                              </div>
                            ))}
                          </div>
                        )}
                      </div>
                    ))
                  ) : (
                    <div className="text-center py-8 text-gray-500">
                      No questions found for this exam
                    </div>
                  )}
                </div>

                <div className="mt-6 flex justify-end">
                  <button
                    onClick={closeViewQuestionsModal}
                    className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors"
                  >
                    Close
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Exam Details Modal */}
        {selectedExamDetail && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] overflow-y-auto">
              <div className="p-6">
                <div className="flex justify-between items-start mb-4">
                  <div>
                    <h3 className="text-xl font-bold text-gray-800">{selectedExamDetail.name}</h3>
                    <p className="text-sm text-gray-600">{selectedExamDetail.exam_id}</p>
                  </div>
                  <div className="flex items-center space-x-3">
                    <span className={`px-3 py-1 rounded-full text-xs ${
                      selectedExamDetail.status === "active" 
                        ? "bg-green-100 text-green-800" 
                        : selectedExamDetail.status === "completed" 
                          ? "bg-blue-100 text-blue-800" 
                          : "bg-gray-100 text-gray-800"
                    }`}>
                      {selectedExamDetail.status}
                    </span>
                    <span className={`px-3 py-1 rounded-full text-xs ${
                      getExamStatus(selectedExamDetail.exam_date) === "Expired" 
                        ? "bg-red-100 text-red-800" 
                        : "bg-green-100 text-green-800"
                    }`}>
                      {getExamStatus(selectedExamDetail.exam_date)}
                    </span>
                    <button
                      onClick={closeExamDetails}
                      className="text-gray-500 hover:text-gray-700"
                    >
                      <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                      </svg>
                    </button>
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">
                  <div>
                    <h4 className="text-sm font-medium text-gray-500">Exam Date</h4>
                    <p className="mt-1 text-gray-800">{formatDate(selectedExamDetail.exam_date)}</p>
                  </div>
                  <div>
                    <h4 className="text-sm font-medium text-gray-500">Duration</h4>
                    <p className="mt-1 text-gray-800">{selectedExamDetail.duration} minutes</p>
                  </div>
                  <div className="md:col-span-2">
                    <h4 className="text-sm font-medium text-gray-500">Description</h4>
                    <p className="mt-1 text-gray-800 whitespace-pre-line">
                      {selectedExamDetail.description || "No description provided"}
                    </p>
                  </div>
                </div>

                <div className="mt-8 flex justify-end space-x-3">
                  <button
                    onClick={() => openModal(selectedExamDetail)}
                    className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
                  >
                    Edit Exam
                  </button>
                  <button
                    onClick={() => deleteExam(selectedExamDetail.$id)}
                    className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors"
                  >
                    Delete Exam
                  </button>
                  <button
                    onClick={() => openViewQuestionsModal(selectedExamDetail)}
                    className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors"
                  >
                    View Questions
                  </button>
                  <button
                    onClick={closeExamDetails}
                    className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors"
                  >
                    Close
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </AdminLayout>
  );
};

export default ExamsPage;
./pages/login.jsx
//src/pages/login.js
import React, { useState } from "react";
import { motion } from "framer-motion";
import { User, Lock, LogIn } from "lucide-react";
import { useRouter } from "next/router";
import { loginAdmin, loginStudent } from "../utils/auth";

const Login = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [role, setRole] = useState("admin"); // Default to Admin
  const router = useRouter();

  const handleLogin = async (e) => {
    e.preventDefault();
  
    if (!email || !password) {
      alert("Please enter both email and password");
      return;
    }
  
    try {
      if (role === "admin") {
        await loginAdmin(email, password);
        // router.push("/admin/dashboard");
        router.push("/admin");
      } else {
        const student = await loginStudent(email, password);
        if (student) {
          localStorage.setItem("studentSession", JSON.stringify(student)); // ✅ Store session
          console.log("Student session saved:", student); // ✅ Debugging log
          router.push("/student");
        } else {
          alert("Invalid student credentials.");
        }
      }
    } catch (error) {
      alert("Login failed: " + error.message);
    }
  };
  

  return (
    <div className="relative min-h-screen flex items-center justify-center overflow-hidden bg-gradient-to-r from-blue-500 to-purple-600">
      <motion.div
        className="bg-white rounded-xl shadow-2xl p-8 w-full max-w-md"
        initial={{ y: -50, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ duration: 0.5, delay: 0.2 }}
      >
        <div className="text-center mb-6">
          <h2 className="text-3xl font-bold text-gray-800">{role === "admin" ? "Admin Login" : "Student Login"}</h2>
          <p className="text-gray-500 mt-2">Access your {role} dashboard</p>
        </div>

        <form onSubmit={handleLogin} className="space-y-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Email</label>
            <div className="relative">
              <input
                type="email"
                className="w-full px-4 py-2 pl-10 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="Enter your email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
              />
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <User size={18} className="text-gray-400" />
              </div>
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Password</label>
            <div className="relative">
              <input
                type="password"
                className="w-full px-4 py-2 pl-10 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="Enter your password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
              />
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <Lock size={18} className="text-gray-400" />
              </div>
            </div>
          </div>

          {/* Role Selection */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Login As</label>
            <select
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              value={role}
              onChange={(e) => setRole(e.target.value)}
            >
              <option value="admin">Admin</option>
              <option value="student">Student</option>
            </select>
          </div>

          <motion.button
            type="submit"
            className="w-full bg-gradient-to-r from-blue-500 to-purple-600 text-white py-2 px-4 rounded-lg hover:from-blue-600 hover:to-purple-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 flex items-center justify-center gap-2"
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            <LogIn size={18} />
            Login
          </motion.button>
        </form>
      </motion.div>
    </div>
  );
};

export default Login;

./pages/404.js
import React from 'react';
import { useRouter } from 'next/router'; // For navigation
import { motion } from 'framer-motion';
import { Home, ArrowLeft } from 'lucide-react'; // Icons for navigation

const NotFound = () => {
  const router = useRouter();

  // Get the user role from the query parameter (e.g., ?role=admin or ?role=student)
  const { role } = router.query;

  // Handle redirection based on the user's role
  const handleGoHome = () => {
    if (role === 'admin') {
      router.push('/admin/dashboard'); // Redirect to admin dashboard
    } else if (role === 'student') {
      router.push('/student/dashboard'); // Redirect to student dashboard
    } else {
      router.push('/'); // Default fallback to home
    }
  };

  const handleGoBack = () => router.back(); // Go back to the previous page

  return (
    <motion.div
      className="min-h-screen flex flex-col items-center justify-center p-6 bg-gray-50"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
    >
      <motion.div
        className="bg-white rounded-xl p-8 shadow-lg text-center max-w-md w-full"
        initial={{ y: -20, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ duration: 0.5, delay: 0.2 }}
      >
        <h1 className="text-4xl font-bold text-gray-800 mb-4">404</h1>
        <p className="text-gray-600 mb-6">
          Oops! The page you're looking for doesn't exist.
        </p>

        <div className="flex flex-col gap-4">
          <motion.button
            onClick={handleGoHome}
            className="flex items-center justify-center gap-2 bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors w-full"
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            <Home size={18} />
            Go to Dashboard
          </motion.button>

          <motion.button
            onClick={handleGoBack}
            className="flex items-center justify-center gap-2 bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 transition-colors w-full"
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            <ArrowLeft size={18} />
            Go Back
          </motion.button>
        </div>
      </motion.div>
    </motion.div>
  );
};

export default NotFound;
./pages/exams/take.jsx
import React, { useState } from 'react';
import { Clock, AlertCircle, ChevronLeft, ChevronRight } from 'lucide-react';

const TakeExam = () => {
  const [currentQuestion, setCurrentQuestion] = useState(0);

  const exam = {
    title: 'Mathematics Final Exam',
    duration: '2 hours',
    totalQuestions: 50,
    questions: [
      {
        id: 1,
        question: 'What is the solution to the equation 2x + 5 = 13?',
        options: ['x = 4', 'x = 6', 'x = 8', 'x = 10'],
        type: 'single',
      },
      {
        id: 2,
        question: 'solution to the equation 2x + 5 = 13?',
        options: ['x = 4', 'x = 6', 'x = 8', 'x = 10'],
        type: 'single',
      },
      // Add more questions here
    ],
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b border-gray-200 px-6 py-4">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-xl font-bold text-gray-800">{exam.title}</h1>
            <p className="text-sm text-gray-500">
              Question {currentQuestion + 1} of {exam.totalQuestions}
            </p>
          </div>
          <div className="flex items-center gap-6">
            <div className="flex items-center gap-2">
              <Clock size={20} className="text-gray-400" />
              <span className="text-lg font-medium text-gray-900">01:45:30</span>
            </div>
            <button className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors">
              Submit Exam
            </button>
          </div>
        </div>

        {/* Progress bar */}
        <div className="mt-4 h-1 bg-gray-200 rounded-full overflow-hidden">
          <div
            className="h-full bg-blue-600"
            style={{ width: `${((currentQuestion + 1) / exam.totalQuestions) * 100}%` }}
          ></div>
        </div>
      </div>

      {/* Question Area */}
      <div className="max-w-4xl mx-auto p-6">
        <div className="bg-white rounded-xl shadow-sm p-6">
          <div className="space-y-6">
            <div>
              <h2 className="text-lg font-medium text-gray-900 mb-4">
                {exam.questions[currentQuestion].question}
              </h2>
              <div className="space-y-3">
                {exam.questions[currentQuestion].options.map((option, index) => (
                  <label
                    key={index}
                    className="flex items-center gap-3 p-4 border border-gray-200 rounded-lg cursor-pointer hover:bg-gray-50"
                  >
                    <input
                      type="radio"
                      name={`question-${currentQuestion}`}
                      className="w-4 h-4 text-blue-600"
                    />
                    <span className="text-gray-700">{option}</span>
                  </label>
                ))}
              </div>
            </div>

            <div className="flex items-center justify-between pt-6 border-t border-gray-200">
              <button
                onClick={() => setCurrentQuestion(Math.max(0, currentQuestion - 1))}
                disabled={currentQuestion === 0}
                className="flex items-center gap-2 px-4 py-2 text-gray-600 hover:text-gray-900 disabled:opacity-50"
              >
                <ChevronLeft size={20} />
                Previous
              </button>
              <button
                onClick={() => setCurrentQuestion(Math.min(exam.totalQuestions - 1, currentQuestion + 1))}
                disabled={currentQuestion === exam.totalQuestions - 1}
                className="flex items-center gap-2 px-4 py-2 text-gray-600 hover:text-gray-900 disabled:opacity-50"
              >
                Next
                <ChevronRight size={20} />
              </button>
            </div>
          </div>
        </div>

        {/* Question Navigation */}
        <div className="mt-6 bg-white rounded-xl shadow-sm p-6">
          <h3 className="text-sm font-medium text-gray-700 mb-4">Question Navigation</h3>
          <div className="grid grid-cols-10 gap-2">
            {Array.from({ length: exam.totalQuestions }).map((_, index) => (
              <button
                key={index}
                onClick={() => setCurrentQuestion(index)}
                className={`w-10 h-10 rounded-lg flex items-center justify-center text-sm font-medium ${
                  currentQuestion === index
                    ? 'bg-blue-600 text-white'
                    : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                }`}
              >
                {index + 1}
              </button>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default TakeExam;

./pages/exams/completed.jsx
import React from 'react';
import { CheckCircle, Search, Filter, Download } from 'lucide-react';

const Completed = () => {
  const exams = [
    {
      id: 1,
      title: 'Mathematics Final',
      course: 'Mathematics 101',
      date: '2025-03-01',
      score: 85,
      duration: '2 hours',
      questions: 50,
      correct: 42,
    },
    // Add more completed exams here
  ];

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold text-gray-800">Completed Exams</h1>
        <div className="flex items-center gap-4">
          <button className="flex items-center gap-2 px-4 py-2 border border-gray-200 rounded-lg hover:bg-gray-50">
            <Download size={20} />
            <span>Export Results</span>
          </button>
        </div>
      </div>

      <div className="bg-white rounded-xl shadow-sm">
        <div className="p-4 border-b border-gray-200">
          <div className="flex items-center gap-4">
            <div className="flex-1 relative">
              <input
                type="text"
                placeholder="Search exams..."
                className="w-full pl-10 pr-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
              <Search className="absolute left-3 top-2.5 text-gray-400" size={20} />
            </div>
            <button className="flex items-center gap-2 px-4 py-2 border border-gray-200 rounded-lg hover:bg-gray-50">
              <Filter size={20} />
              <span>Filters</span>
            </button>
          </div>
        </div>

        <div className="p-4">
          <div className="space-y-4">
            {exams.map((exam) => (
              <div
                key={exam.id}
                className="border border-gray-100 rounded-lg p-4 hover:bg-gray-50"
              >
                <div className="flex items-center justify-between mb-4">
                  <div className="flex items-center gap-4">
                    <div className="w-12 h-12 bg-emerald-100 rounded-lg flex items-center justify-center">
                      <CheckCircle className="text-emerald-600" size={24} />
                    </div>
                    <div>
                      <h3 className="font-medium text-gray-900">{exam.title}</h3>
                      <p className="text-sm text-gray-500">{exam.course}</p>
                    </div>
                  </div>
                  <div className="text-right">
                    <div className="text-2xl font-semibold text-emerald-600">
                      {exam.score}%
                    </div>
                    <p className="text-sm text-gray-500">Final Score</p>
                  </div>
                </div>

                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  <div>
                    <p className="text-sm text-gray-500">Date Completed</p>
                    <p className="font-medium text-gray-900">{exam.date}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500">Duration</p>
                    <p className="font-medium text-gray-900">{exam.duration}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500">Questions</p>
                    <p className="font-medium text-gray-900">{exam.questions}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500">Correct Answers</p>
                    <p className="font-medium text-gray-900">{exam.correct}</p>
                  </div>
                </div>

                <div className="mt-4 flex justify-end">
                  <button className="text-blue-600 hover:text-blue-700 font-medium text-sm">
                    View Details
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Completed;

./pages/exams/upcoming.jsx
import React from 'react';
import { Calendar, Clock, AlertCircle } from 'lucide-react';

const UpcomingExams = () => {
  const exams = [
    {
      id: 1,
      title: 'Physics Mid-term',
      course: 'Physics 101',
      date: '2025-03-15',
      time: '10:00 AM',
      duration: '2 hours',
      topics: ['Mechanics', 'Thermodynamics', 'Waves'],
      instructions: ['Bring calculator', 'No phones allowed'],
    },
    // Add more upcoming exams here
  ];

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold text-gray-800 mb-6">Upcoming Exams</h1>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2 space-y-6">
          {exams.map((exam) => (
            <div key={exam.id} className="bg-white rounded-xl shadow-sm overflow-hidden">
              <div className="p-6">
                <div className="flex items-center justify-between mb-4">
                  <div>
                    <h2 className="text-xl font-semibold text-gray-900">{exam.title}</h2>
                    <p className="text-gray-500">{exam.course}</p>
                  </div>
                  <div className="flex items-center gap-2">
                    <Clock size={20} className="text-gray-400" />
                    <span className="text-gray-600">{exam.duration}</span>
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4 mb-6">
                  <div className="flex items-center gap-3">
                    <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                      <Calendar className="text-blue-600" size={20} />
                    </div>
                    <div>
                      <p className="text-sm text-gray-500">Date</p>
                      <p className="font-medium text-gray-900">{exam.date}</p>
                    </div>
                  </div>
                  <div className="flex items-center gap-3">
                    <div className="w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center">
                      <Clock className="text-purple-600" size={20} />
                    </div>
                    <div>
                      <p className="text-sm text-gray-500">Time</p>
                      <p className="font-medium text-gray-900">{exam.time}</p>
                    </div>
                  </div>
                </div>

                <div className="border-t border-gray-100 pt-4">
                  <h3 className="font-medium text-gray-900 mb-2">Topics Covered</h3>
                  <div className="flex flex-wrap gap-2">
                    {exam.topics.map((topic, index) => (
                      <span
                        key={index}
                        className="px-3 py-1 bg-gray-50 rounded-full text-sm text-gray-600"
                      >
                        {topic}
                      </span>
                    ))}
                  </div>
                </div>

                <div className="border-t border-gray-100 mt-4 pt-4">
                  <h3 className="font-medium text-gray-900 mb-2">Instructions</h3>
                  <ul className="space-y-2">
                    {exam.instructions.map((instruction, index) => (
                      <li key={index} className="flex items-center gap-2 text-gray-600">
                        <AlertCircle size={16} className="text-amber-500" />
                        {instruction}
                      </li>
                    ))}
                  </ul>
                </div>
              </div>

              <div className="bg-gray-50 px-6 py-4">
                <button className="w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                  Prepare for Exam
                </button>
              </div>
            </div>
          ))}
        </div>

        {/* Right Sidebar */}
        <div className="space-y-6">
          <div className="bg-white rounded-xl shadow-sm p-6">
            <h2 className="text-lg font-semibold text-gray-800 mb-4">Exam Calendar</h2>
            {/* Calendar component would go here */}
            <div className="border border-gray-200 rounded-lg p-4 text-center text-gray-500">
              Calendar Component
            </div>
          </div>

          <div className="bg-amber-50 rounded-xl shadow-sm p-6">
            <div className="flex items-center gap-3 mb-4">
              <div className="w-10 h-10 bg-amber-100 rounded-full flex items-center justify-center">
                <AlertCircle className="text-amber-600" size={20} />
              </div>
              <h2 className="text-lg font-semibold text-amber-900">Important Notice</h2>
            </div>
            <p className="text-amber-800 mb-4">
              Make sure to review all course materials and complete practice tests before your exams.
            </p>
            <button className="w-full px-4 py-2 bg-amber-600 text-white rounded-lg hover:bg-amber-700 transition-colors">
              View Study Resources
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default UpcomingExams;

./pages/_document.js
import { Html, Head, Main, NextScript } from "next/document";

export default function Document() {
  return (
    <Html lang="en">
      <Head />
      <body className="antialiased">
        <Main />
        <NextScript />
      </body>
    </Html>
  );
}

./pages/_app.js
import { useState } from "react";
import Navbar from "../components/Navbar";
import Sidebar from "../components/Sidebar";
import "../styles/globals.css";
import { useRouter } from "next/router";

// Admin Layout Component
const AdminLayout = ({ children }) => {
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const toggleSidebar = () => setIsSidebarOpen(!isSidebarOpen);

  return (
    <div className="flex min-h-screen bg-gray-50">
      <Sidebar isAdmin={true} isOpen={isSidebarOpen} toggleSidebar={toggleSidebar} />
      <div className="flex-1">
        <Navbar isAdmin={true} toggleSidebar={toggleSidebar} />
        <div className="pt-16">{children}</div>
      </div>
    </div>
  );
};

// Student Layout Component
const StudentLayout = ({ children }) => {
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const toggleSidebar = () => setIsSidebarOpen(!isSidebarOpen);

  return (
    <div className="flex min-h-screen bg-gray-50">
      <Sidebar isAdmin={false} isOpen={isSidebarOpen} toggleSidebar={toggleSidebar} />
      <div className="flex-1">
        <Navbar isAdmin={false} toggleSidebar={toggleSidebar} />
        <div className="pt-16">{children}</div>
      </div>
    </div>
  );
};

// The App component that handles global layout
function MyApp({ Component, pageProps }) {
  const router = useRouter();

  // Determine if the page is an Admin or Student route
  const isAdminRoute = router.pathname.startsWith("/admin");
  const isStudentRoute = router.pathname.startsWith("/student");

  // Admin Layout
  if (isAdminRoute) {
    return (
      <AdminLayout>
        <Component {...pageProps} />
      </AdminLayout>
    );
  }

  // Student Layout
  if (isStudentRoute) {
    return (
      <StudentLayout>
        <Component {...pageProps} />
      </StudentLayout>
    );
  }

  // For other pages (like login, certificates, etc.), just render the component directly
  return <Component {...pageProps} />;
}

export default MyApp;

./pages/api/hello.js
// Next.js API route support: https://nextjs.org/docs/api-routes/introduction

export default function handler(req, res) {
  res.status(200).json({ name: "John Doe" });
}

